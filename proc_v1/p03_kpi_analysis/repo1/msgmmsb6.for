!     msgmmsb6.for
!     Copyright(c) M.S. Gerber & Associates 2000

!     Created: 5/5/2003 2:20:41 PM
!     Author : MARK S GERBER
!     Last change: MSG 12/7/2012 3:38:45 PM


      recursive subroutine init_asset_class_info ! use with lf95
      use msgoutpt
      use class_canadian
      use class_assets_results_2
      use ac_equiv
      use end_routine
      use class_amt1
      use grx_planning_routines
      use class_parameters
      use financial_run_switches
      use financial_switches_common
      use irec_endpoint_control
      use spindriftlib
      use prod_arrays_dimensions
      use kepcocom
      use sizecom
      use rptreccontrol
      use class_assets_results
      use class_tax_losses
      use class_ctaxes
      use class_master
      use forecast
      use namescom
      use class_run_switchesc
      use class_run_switchesl1
      use class_run_switchesl4
      use globecom
      use debugtrace

      implicit none
      save


      
      
      integer :: file_trace_aca=0 ! asset_class_analysis
      integer (kind=4) :: aca_called=0
      REAL (KIND=4) :: UNAMORT_DEBIT_ISS_EXPENSE_BAL,
     +         UNAMORT_DEBT_ISS_EXPENSE_BAL,
     +         CASH_REVENUES_RECEIVED,
     +         CASH_EXPENSES_PAID
      integer LowerBound
      integer UpperBound
      REAL (KIND=4) :: CongestionAnnualExpenes
      LOGICAL (KIND=4) :: BASE_YEAR_ACTIVE
      
      LOGICAL (KIND=1) :: MODEL_ISSUED_DEBT_REPORT
      LOGICAL (KIND=1) :: REPORT_ALL_ACCOUNTS,DEBT_REPORT
      LOGICAL*1 R_REV_TRANSFERS_ARE_ACTIVE,IMPA,
     +  R_EXP_TRANSFERS_ARE_ACTIVE,
     +  WVPA,IPALCO,IPALCO_PROPERTY_TAX/.TRUE./,
     +  DIVIDEND_PAYOUT_RATIO
      REAL RETURN_ECITIES_OBJ_VARS,R_TOTAL_CASH_EXPENSES
      REAL TRANSFR_SECONDAY_REVENUES,
     +     TRANSFER_SEC_REV_QUANITIES_MWH,
     +     TRANSFR_PURCHASE_FUEL_EXPENSES,
     +     TRANSFR_PURCHASE_VOM_EXPENSES,
     +     TRANSFR_PUR_EXP_QUANITIES,
     +     PENSION_VAC_storm_TAX_EXP,
     +     PENSIN_VAC_STRM_TAX_EXP_NONBOOK,
     +     PENSIN_VAC_STRM_TAX_EXP_BOOK,
     +     TEMP_PROPERTY_VALUE,
     +     WVPA_PURCHASE_POWER_EXPENSE_ADJ,
     +     EXP_WVPA_NON_MEMBER_COST_OF_POWER,
     +     EXP_WVPA_MEMBER_COST_OF_POWER,
     +     CUST_CAP_PURCHASES_TO_LEVEL_RM
      REAL GET_SCENARIO_BY_INDEX,
     +     THE_RATIO_OF_A_TO_B,
     +     THE_PERCENT_OF_A_TO_B,
     +     MONTHLY_NON_INCOME_TAX_PROCS,
     +     MTG_DEBT_RETIREMENTS,
     +     COMMON_STOCK_ISSUED_2_EQUITY,
     +     COMMON_STOCK_BUY_FROM_EQUITY,
     +     UNMODELLED_SUBS_OWNED_BY_SUBS,
     +     UNMODELLED_SUBS_OWNED_BY_PARENT,
     +     UNMODELED_SUB_DIVIDEND_2_PARENT,
     +     TOTAL_CAP_LEASES_BAL_ADJ,
     +     RC_OTHER_PURCHASE_POWER_EXPENSE,
     +     TF_OTHER_PURCHASE_POWER_EXPENSE,
     +     ODEC_NA3_PURCHASE_EXPENSE,
     +     ODEC_NA3_TIER_RETURN,
     +     ODEC_TIER_RETURN_ON_INTRAINTEREST,
     +     STD_INTEREST_ADDEN,
     +     LTD_INTEREST_ADDEN,
     +     STD_FIRST_HALF_RATE,
     +     STD_SECOND_HALF_RATE,
     +     STI_FIRST_HALF_RATE,
     +     STI_SECOND_HALF_RATE,
     +     LTI_FIRST_HALF_RATE,
     +     LTI_SECOND_HALF_RATE,
     +     CUST_DEPOSITS_FIRST_HALF_RATE,
     +     CUST_DEPOSITS_SECOND_HALF_RATE,
     +     DECOM_FUND_FIRST_HALF_RATE,
     +     DECOM_FUND_SECOND_HALF_RATE,
     +     RETIREMENT_FUND_FIRST_HALF_RATE,
     +     RETIREMENT_FUND_SECND_HALF_RATE,
     +     OCI_DECOM_FUND_FIRST_HALF_RATE,
     +     OCI_DECOM_FUND_SECOND_HALF_RATE,
     +     OCI_RETIREMENT_FUND_FIRST_HALF_RATE,
     +     OCI_RETIREMENT_FUND_SECND_HALF_RATE,
     +     OCI_NUCL_DECOM_FUND_RETURN_loc,
     +     OCI_RETURN_RETIREMENT_FUND,
     +     TEMP_RATE,
     +     CONSOLIDATED_PRIOR_INBALANCE,
     +     NOTES_PAYABLE_CASH_INTEREST,
     +     NOTES_RECEIVALBE_CASH_INTEREST,
     +     LAST_REVENUE_TAX_BASIS,
     +     Exp_PreferredDividends,
     +     Exp_AFDCBorrowed,
     +     Exp_AFDCEquity,
     +     Exp_InterestIncome,
     +     Exp_Dividends

      LOGICAL*1 ASSET_ANALYST_ONLY,VECTOR_FOUND
      LOGICAL*1 DONT_TALLY_THIS_CLASS,BANGOR
      LOGICAL*4 FILE_EXISTS
      REAL*4 DEFERRED_TAXES_DR_TAX_FILE
      REAL*4 PENSION_TAX_DEDUCTION,
     +       STORM_TAX_DEDUCTION,
     +       VACATION_TAX_DEDUCTION

      integer*2 class_check/100/,START_STUDY_ENDPOINT,TEMP_I2
!      CHARACTER (LEN=256) :: GET_SCENAME
      CHARACTER (LEN=5) :: GET_SCENAME
      LOGICAL*1 PARENT_HAS_LINKED_SBUS,
     +  PARENT_HAS_LINKED_SUBS,
     +  MONTAUK_ACTIVE,
     +  CREDITS_IN_INCOME_STATEMENT,
     +  MONTAUK_IS_ACTIVE,
     +  CREDITS_ARE_IN_INCOME_STATEMENT,
     +  NERC_REGION_BASED_FORECAST
      LOGICAL*1 VERSION_6_OR_GREATER/.TRUE./
      CHARACTER*1 REPORT_THIS_CLASS
      REAL*4 CONSOLIDATED_FED_NOL_GEN,
     +       CONSOLIDATED_FED_NOL_USED,
     +       CONSOLIDATED_FED_CREDITS_USED,
     +       CONSOLID_AVAILABLE_AMT_CREDITS,
     +       CONSOLD_AVAIL_FED_TAX_CREDIT,
     +       AMT_INCOME_ADDENDUM,
     +       COMMON_STOCK_2_ELIMINATE,
     +       COMMON_STOCK_BUYBACK_ELIMINATED,
     +       MIPS_INCOME_TAX_DEDUCTION,
     +       CONSOLIDATED_FED_TAX_CREDITS,
     +       CONSOLID_FED_SEC_29_TAX_CREDITS,
     +       CONSOLID_FED_SEC_42_TAX_CREDITS,
     +       CONSOLIDATED_STATE_TAX_CREDITS,
     +       CONSOLID_RETAINED_EARNINGS_BAL,
     +       CONSOLID_OCI_EARNINGS_BAL,
     +       CONSOLIDING_ADJ_RETN_EARN_BAL,
     +       SUB_COLUMN_TOTAL_SUB_INCOME,
     +       SUB_COLUMN_TOTAL_SUB_DIVIDEND,
     +       CONSOLD_COMMON_EQUITY_BAL,
     +       CONSOLD_BOY_DEFERRED_TAXES_DR,
     +       CONSOLD_BOY_DEFERRED_TAXES_CR,
     +       CONSOLD_BOY_OTHER_LT_LIABS,
     +       CONSOLD_BOY_ACCOUNTS_PAYABLE,
     +       CONSOLD_BOY_ACCOUNTS_RECIABLE,
     +       CONSOLD_BOY_SUB_INVESTMENT,
     +       CONSOLD_BOY_RETAINED_EARNINGS,
     +       CONSOLIDATED_BOY_FUNDS_BALANCE,
     +       CONSOLIDATED_LTD_BALANCE_WO_CURRENT_LTD,
     +       CONSOLIDATED_LTD_BALANCE,
     +       CONSOLIDATED_INVESTMENT_INCOME_RECEIVABLE,
     +       CONSOLD_BOY_NET_DEFERRED_DEBITS,
     +       CONSOLD_BOY_CWIP,
     +       CONSOLD_BOY_OTHER_ASSETS,
     +       CONSOLD_BOY_CURRENT_ASSETS,
     +       CONSOLD_BOY_OTHER_DEFERRED_CREDITS,
     +       CONSOLD_BOY_REGULATORY_DEFERRED_CREDITS,
     +       CONSOLD_BOY_GAIN_ON_REAQUIRED_DEBT,
C     +       CONSOLD_BOY_,
     +       DD_DEFERRED_EXPENSE_CASH,
     +       DD_ATL_CURRENT_TAX_EXPENSE,
     +       DD_BTL_CURRENT_TAX_EXPENSE,
     +       CONCOLIDATED_INCOME_TAX_ACCRUAL
      INTEGER*2 CS_DECLARATION_MONTH(4),SHARE_LEAD
      LOGICAL*1 WE_ARE_CONSOLIDATING
      REAL*4 CLASS_OTH_LIAB_SALE_ASSETS,NET_DEFERRED_DEBIT_ADJUSTMENT,
     +       DEFERRED_DEBIT_ADJUSTMENT,
     +       RATE_BASE_CASH_ADJ,ADJUSTMENT_2_DEFERRED_TAXES_BAL,
     +       ADJUSTMENT_2_DEFERRED_ITCS_BAL,RETAINED_EARNINGS_ADJ,
     +       EXTRA_ORDINARY_EXPENSE,LT_LIAB_BAL_ADJ,CWIP_BALANCE_ADJ,
     +       BAL_SHEET_RE_SUB_ADJ,EXP_DEFERRED_FUEL_EXPENSE,
     +       CS_BUYBACK_ADJ_RETAINED_ERNING,
     +       CLASS_PTCs(0:12)
      REAL*4 DEF_TAXES_FROM_NOLS_AMT_CREDITS,DEBT_FILE_ISSUE_EXPENSE

C INTERNAL VARIABLES THAT ARE NOT IN THE OUTPUT DATA SET

      REAL*4,CONSOLIDATING_PRIOR_INBALANCE,
     +       TOTAL_SUB_PRIOR_INBALANCE,
     +       TOTAL_SBU_PRIOR_INBALANCE
      REAL*4,ALLOCATABLE :: SBU_CASH_OTH_ASSET(:),
     +       SBU_DSM_CAPITIAL(:),
     +       SBU_BTL_LEASE_PAYMENTS(:),
     +       SBU_ATL_LEASE_PAYMENTS(:),
     +       SBU_CLASS_OTH_LIAB_SALE_ASSETS(:),
     +       SBU_RETIREE_MEDICAL_PAYMENTS(:),
     +       CLASS_PRIOR_INBALANCE(:)
      REAL*4 EXP_BOOK_DEPRECIATION,
     +       EXP_FILE_PROPERTY_TAXES,
     +       EXP_FILE_OTHER_TAXES,
     +       EXP_FILE_REVENUE_TAXES
      LOGICAL*1 :: WKP_ACTIVE=.false.,GreatRiver
      INTEGER*2 REPORTING_CLASS_ID,REPORTING_ASSET_CLASS
      REAL*4 R_COVERAGE_RATIO,FEDERAL_TAX_TABLE
      INTEGER*2 ELIMINAITON_CLASS_ID_NUM,PARENT_CLASS_ID_NUM,
     +  ID_NUM,MAX_LINKED_CLASSES,L,LINK_POS,J
C     INTEGER*2 R_PARENT_CLASS_ID
      INTEGER*2, ALLOCATABLE :: DEFINED_CLASS_POINTER_LIST(:),
     +  CLASS_LINKED_LEVEL(:),CLASS_AT_LEVEL(:),
     +  YEAR_CLASS_DEACTIVATED(:),
     +  ACTIVATE_CLASS_IN_YEAR(:)
      INTEGER*2 R_ACTIVATE_YR,R_DEACTIVE_YR,
     +  R_MO_ACTIVE,R_MO_DEACT,
     +  DEFINED_CLASSES,
     +  CLASS_LEVEL,
     +  LAST_CLASS_LEVEL,
     +  LINKED_LEVEL
      REAL*4 TAXES_ACCRUAL_ADJ,
     +       FEDERAL_TAX_EXCLUSION_ADJ,
     +       LTD_LAGGED_INTEREST_PAYMENT,
     +       PS_LAGGED_DIVIDEND_PAYMENT,
     +       ACCOUNTS_RECEIVABLE_BOY,
     +       ACCOUNTS_RECEIVABLE_EOY,
     +       ACCOUNTS_PAYABLE_BOY,
     +       ACCOUNTS_PAYABLE_EOY,
     +       PARENT_CASH_CS_DIVIDEND_PAYMENT,
     +       REGULATORY_DEFERRED_CREDITS_BAL_BOY,
     +       GAIN_ON_REAQUIRED_DEBT_BAL_BOY,
     +       OTHER_DEFERRED_CREDITS_BAL_BOY
      REAL*4, ALLOCATABLE :: ACCOUNTS_RECEIVABLE(:),
     +       ACCOUNTS_PAYABLE(:),
     +       COMMON_DIVIDEND_PAYMENT(:),
     +       FUEL_INVENTORY(:),
     +       DEFERRED_FUEL_BALANCE(:),
     +       OPENING_CASH_BALANCES(:),
     +       CLASS_MATERIALS_N_SUPPLIES(:),
     +       CLASS_GAS_STORAGE(:),
     +       CLASS_DEFERRED_PURCHASE_GAS(:),
     +       ACQUISITION_PREMIUM(:),
     +       LEVEL_SUMATION(:,:),
     +       BALANCE_SHEET_ROLLUPS(:,:,:)
      REAL*4 OPREV_IN_ACCTS_RECEIVABLE,
     +       ADDEN_ACCOUNTS_RECEIVABLE,
     +       EXP_IN_ACCTS_PAYABLE,
     +       ANNUAL_INVOICES_RECEIVED,
     +       ADDEN_ACCOUNTS_PAYABLE
      REAL*4 NEW_SUB_ACQUISITION_GOODWILL
      INTEGER*2 R_YR
      LOGICAL*1 TEST_ELIMINATIONS,SEPARATE_ELIMINATIONS
      LOGICAL*1 RETURN_CL_INTRA_EXPENSES,
     +  SUBS_ACTIVE,REPORT_HEADER_ACTIVE/.FALSE./,
     +  THIS_IS_REPORTING_CLASS,SUBS_ACTIVE_FOR_REPORTING
      CHARACTER*30 R_CLASS_NAME
      INTEGER*2 R_MAX_CLASS_NUM,R_CLASS
C     REAL*4 R_VARIABLE_VALUE(0:*)

C SRP STUFF

C INTERVAL VARIABLES

      LOGICAL*4 WRITE_THE_RESULTS
      LOGICAL*1 ASSET_REPORTS_ACTIVE,ASSET_CLASS_REPORTS,
     +  ST_JOE,WRITE_MONTHLY_INFOR
      INTEGER*2 ITER,MAX_ITER,ASSET_YR,CLASS_COUNTER,
     +  MIN_ITER
      REAL*4 FUNDS,CAPITAL_WITH_STD,R_TEMP,
     +       RETIREMENT_MEDICAL_FUND_RETURN,
     +       OCI_RETIREMENT_MEDICAL_FUND_RETURN,
     +       OCI_NUCL_FUND_RETURN,
     +       TOTAL_CAPITAL,PRIVIOUS_BOOK_VALUE
c     PARAMETER(MAX_ITER=20)
      INTEGER*2 CLASSES_FOUND,LOAD_MASTER_CLASS_LIST,I,READ_TAX_LOSSES
      INTEGER*2 NUM_OF_ACTIVE_CLASSES,INIT_CLASS,ASSET_CLASS_ID,
     +  NUMBER_OF_REPORTING_CLASSES
      INTEGER*4 IOS
      INTEGER*2, ALLOCATABLE :: TEMP_LIST(:),MASTER_CLASS_LIST(:),
     +  SBU_LINKED_LIST(:,:),
     +  SUBs_LINKED_TO_PARENT(:),TEMP_LIST2(:),
     +  TEMP_CLASS_LINKED_LEVEL(:),LINKED_TO(:),
     +  LINKED_TO_COMPANY(:)
      INTEGER*2 MAX_INIT_CLASS_NUM,COMPANY_ID
      INTEGER*2 R_LINKED_CLASS
      LOGICAL*1 R_CLASS_IS_LINKED_TO_PARENT
      INTEGER*4 VALUES_2_ZERO,VALUES_2_INIT
      LOGICAL*1 SALT_RIVER_PROJECT,IOU_UTILITY/.TRUE./,
     + INCOME_CONVERGED,
     +  FUNDS_BALANCE,CONVERGED,
     +  PARENT_CLASS,SUBSIDIARY_CLASS,
     +  REGULATED_CAPATIAL_STRUCTURE,
     +  RETAIN_POST_RETIREMENT_EARNINGS
      CHARACTER*1 UTILITY_TYPE,REVENUE_TAX_BASIS
      LOGICAL*1 VOID_LOGICAL,CLASS_EMISSIONS_CREDITS,
     +  REPORT_CLASS_EMISSIONS_INFO,ZERO_TOTAL_EMIS_VARS,
     +  RETURN_CL_INTRA_CLASS_REVENUES,CL_INTRA_EXISTS,
     +  RETURN_NOLS_INFO,RETURN_CONSOLIDATED_NOLS_INFO,
     +  RETURN_CURRENT_NOLS_INFO,
     +  WVPA_PROCESS_RATE_STRUCTURES,
     +  WVPA_RATES_TRACKER_OBJECT,
     +  WVPA_RATE_TRACKER_REPORT,
     +  WVPA_MEMBER_ACCRUED_REVS,
     +  WVPA_INITIALIZE_TRACKER_BALANCES,
     +  WVPA_SET_FUEL_TRACKER
      REAL*4 :: LEASOR_NF_AMORTIZATION
      REAL*4 NOT_AVAIL
      PARAMETER(NOT_AVAIL=-999999.)
      CHARACTER*1 DPS,DPR,CASH
      CHARACTER*1 DPS_CASH,DPR_CASH
      PARAMETER(DPS='S',DPR='R',CASH='C',DPS_CASH='H',DPR_CASH='P')

C RUN SWITCHES

      CHARACTER*1 ADD_2_INCOME_STATEMENT

C BALANCE SHEET AND RATE BASE VALUES

      REAL(kind=4) :: ASSETS_NEC,
     +       CUSTOMER_DEPOSITS,
     +       PRODUCTION_CHANGE_IN_RECEIVABLES

      REAL*4 NF_DEFERRED_DEBITS_RATE_BASE,
     +       NF_SL_TAX_DEPRECIATION_loc
      REAL*4,ALLOCATABLE :: CLASS_NUC_DECOM_TRUST_BAL(:),
     +       CLASS_NUC_DECOM_INC_EARNINGS(:),
     +       CLASS_NUC_DECOM_BAL_EARNINGS(:),
     +     DEFERRED_DEBITS_RATE_BASE(:,:),
     +     DEFERRED_CREDITS_IN_RATE_BASE(:,:),
     +     NUC_FUEL_RATE_BASE(:,:),
     +     CWIP_IN_RATE_BASE(:,:),
     +     NUC_DECOM_RATE_BASE(:,:),
     +     CIAC_RATE_BASE(:,:),
     +     PLANT_IN_SERVICE_RATE_BASE(:,:),
     +     ASSET_NEC_IN_RATE_BASE(:,:),
     +     CLASS_ADDENDUM_2_RATE_BASE(:),
     +     POST_RETIREMENT_MEDICAL_FUND(:),
     +     POST_RETIREMENT_MED_PAYABLE(:),
     +     NUC_DECOM_FUND_LIABILITY(:),
     +     LONG_TERM_INVESTMENTS(:),
     +     CAPITIALIZED_LEASES_RATE_BASE(:,:),
     +     DEBT_FILE_INVESTMENTS(:),
     +     NOTES_RECEIVABLE(:),
     +     GRE_OTH_PROP_TAXES(:),
     +     NOTES_PAYABLE(:),
     +     OTHER_DEFERRED_CREDITS_BAL(:,:),
     +     REGULATORY_DEFERRED_CREDITS_BAL(:,:),
     +     GAIN_ON_REAQUIRED_DEBT_BAL(:,:)
      REAL*4, ALLOCATABLE :: CLASS_GPV(:,:),
     +     NET_UTILITY_PLANT(:,:),
     +     CLASS_CUMULATIVE_DEPRECIATION(:,:),
     +     RATE_BASE_loc(:,:),
     +     CLASS_CWIP(:,:),
     +     CLASS_NET_NF_VALUE(:,:),
     +     CUMULATIVE_NUCLEAR_BURN(:),
     +     NET_NUCLEAR_FUEL_ADJ(:),
     +     CUM_RATE_BASE_NUCLEAR_BURN(:),
     +     CLASS_REVENUES(:),
     +     CUSTOMER_DEPOSITS_BAL(:,:),
     +     CIAC_BALANCE(:,:),
     +     CUMULATIVE_BOOK_DEP_ADJUSTMENTS(:),
     +     CUMULATIVE_GPV_ADJUSTMENTS(:),
     +     AI_CLASS_CWIP(:),
     +     CUMULATIVE_CLASS_OTH_LIAB_SALE_ASSETS(:)

      REAL*4, ALLOCATABLE :: LINEC(:,:),COMMON_STOCK(:,:),
     +     COMMON_SHARES(:,:),PREFERRED_STOCK(:,:),LONG_TERM_DEBT(:,:),
     +      PREFERRED_STOCK_ADDENDUM(:),
     +       LONG_TERM_DEBT_ADDENDUM(:),
     +       WEIGHTED_CLASS_PS_COST(:),
     +       WEIGHTED_CLASS_LTD_COST(:)

C RATIOS AND PERFORMANCE MEASURES

      REAL*4 ::
     +     RETURN_MEASURE,
     +     TOTAL_WEIGHTED_COST,TOTAL_WIEGHTED_CAPITAL

C ADJUSTMENTS

      REAL*4 INTRA_COMPANY_REVENUE

C INCOME STATEMENT VARIABLES

      REAL*4 CASH_4_INVESTMENTS
      REAL*4 BTL_TAXABLE_INCOME,
     +       PARENT_TAXES_PAID,
     +       PARENT_MARKET_TO_BOOK,
     +       PARENT_AVERAGE_SHARES,
     +       PARENT_YEAR_END_SHARES,
     +       PARENT_STOCK_BOOK_VALUE,
     +       PARENT_STOCK_MARKET_PRICE,
     +       PARENT_DIVIDEND_PER_SHARE,
     +       PARENT_COMMON_STOCK_ISSUED,
     +       PARENT_AVERAGE_STOCK_PRICE,
     +       PARENT_SUBSIDIARY_INCOME,
     +       PARENT_AVERAGE_EQUITY
      REAL*4 PARENT_EQUITY_RATIO,
     +       PARENT_EQUITY_RATE,
     +       PARENT_EQUITY_RISK_ADJ,
     +       PARENT_PS_RATE,
     +       PARENT_PS_RATIO,
     +       PARENT_LTD_RATE,
     +       PARENT_STD_RATE,
     +       PARENT_STATE_TAX_RATE
      REAL*4 CLASS_INC_EMIS_EXPENSE,CLASS_INC_EMIS_REVENUE,
     +       ATL_EMISSION_CREDIT_EXPENSE,ATL_EMISSION_CREDIT_REVENUE,
     +       WVPA_EMISSIONS_EXPENSE
      REAL*4
     +     CLASS_BORROWED_AFUDC_RATE,AFUDC_BORROWED_RATE,
     +     REVENUES_OTHER,
     +     REVS_OPNG_loc,
     +     OTHER_AND_ENVIRONMENTAL_TAXES,
     +     CONSOLIDATED_STATE_TAX_RATE,
     +     TAXES_PAID_BY_PARENT,
     +     change_in_funds_b4_financing,


C TAX ITEMS

     +     CLASS_NON_VARIABLE_EXPENSE,
     +     CLASS_REVENUE_TAX_REVENUES,
     +     construction_tax_expense,
     +     LOCAL_TAX_RATE,
     +     ADJ_2_LOCAL_TAXES,
     +     NORMALIZATION_TAX_RATE,
     +     TOTAL_TAX_EXPENSE,
     +     TOTAL_NON_CASH_EXPENSES,
     +     AI_AFUDC_ON_CASH,
     +     CONSOLIDATED_INCOME_TAXES,
     +     CONSOLIDATED_FEDERAL_TAXES,
     +     CONSOLD_FED_TAXES_B4_CREDITS,
     +     CONSOLIDATED_FED_TAXABLE_INCOME,
     +     CONSOLD_FED_INCOME_AFTER_NOLS,
     +     CONSOLIDATED_STATE_TAXES,
     +     SUB_FEDERAL_TAXABLE_INCOME,
     +     CONSOLIDATED_TAX_ADJUSTMENT,
     +     CONSOLIDATED_TAX_LIB_ADJUSTMENT,
     +     ATL_CONSOLIDATED_FEDERAL_TAXES,
     +     BTL_CONSOLIDATED_FEDERAL_TAXES,
     +     PARENT_ATL_FEDERAL_TAX,
     +     PARENT_BTL_FEDERAL_TAX
      REAL*4 CONSOLIDATED_LOCAL_TAX_ADJ,
     +     CONSOLIDATED_STATE_TAX_ADJ,
     +     CONSOLIDATED_FED_TAX_ADJ,
     +     INTRA_TAXES_PAYABLE,
     +     SUB_NON_INCOME_TAX_ACCRUALS
      REAL*4
     +     ADJUST_4_FED_NOLS,ADJUST_4_STATE_NOLS,
     +     CLOSE_CLASS_STATE_TAX_INFO,
     +     CLOSE_CLASS_FED_TAX_INFO,
     +     ADJUST_CONSOLD_4_FED_CREDIT
      REAL*4 VOID_REAL,CLOSE_FED_CREDIT,ADJUST_4_FED_CREDIT,
     +       CLOSE_STATE_CREDIT
      REAL*4 ADJUST_4_FED_CONSOLIDATED_NOLS,CLOSE_CONSOLIDATED_TAX_INFO
      REAL*4
     +     EXTRAORDINARY_EXPENSE,
     +     YEAR_END_UNUSED_CREDIT_BAL
      REAL*4 FEDERAL_INCOME_TAX_RATE,STORE_FEDERAL_TAX_RATE
      INTEGER*2 INCOME_UNIT/0/,ASSET_CLASS_INCOME_HEADER,
     +  LINKED_CLASS_ID,IREC
      INTEGER*4 START_RECORD/3/,OUTPUT_RCD_loc,
     +  BASE_OUTPUT_RECORD
      CHARACTER*30 ASSET_CLASS_NAME*38,STR_CLASS_NUM*4,
     +     CLASS_TYPE(:)*1,ASSET_CLASS_TYPE*1,
     +     CURRENCY_DENOMINATION(:)*1,
     +     FED_TAX_EXEMPT(:)*20,INT_ASSET_CLASS_NAME,
     +     PARENT_CLASS_NAME,
     +     ASSET_CLASS_TYPE_STR*15
      LOGICAL*1 REPORT_CLASS(:),CONSOLIDATING_CLASS(:),
     +  REPORT_ZEROS_4_CLASS(:)
      INTEGER*2 LINKED_2_CLASS(:)
      ALLOCATABLE :: CLASS_TYPE,LINKED_2_CLASS,
     +       CURRENCY_DENOMINATION,
     +       REPORT_CLASS,
     +       FED_TAX_EXEMPT,
     +       CONSOLIDATING_CLASS,
     +       REPORT_ZEROS_4_CLASS
      INTEGER*2 NUM_OF_SUBSIDIARIES,NUM_OF_BUSINESS_UNITS
      INTEGER*2 SUBS_LINKED_2_PARENT,NUM_OF_REGULATED_UNITS,
     +  CLASSES_IN_LIST,MAX_LINKED_LEVEL
      LOGICAL*1 ALL_CLASS_BUSINESS_UNITS,ALL_CLASS_SUBSIDIARIES,
     +  MIX_OF_SUBS_AND_BUSINESS_UNITS
      LOGICAL*1 REAL_PROPERTY_TAX_VALUES
      REAL*4 GPV_WITH_CWIP,
     +     GPV_NO_CWIP,
     +     NPV_WITH_CWIP,
     +     NPV_NO_CWIP,ZERO/0./

C DEBT SECTION

      INTEGER*2 NUM_OF_DB_CLASSES/0/,MAX_DB_CLASS_NUM/0/
      LOGICAL*1 DB_CLASS_EXISTS

      REAL*4 DEBT_FILE_PREFERRED_DIVIDENDS
      REAL*4 R_PREFERRED_STOCK_ISSUED,R_LONG_TERM_DEBT_ISSUED,
     +     R_INVESTMENT_IN_AFILLIATES,
     +     R_LOANS_TO_AFILLIATES,
     +     OTHER_INCOME_AFILLIATES,
     +     INVESTMENT_IN_AFILLIATES,
     +     INTEREST_INCOME_AFILLIATES,
     +     LOANS_TO_AFILLIATES,
     +     PS_PREM_BAL,
     +     PS_PREM_AMORT,
     +     LTD_PREM_BAL,
     +     LTD_PREM_AMORT,
     +     PS_ISSUING_BAL,
     +     PS_ISSUING_AMORT,
     +     LTD_ISSUING_BAL,
     +     LTD_ISSUING_AMORT,
     +     LTD_PS_ISSUE_TAX_EXPENSE,
     +     LTD_PS_DEFERRED_TAX_BASIS,
     +     LTD_NEW_PREM_ADJUSTMENT,
     +     NET_DEFERRED_CASH_ADJ
      REAL*4, ALLOCATABLE :: ANNINT(:,:),LTDINT(:,:),LTDRET(:,:),
     +     PSDIV(:,:),
     +     PSRED(:,:),RATE_REVENUE(:,:),
     +     ANN_PS_DIV(:,:),
     +     ANN_LTD_INT(:,:),
     +     NET_DEFERRED_EXPENSE_CASH(:,:),
     +     ANNUAL_DEFERRED_CASH_AMORT(:,:)
C      REAL*4 NET_DEFERRED_CASH_VALUE

C DEBIT SECTION

      REAL*4 ATL_DEF_TAXES
      INTEGER*2 NUM_OF_DD_CLASSES/0/,MAX_DD_CLASS_NUM/0/
      LOGICAL*1 DD_CLASS_EXISTS
      REAL*4 DD_BALANCE,
     +       DD_CUM_AMORTIZATION,
     +       DD_CUM_RB_AMORTIZATION,
     +       BTL_AMORTIZATION_EXP,
     +       BTL_DEFERRED_TAXES_CR,
     +       TOTAL_DEFERRED_TAXES_DR
      REAL*4, ALLOCATABLE :: NET_DD_BALANCE(:,:),
     +       OTHER_DD_BALANCE(:,:),
     +       GOODWILL(:,:),
     +       UNAMORTIZED_INTEREST_BALANCE(:,:),
     +       UNAMORTIZED_ISSUE_EXP_BALANCE(:,:),
     +       CUM_AMORT_ADJUSTMENT(:),
     +       CUM_DD_RATEBASE_ADJUST(:),
     +       CUM_GOODWILL_AT(:),
     +       CUM_REG_ASSET_ADJ_AT(:),
     +       CUM_FASB133_ADJ_AT(:),
     +       CUM_FASB109_ADJ_AT(:),
     +       CUM_DD_UNAMORT_INTR_ADJ_AT(:),
     +       CUM_DD_UNAMORT_ISSUE_EXP_ADJ_AT(:),
     +       DEBT_FILE_UNAMORT_INTR_BAL(:),
     +       DEBT_FILE_UNAMORT_ISS_EXP_BAL(:),
     +       DEBIT_FILE_UNAMORT_ISS_EXP_BAL(:),
     +       NUCLEAR_DECOM_FUND_BAL_ADJ_AT(:),
     +       CAP_LEASES_BAL_ADJ_AT(:),
     +       ASSETS_NEC_BAL_ADJ_AT(:),
     +       PREFERRED_STOCK_BAL_ADJ_AT(:),
     +       LTD_BAL_ADJ_AT(:),
     +       STD_BAL_ADJ_AT(:),
     +       NUC_DECOM_LIAB_BAL_ADJ_AT(:),
     +       LIABS_NEC_BAL_ADJ_AT(:),
     +       OTHER_INVESTMENT_BAL_ADJ_AT(:),
     +       NOTES_RECEIVABLE_BAL_ADJ_AT(:),
     +       POST_RETIRE_MEDICAL_BAL_ADJ_AT(:),
     +       DEFERRED_REVENUES_BAL_ADJ_AT(:),
     +       DEFERRED_FUEL_BAL_ADJ_AT(:),
     +       DEFERRED_PURCH_GAS_BAL_ADJ_AT(:),
     +       LT_INVEST_BAL_ADJ_AT(:),
     +       ST_INVEST_BAL_ADJ_AT(:),
     +       FUEL_INVENTORY_BAL_ADJ_AT(:),
     +       GAS_IN_STORAGE_BAL_ADJ_AT(:),
     +       MATRIAL_SUPPLY_BAL_ADJ_AT(:),
     +       ACCOUNTS_RECV_BAL_ADJ_AT(:),
     +       UNBILLED_REV_BAL_ADJ_AT(:),
     +       TAXES_RECEIVABLE_BAL_ADJ_AT(:),
     +       CURRENT_LT_DEBT_BAL_ADJ_AT(:),
     +       NOTES_PAYABLE_BAL_ADJ_AT(:),
     +       CUSTOMER_DEPOSIT_BAL_ADJ_AT(:),
     +       CICA_BAL_ADJ_AT(:),
     +       POST_RETIRE_PAYABLE_BAL_ADJ_AT(:),
     +       ACCRUED_PENSION_BAL_ADJ_AT(:),
     +       DEFERRED_GAINS_BAL_ADJ_AT(:),
     +       storm_RESERVE_BAL_ADJ_AT(:),
     +       ACCOUNTS_PAYABLE_BAL_ADJ_AT(:)

C EXISTING ASSETS SECTION

      INTEGER*2 NUM_OF_EA_CLASSES/0/,MAX_EA_CLASS_NUM/0/
      LOGICAL*1 EA_CLASS_EXISTS
      REAL*4 EA_TAX_BOOK_DEP,
     +     DEFERRED_TAX_BASIS,
     +     EA_PROPERTY_TAX_GPV,
     +     EA_PROPERTY_TAX_NPV,
     +     EA_DEFERRED_TAXES

C FUTURE ASSETS SECTION

      INTEGER*2 NUM_OF_FA_CLASSES/0/,MAX_FA_CLASS_NUM/0/
      LOGICAL*1 FA_CLASS_EXISTS,MODEL_ASSET_CLASS_EXISTS
      REAL*4 FA_CUMULATIVE_BOOK_DEP
      REAL*4 :: FA_CAPITIALIZED,
     +     FA_AFDC_CASH,FA_AFDC_CAPITIALIZED,FA_ITC_CREDIT,
     +     FA_CURRENT_TAX_EXPENSES,
     +     FA_PROPERTY_TAX_GPV,FA_PROPERTY_TAX_NPV,
     +     FA_EXTRAORDINARY_EXPENSE,
     +     FA_NET_DEFERRED_DEBIT_BAL,NET_DD_WRITE_OFF_BALANCE,
     +     FA_SL_TAX_DEP, ! TBKDPT(I)
     + ! TBKDPA(I) write-off adjustment to cumulative book depreciaton
     +     FA_WO_ADJUSTMENT_2_CUM_BOOK_DEP,
     +  ! TAFDPA(I) write_off adj to cumulative afdc dep.
     +     FA_WO_ADJUSTMENT_2_CUM_AFDC_DEP,
     +     FA_AFDC_BORROWED, ! TAFDCB(I)
     +     FA_WO_ADJUSTMENT_2_CUM_AFDC, ! TAFCAJ(I)
     +     FA_WO_ADJUSTMENT_2_CUM_AFEXP,  ! TAFEXP(I)
     +     FA_WO_ADJUSTMENT_2_CUM_DEF_TAX, ! TWODFT(I)
     +     FA_WO_ADJUSTMENT_2_CUM_AFDCF  ! TAFDCF(I)

C NUCLEAR FUEL SECTION

      INTEGER*2 NUM_OF_NF_CLASSES/0/,MAX_NF_CLASS_NUM/0/
      LOGICAL*1 NF_CLASS_EXISTS
      REAL*4 ::
     +     NF_AFUDC_CAPITIALIZED,
     +     NF_CURRENT_TAX_EXPENSE,
     +     NF_DEFERRED_DEBIT_BALANCE,
     +     NF_EXTRAORDINARY_EXPENSE,
     +     NAFEXP,NF_CLASS_ADJAFC,NWODFT,NAFDCB,NAFDCD,
     +     LEASOR_NF_SL_TAX_DEP,
     +     LEASOR_NF_TAX_DEP,
     +     LEASOR_DEFERRED_TAX_BASIS,
     +     MONTHLY_NF_DEFERRED_TAXES_CR

C EXPENSE SECTION

      INTEGER*2 NUM_OF_EX_CLASSES/0/,MAX_EX_CLASS_NUM/0/
      LOGICAL*1 EX_CLASS_EXISTS
      REAL*4
     +     EXP_FUEL_EXPENSE,
     +     EXP_PURCHASE_POWER_EXPENSE,
     +     EXP_FILE_VARIABLE_EXPENSE,
     +     EXP_FILE_FIXED_EXPENSE,
     +     OWNED_NF_BURN_EXP_FILE,
     +     OWNED_NF_BURN_SALES_FILE,
     +     OWNED_NF_BURN_CL_RESOURCES,
     +     LEASED_NF_BURN_EXP_FILE,
     +     LEASED_NF_BURN_SALES_FILE,
     +     LEASED_NF_BURN_CL_RESOURCES,
     +     DOE_R300_DISPOSAL_COST,
     +     BTL_NUC_FUEL_DECOM_LIABILITY,
     +     EXPENSE_COLLECT_VIA_ADJ_CLAUSE,
     +     EXPENSE_COLLECT_VIA_BASE_RATES,
     +     NF_BURN_IN_RATEBASE,
     +     EXPENSE_NOT_COLLECTED_IN_RATES,
     +     EXP_SERVICE_TRANSACTIONS,
     +     CLASS_EXP_EMIS_EXPENSE
      REAL*4 ::
     +     BASE_RATES_REVENUES,
     +     SECONDARY_SALES_NOT_IN_RATES
      REAL*4 MARKET_BASE_REVENUES,
     +     CLASS_FORECAST_REVENUES

C DSM SECTION

      INTEGER*2 NUM_OF_DSM_CLASSES/0/,MAX_DSM_CLASS_NUM/0/
      LOGICAL*1 DSM_ASSET_CLASS_EXISTS
      LOGICAL*1 DSM_EXPENSE_CLASS_EXISTS
      REAL*4 DSM_ADJ_CLAUSE_COLLECTIONS,
     +     DSM_CAPITIAL,
     +     DSM_CAPACITY,
     +     DSM_ENERGY,
     +     DSM_PARTICIPANT_COSTS,
     +     DSM_UTIL_NON_ELEC_COSTS,
     +     DSM_THIRD_PARTY_COSTS,
     +     DSM_OTH_PARTICIPANT_COSTS,
     +     DSM_CUM_BOOK_DEP,
     +     DSM_GPV_PROP_TAX_loc,
     +     DSM_SL_TAX_DEP_loc

      real (kind=4) :: DSM_TAX_PREF_DEP_ord=0
      real (kind=4) :: RB_DSM_AMRT_ord
      real (kind=4) :: RB_DSM_DFRD_TAX_BASIS
      real (kind=4) :: DSM_REGLTD_BOOK_DEP
      real (kind=4) :: DSM_REGLTD_TAX_DEP
      real (kind=4) :: DSM_RGLTD_DEFERRED_DEBIT
C ENERGY LIMITED EXPENSE IITEMS
      real (kind=4) :: DSM_NPV_PROP_TAX_loc
      INTEGER*2 NUM_OF_ENRG_CLASSES,MAX_ENRG_CLASS_NUM,
     +  RETURN_NUM_OF_HYDRO_CLASSES,RETURN_HYDRO_CLASS_POINTER
      LOGICAL*1 ENRG_CLASS_EXISTS

C CAPACITY LIMITED ADDITIONS

      INTEGER*2 MAX_CL_CLASS_NUM/0/,RETURN_CAP_LIMITED_POINTER,
     +  NUM_OF_CL_CLASSES,RETURN_NUM_CAP_LIMITED_CLASSES
      LOGICAL*1 CL_CLASS_EXISTS
      INTEGER*2 RETURN_CL_ASSET_CLASS_EXPENSES,VOID_INT2,
     +  RETURN_NUC_CL_ASSET_CLASS_EXPENSES,
     +  RETURN_CONTRACT_CLASS_INFO,
     +  RETURN_ANNUL_CUSTOMER_VARIABLES
      INTEGER*2 RETURN_ANNUL_DERIV_VARIABLES
      LOGICAL*1 RETURN_CL_ASSET_CLASS_PROD,
     +  RETURN_FUEL_DERIV_VARIABLES

C NOTE: 1 == PRODUCTION FROM RESOURCE TO MEET NATIVE LOAD
C       2 == DEFINED PURCHASE TO MEET NATIVE LOAD
C       3 == ECONOMY PURCHASE TO MEET NATIVE LOAD
C       4 == ECONOMY SALES WHICH INCREASE LOAD

      REAL*4 CL_ANN_CLASS_CAPACITY(4),
     +       CL_ANN_CLASS_ENERGY(4)

C REVENUES FROM CLASS FORECAST FILES

      INTEGER*2 MAX_RATE_REVENUE_CLASS_NUM/0/,
     +  NUM_OF_RATE_REVENUE_CLASSES/0/
      LOGICAL*1 RATE_REVENUE_CLASS_EXISTS
      REAL*4 RATE_CLASS_ENRG_REVENUES,
     +     RATE_CLASS_DEMAND_REVENUES,
     +     RATE_CLASS_CUSTOMER_REVENUES,
     +     RATE_CLASS_CUSTOMERS,
     +     RATE_CLASS_DEMAND,
     +     RATE_CLASS_ENERGY

C ASSET ADDITIONS SECTION

      INTEGER*2 NUM_OF_AA_CLASSES/0/,MAX_AA_CLASS_NUM/0/
      LOGICAL*1 AA_CLASS_EXISTS

      INTEGER*2 MAX_CLASS_NUM,YR,CLASS,CLASS_POS,R_YEAR,R_CLASS_POS

C INITIALIZATION FILE

      INTEGER*2 MAX_INITIALIZATION_CLASS_NUM,NUM_OF_INITIZATION_CLASSES
      REAL*4 REGULATORY_ASSETS

C PARAMETER  VARIABLES

      INTEGER*2 DELETE
      REAL*4 NucDecom_Discount_Rate
      REAL*4, ALLOCATABLE :: INIT_PLANNING_PEAK(:,:),
     +     ABANDS(:,:),AFDC1C(:,:),AFDC2C(:,:),
     +     AFDCDP(:,:),BKDEPC(:,:),
     +     BOOK_VALUE_STOCK(:,:),TOTAL_CAPITIAL(:,:),CEPCUM(:,:),
     +     COMMON_EQUITY(:,:),STOCK_PRICE_YEAR_END(:,:),
     +     DDAMTC(:,:),DEPCUM(:,:),DEF_ITC_BALANCE(:,:),
     +     NAFC1C(:,:),NAFC2C(:,:),NF_IN_PROCESS(:,:),
     +     NFIS(:,:),NNFV(:,:),NPV(:,:),OTHER_ASSETS(:,:),PLANT(:,:),
     +     RBCWIP(:,:),RBDD(:,:),RBNF(:,:),RB_NF_IN_PROCESS(:,:),
     +     REARNC(:,:),SALES(:,:),SHORT_TERM_DEBT(:,:),
     +     INTEREST_ON_SHORT_TERM_DEBT(:,:),
     +     DEF_TAX_CR_BALANCE(:,:),
     +     WCCUM(:,:),OPERATING_REVENUES(:,:),
     +     STD_RATE(:,:),LIQUID_INVESTMENTS(:,:),
     +     NUC_DECOM_FUND_BAL(:,:),CUMTXNORM(:,:),BASE_REVENUE(:,:),
     +     OTH_REVENUE_loc(:,:),ADJ_CLAUSE_REVENUE(:,:),
     +     OTHER_LT_LIABILITY(:,:),
     +     CUM_DEF_REVENUES(:,:),NPV_RATEBASE(:,:),
     +     CUM_ITC_DEF_RATEBASE(:,:),RBCWIP_AFDC_METH2(:,:),
     +     CUM_DEF_TAX_RATEBASE(:,:),RB_REG_DD(:,:),
     +     DEFERRED_EXPENSE_BALANCE(:,:),AMTBKPREF(:,:),
     +     AMTNEGBKPREF(:,:),AVAILCREDIT(:,:),
     +     BY_ADJUSTMENT_2_ECONOMIC_ASSETS(:),
     +     WEIGHTED_COST_OF_CAPITAL_BY(:),
     +     PARENT_SUB_CIAC_BALANCE(:),
     + ! THIS IS THE BALANCE CAUSED BY ACTIVITY ONLY AT THE CLASS LEVEL
     +     CIAC_CLASS_BALANCE(:),
     +     INVESTMENT_IN_SUBSIDIARIES(:,:),
     +     CAPITIALZIED_LEASES(:,:),
     +     OPERATING_ASSETS_YEAR_END(:),
     +     DEFERRED_PURCHASE_POWER(:,:),
     +     PENSION_LIABILITY(:,:),
     +     DEFERRED_GAIN_FROM_SALES(:,:),
     +     STORM_RESERVE_BALANCE(:,:),
     +     ExecBenefitsBalance(:,:),
     +     IncentiveCompBalance(:,:),
     +     ACCRUED_VACATION_PAY_BALANCE(:,:),
     +     RB_INCLUDE_DEFERRED_TAX_DR(:,:),
     +     RB_INCLUDE_DEFERRED_REVENUES(:,:),
     +     RB_EXCLUDED_PENSION_LIABILITY(:,:),
     +     RB_EXCLUDED_DEFERRED_ASSET_GAIN(:,:),
     +     RB_EXCLUDED_STORM_RESERVE(:,:),
     +     RB_EXCLUDE_ACCRUED_VACATION_PAY(:,:),
     +     FASB143_NET_ASSET_VALUE(:,:),
     +     FASB143_LT_LIABILITY_VALUE(:,:),
     +     PROPERTY_TAX_BASIS(:,:),  ! 91&92 BASE YEAR
     +     FASB_87_INTANGIBLE_ASSETS(:),
     +     OTHER_COMPREHENSIVE_INCOME_BALANCE(:),   ! 103
     +     OPERATING_REVENUE_TAX_LAGGED_BASIS(:)    ! 104
      INTEGER*2, ALLOCATABLE :: STD_INTEREST_VECTOR(:),
     +  LTD_INTEREST_VECTOR(:),
     +  PS_DIVIDENDS_VECTOR(:),
     +  STI_INTEREST_VECTOR(:),
     +  LTI_INTEREST_VECTOR(:),
     +  CUSTOMER_DEPOSIT_INTREST_VECTOR(:),
     +  DECOM_FUND_INTEREST_VECTOR(:),
     +  RETIREMENT_FUND_INTEREST_VECTOR(:),
     +  CURRENCY_CONVERSION_VECTOR(:)
      REAL FASB_87_DEFERRED_TAX_ADJ_DR

C AUTO EXCLUSION VALUES

      REAL*4 EXCLUDE_SUB_INVESTMENT,
     +     EXCLUDE_SUB_COMMON_EQUITY,
     +     EXCLUDE_SUB_RETAINED_EARNINGS,
     +     EXCLUDE_SUB_OCI_EARNINGS,
     +     EXCLUDE_SUB_TAX_DEFERRALS_DR,
     +     TOTAL_SUB_COMMON_EQUITY,
     +     TOTAL_SUB_RETAINED_EARNINGS,
     +     TOTAL_SUB_OCI_EARNINGS,
     +     TOTAL_SUB_INVESTMENT,
     +     FIRST_LEVEL_SUB_COMMON_EQUITY,
     +     FIRST_LEVEL_SUB_EARNINGS,
     +     FIRST_LEVEL_SUB_INVESTMENT
      REAL*4 EXCLUDE_TAX_DEFERRALS_DR,
     +     EXCLUDE_STATE_NOL_TAX_DEF_DR,
     +     EXCLUDE_FED_NOL_TAX_DEF_DR,
     +     EXCLUDE_TAX_DEFERRALS_CR,
     +     EXCLUDE_ITC,
     +     EXCLUDE_BTL_TAXES,
     +     EXCLUDE_SUB_INCOME,
     +     EXCLUDE_COMMON_DIVIDENDS,
     +     EXCLUDE_STATE_TAXES,
     +     EXCLUDE_FED_TAXES,
     +     SBU_EXCLUDE_FED_TAXES,
     +     SBU_ATL_EXCLUDE_FED_TAXES,
     +       SUB_TAXABLE_INCOME,
     +       SUB_FED_TAX_PAYMENTS_2_PARENT,
     +       SUB_STATE_TAX_PAYMENTS_2_PARENT,
     +       SUB_FED_TAX_LIABILITY,
     +       SUB_STATE_TAX_LIABILITY,
     +       SUB_TOTAL_BTL_FEDERAL_TAXES,
     +       SUB_TOTAL_ATL_FEDERAL_TAXES,
     +       SUB_TOTAL_BTL_INTRA_FED_TAXES,
     +       BTL_INTRA_FEDERAL_TAXES,
     +       SUB_TOTAL_BTL_INTRA_STATE_TAXES,
     +       BTL_INTRA_STATE_TAXES
      REAL*4, ALLOCATABLE :: SUB_SBU_ACE_TAX_DEPRECIATION(:),
     +       SUB_SBU_TAX_PRE_DEPRECIATION(:),
     +       SUB_EQUITY_NEEDS_FROM_PARENT(:),
     +       SBU_CHANGE_DECOMMISSIONING_LIAB(:),
     +       SUB_INVESTMENT_IN_SUBS(:),
     +       PARENT_ACQUISITION_OF_SUB_COST(:),
     +       PARENT_ACQUISITION_GOODWILL(:),
     +       SUB_DIVIDEND_PAYMENTS_2_PARENT(:),
     +       SUB_EARNINGS_2_COMMON(:),
     +       SUB_EARNINGS_2_EXCLUDE(:),
     +       SUB_TOTAL_SUB_INCOME(:),
     +       SBU_DEFERRED_DEBIT_RATEBASE(:),
     +       SBU_DEFERRED_CREDIT_RATEBASE(:),
     +       SBU_ATL_TAX_EXPENSE(:),
     +       SBU_BTL_TAX_EXPENSE(:)

      REAL*4 CONSLD_YEAR_END_OP_ASSETS

C A&I VARIABLES

      REAL*4 AI_ANNUAL_CLASS_DEP,
     +       AI_ANNUAL_CLASS_TAX_DEP,
     +       AI_ANNUAL_CLASS_DEFERRED_TAX,
     +       AI_ANNUAL_CLASS_PREF_ITEMS,
     +       AI_CLASS_CASH,
     +       AI_CLASS_EXPENSE,
     +       AI_LAGGED_GPV
      REAL*4 R_AI_LAGGED_GPV,
     +       R_AI_CLASS_CASH,
     +       R_AI_ANNUAL_CLASS_DEP,
     +       R_AI_AFUDC_ON_CASH,
     +       R_AI_CLASS_EXPENSE

C ST JOE IRP STUFF

      REAL*4 ST_JOE_BASE_ELECTRIC_REVENEUS,R_BASE_ELECTRIC_REVENEUS
      INTEGER*2 ST_JOE_ELECTRIC_CLASS,EMC_PA_CLASS
      PARAMETER (ST_JOE_ELECTRIC_CLASS=0)

C DUKE STUFF

      LOGICAL*1 DUKE,DOE_FEES_IN_NUC_FUEL_COST,DUKE_IS_ACTIVE,
     +  CATAWBA_INFO,CPL_IS_ACTIVE,CPL_ACTIVE,
     +  EMPIRE_IS_ACTIVE,EMPIRE,CCN,MPS
      LOGICAL*1 UTILITY_IS_IP,IP_IS_ACTIVE
      LOGICAL*1 AMEREN,AMEREN_IS_ACTIVE/.FALSE./,
     +  PACIFICORP,PACIFICORP_IS_ACTIVE/.FALSE./,
     +  FirstEnergy,FirstEnergy_Is_Active/.FALSE./,
     +  ODEC,ODEC_NA3_ACTIVE
      REAL*4 TOTAL_AMEREN_MARKET_REVENUES,
     +       TOTAL_AMEREN_FUEL_EXPENSE,
     +       TOTAL_AMEREN_VARIABLE_EXPENSE
      REAL*4 LEVEL_MARKET_REVENUES,
     +       LEVEL_FUEL_EXPENSE,
     +       LEVEL_VARIABLE_EXPENSE
      INTEGER*2 RETURN_AMEREN_CL_CLASS_EXPENSES

      REAL*4 CATAWBA_REVENUES,
     +       CATAWBA_EXPENSES,
     +       catawba_deferred_debits,
     +       CATAWBA_DEFERRED_TAXES_CR

      real (kind=4) :: CTWBA_DEFER_TAXES_BAL_CR_loc
      REAL*4 CPL_ENERGY_2_PA,
     +       CPL_ENERGY_FROM_PA
      REAL*4 CATAWBA_ADJUSTMENT,JOINT_OWNERS_COSTS,
     +       CATAWBA_BURN_ADJUSTMENT
      REAL*4 R_NUC_FUEL_TAX_EXPENSE,
     +       R_NF_DEFERRED_TAX_BASIS,
     +       R_INC_NUCLEAR_FUEL_EXPENSE,
     +       R_NF_OWNED,
     +       R_NF_CASH_EXPENSE,
     +       R_NF_NON_CASH_EXPENSE,
     +       R_NF_SL_DEF_TAX_DEP
      LOGICAL*1 EXCLUDE_SBU_REVENUE_TAX,
     +  EXCLUDE_SBU_OTHER_TAXES,
     +  EXCLUDE_SBU_PROPERTY_TAX,
     +  EXCLUDE_SBU_STATE_INCOME_TAX,
     +  EXCLUDE_SBU_CAPITAL_TAX
      REAL*4 AMOUNT_OF_TAXED_CAPITAL
      REAL*4, ALLOCATABLE :: EXCLUDED_REVENUE_TAX_BASIS(:),
     +       EXCLUDED_REVENUE_TAX_BASIS_A(:),
     +       EXCLUDED_REVENUE_TAX_BASIS_B(:),
     +       EXCLUDED_REVENUE_TAX(:),
     +       EXCLUDED_OTHER_TAXES_REV(:),
     +       EXCLUDED_OTHER_TAXES_EXP(:),
     +       EXCLUDED_OTHER_TAXES(:),
     +       EXCLUDE_CAPITAL_TAXES_STATE(:),
     +       EXCLUDE_CAPITAL_TAXES_FED(:),
     +       EXCLUDE_CAPITAL_TAX_FED_BASIS(:),
     +       EXCLUDE_CAPITAL_TAX_STATE_BASIS(:),
     +       PROPERTY_VALUE_GPV_WITH_CWIP(:),
     +       PROPERTY_VALUE_GPV_NO_CWIP(:),
     +       PROPERTY_VALUE_NPV_WITH_CWIP(:),
     +       PROPERTY_VALUE_NPV_NO_CWIP(:),
     +       EXCLUDED_SBU_PROPERTY_TAX(:),
     +       NUC_FUEL_RATE_BASE_AT(:),
     +       CWIP_IN_RATE_BASE_AT(:)
      REAL*4 EMBEDDED_PARENT_LTD_COST,
     +       EMBEDDED_PARENT_PS_COST
      REAL*4 CONSOLIDATED_INCOME_TAXES_PAID,
     +       CONSOLIDATED_FEDERAL_TAXES_PAID,
     +       CONSOLIDATED_STATE_TAXES_PAID

C MISCELLANEOUS VARIABLES

      CHARACTER*1 COUNTRY,USA
      PARAMETER (USA='U')
      LOGICAL*1 COUNTRY_NOT_USA,CALCULATE_ENVIRONMENTAL_TAX
      INTEGER*2 ACTIVE_TAX_LOSS_CLASSES
      REAL*4 SBU_LTD_ELIM,SBU_STD_ELIM,SBU_PS_ELIM
      REAL*4 AMT_INCOME_AFTER_NOL,CONSOLIDATED_AMT_INCOME,
     +       ADJUST_4_AMT_NOLS
      REAL*4 PS_ROLLOVER,SBU_COMMON_STOCK_BOUGHT,
     +       LTD_ROLLOVER,PS_ROLLOVER_DIVIVEND,
     +       LTD_ROLLOVER_INTEREST,
     +       PS_ADDEM_DIVIDEND,
     +       LTD_ADDEM_INTEREST
      REAL*4 DIVIDEND_PS,INTEREST_LTD
      LOGICAL*1 LAST_GROUP_WAS_A_SUBSIDARY
      CHARACTER*1 SBU,SUBSIDIARY,PARENT,REGULATED_GROUP
      PARAMETER (SBU='B',SUBSIDIARY='S',PARENT='P',REGULATED_GROUP='R')
      REAL*4 LT_INVESTMENTS_EARNINGS,
     +       STI_CHANGE_IN_CASH
      REAL*4 EL_MARKET_REVENUES,
     +       EL_MARKET_PURCHASES
      REAL*4 CL_MARKET_REVENUES,
     +       CL_MARKET_PURCHASES,
     +       CL_VAR_MARKET_PURCHASES,
     +       CL_FIXED_MARKET_PURCHASES

C  ACCURRALS

      REAL*4 INTEREST_DIVIDENDS_ACCRUDED,
     +       NEW_FINANCING_ACCRUALS,
     +       COMMON_STOCK_DIV_ACCRUALS
      REAL*4 EOQ_SHARES,
     +       QRT_DIVIDEND_PER_SHARE(4),
     +       QRT_DIVIDEND_ADDENDUM(4)
      REAL*4 PURCHASE_POWER_IN_DEFERRED_FUEL,
     +       POWER_AGENCY_OWNED_COST,
     +       CPL_FUEL_REVENUES

      CHARACTER*3 ASSET_CLASS_TYPE_NAME
      REAL*4 AGC_SUBSIDIARY_INCOME,
     +       AGC_EARNINGS_AVAILABLE_2_COMMON,
     +       AGC_COMMON_DIVIDENDS,
     +       AGC_COMMON_STOCK_ISSUED
      LOGICAL*1 APS_ACTIVE,APS_DQE,ACCURAL_ACCOUNTING_ACTIVE
      REAL*4 LTD_ISSUE_YR_INTEREST_PAYMENT,
     +       LTD_ISSUE_YR_INTEREST_BOOKED,
     +       PS_ISSUE_YR_DIVIDEND_BOOKED,
     +       PS_ISSUE_YR_DIVIDEND_PAYMENT
      REAL*4 PARENT_LEVEL_CS_ACQUISIONS,
     +       PARENT_LEVEL_RE_ACQUISIONS
      LOGICAL*1 PA_CONTRACT_ACITVE
      REAL*4 NEW_SUB_RETAINED_EARNINGS,
     +       NEW_SUB_COMMON_STOCK
      REAL*4 STD_MINIMUM_BAL,ADJ_DEFERRED_TAX_DR_BALANCE,
     +       PAID_IN_CAPITAL,
     +       SUBSIDIARY_INVESTMENT_ADJ,
     +       GOODWILL_ADJUSTMENT,
     +       REG_ASSESTS_ADJUSTMENT,
     +       FASB109_ADJUSTMENT,
     +       FASB133_ADJUSTMENT,
     +       UNAMORT_INTEREST_ADJUSTMENT,
     +       NUCLEAR_DECOM_FUND_BAL_ADJ,
     +       CAP_LEASES_BAL_ADJ,
     +       ASSETS_NEC_BAL_ADJ,
     +       PREFERRED_STOCK_BAL_ADJ,
     +       LTD_BAL_ADJ,
     +       STD_BAL_ADJ,
     +       NUC_DECOM_LIAB_BAL_ADJ,
     +       LIABS_NEC_BAL_ADJ,
     +       OTHER_INVESTMENT_BAL_ADJ,
     +       NOTES_RECEIVABLE_BAL_ADJ,
     +       POST_RETIRE_MEDICAL_BAL_ADJ,
     +       DEFERRED_REVENUES_BAL_ADJ,
     +       DEFERRED_FUEL_BAL_ADJ,
     +       DEFERRED_PURCH_GAS_BAL_ADJ,
     +       LT_INVEST_BAL_ADJ,
     +       ST_INVEST_BAL_ADJ,
     +       FUEL_INVENTORY_BAL_ADJ,
     +       GAS_IN_STORAGE_BAL_ADJ,
     +       MATRIAL_SUPPLY_BAL_ADJ,
     +       ACCOUNTS_RECV_BAL_ADJ,
     +       UNBILLED_REV_BAL_ADJ,
     +       TAXES_RECEIVABLE_BAL_ADJ,
     +       CURRENT_LT_DEBT_BAL_ADJ,
     +       NOTES_PAYABLE_BAL_ADJ,
     +       CUSTOMER_DEPOSIT_BAL_ADJ,
     +       CICA_BAL_ADJ,
     +       POST_RETIRE_PAYABLE_BAL_ADJ,
     +       ACCRUED_PENSION_BAL_ADJ,
     +       DEFERRED_GAINS_BAL_ADJ,
     +       storm_RESERVE_BAL_ADJ,
     +       ACCOUNTS_PAYABLE_BAL_ADJ,
     +       ARO_NET_ASSETS_BAL_ADJ,
     +       ARO_LIABILITY_BAL_ADJ,
     +       DEFERRED_PURCHASE_POWER_ADJ,
     +       COI_EARNINGS_ADJ
      REAL (KIND=4):: CASH_TO_POST_RETIRE_MEDICAL_BAL,CASH_TO_CASH,
     +                CASH_TO_ACCRD_MBR_REVENUES_BAL



      REAL*4 CPL_EMC_REVENUES
      REAL*4 INVESTMENTS_MADE,
     +       INVESTMENTS_SOLD,
     +       DEBT_FILE_INVESTMENT_INCOME,
     +       INVESTMENT_INCOME_RECEIVABLE,
     +       NOTES_RECEIVABLE_MADE,
     +       NOTES_RECEIVABLE_CLEARED,
     +       NOTES_PAYABLE_MADE,
     +       NOTES_PAYABLE_CLEARED,
     +       DIVIDEND_70_NONTAXABLE,
     +       INVESTMENTS_BOY,
     +       NOTES_RECEIVABLE_BOY,
     +       NOTES_PAYABLE_BOY,
     +       INTRA_INVESTMENT_INCOME
      REAL*4 DEBT_COMMON_STOCK_ISSUED,
     +       DEBT_COMMON_SHARES_ISSUED,
     +       DEBT_COMMON_STOCK_BUYBACK,
     +       DEBT_COMMON_SHARES_BUYBACK,
     +       DEBT_COMMON_STOCK_BALANCE,
     +       DEBT_COMMON_SHARES_OUTSTANDING,
     +       CS_ISSUE_EXP_BAL,
     +       BOY_ISSUE_EXP_BAL,
     +       CS_ISSUE_EXP_AMORT,
     +       CS_ISSUE_EXP_THIS_PERIOD,
     +       NET_MONTHLY_SHARES(12),
     +       END_OF_MONTH_SHARES(0:12),
     +       MODEL_ISSUED_SHARES,
     +       MONTHLY_CAPITAL_VALUES(0:12)
      REAL (KIND=4) :: R_MONTHLY_RATE(0:12),
     +         STD_MONTHLY_INTEREST_RATE(0:12),
     +         STI_MONTHLY_INTEREST_RATE(0:12),
     +         LTD_NEW_MONTHLY_INTEREST_RATE(0:12),
     +         LTI_NEW_MONTHLY_INTEREST_RATE(0:12),
     +         MONTHLY_CUST_DEPOSITS_RATE(0:12),
     +         MONTHLY_RETIREMENT_FUND_RATE(0:12),
     +         MONTHLY_NUC_DECOM_RATE(0:12),
     +         PS_NEW_MONTHLY_INTEREST_RATE(0:12)
      LOGICAL*1 R_RATE_FOUND,
     +  STD_RATE_AVAILABLE,
     +  LTD_RATE_AVAILABLE,
     +  STI_RATE_AVAILABLE,
     +  LTI_RATE_AVAILABLE,
     +  CUST_DEPOSITS_RATE_AVAILABLE,
     +  RETIREMENT_FUND_RATE_AVAILABLE,
     +  NUC_DECOM_RATE_AVAILABLE,
     +  PS_RATE_AVAILABLE
      INTEGER*2 QRT
      LOGICAL*1 MONTHLY_COMMON_SHARES_ACTIVE
      REAL*4 PIOR_LEVEL_ATL_TAX_DEDUCTIONS,
     +       PIOR_LEVEL_BTL_TAX_DEDUCTIONS
      REAL*4 AGC_2_WP/.45/,AGC_2_PE/.28/,AGC_2_MP/.27/
      REAL*4 PRIOR_LEVEL_DECOM_FUND_PAYMENTS,
     +       PRI_LEVEL_NOT_DECOM_FUND_RETURN
      REAL*4 FEDERAL_EPA_92_TAX_RATE
      REAL*4 ADJ_2_EARNINGS_DECOM_FUND,
     +       ADJ_2_EARNINGS_POST_RETIREMENT,
     +       ADJ_2_EARNINGS_ST_INVESTMENTS,
     +       ADJ_2_EARNINGS_LT_INVESTMENTS
      LOGICAL*1 USE_ACTUAL_STATE_TAXES,
     +  USE_ACTUAL_FEDERAL_TAXES,
     +  USE_ACTUAL_DEFERRED_TAXES_CR,
     +  USE_ACTUAL_DEFERRED_TAXES_DR,
     +  USE_ACTUAL_BTL_DEF_TAXES_DR,
     +  USE_ACTUAL_BTL_DEF_TAXES_CR
      REAL*4 ANNUAL_STATE_INCOME_TAX,
     +       ANNUAL_FEDERAL_INCOME_TAX,
     +       ACTUAL_DEFERRED_TAXES_DR,
     +       ACTUAL_DEFERRED_TAXES_CR,
     +       ACTUAL_BTL_DEF_TAXES_DR,
     +       ACTUAL_BTL_DEF_TAXES_CR
      REAL*4 BOY_POST_RETIRE_MEDICAL_FUND,
     +       BOY_POST_RETIRE_MED_PAYABLE
      REAL*4 CONSOLID_DEFERRED_TAXES_DR
      REAL*4 ACTUAL_CON_STATE_INCOME_TAX,
     +       ACTUAL_CON_FEDERAL_INCOME_TAX,
     +       ACTUAL_CON_DEFERRED_TAXES_DR,
     +       ACTUAL_CON_DEFERRED_TAXES_CR,
     +       ACTUAL_CON_BTL_DEF_TAXES_DR,
     +       ACTUAL_CON_BTL_DEF_TAXES_CR
      LOGICAL*1 USE_ACTUAL_CON_STATE_TAXES,
     +  USE_ACTUAL_CON_FEDERAL_TAXES,
     +  USE_ACTUAL_CON_DEFERRED_TAX_DR,
     +  USE_ACTUAL_CON_DEFERRED_TAX_CR,
     +  USE_ACTUAL_CON_BTL_DEF_TAXES_DR,
     +  USE_ACTUAL_CON_BTL_DEF_TAXES_CR
      REAL*4 STD_INTEREST_OWED,
     +       REVENUE_TAXES_OWED,
     +       PROPERTY_TAXES_OWED,
     +       STATE_INCOME_TAXES_OWED,
     +       FEDERAL_INCOME_TAXES_OWED,
     +       STATE_TAX_ON_CAPITAL_OWED,
     +       FEDERAL_TAX_ON_CAPITAL_OWED,
     +       OTHER_TAXES_OWED
      REAL*4 INTEREST_ON_STD
      REAL*4 CALCULATED_2_ACTUAL_STATE_ADJ,
     +       CALCULATED_2_ACTUAL_FED_ADJ
      REAL*4 CUSTOMER_DEPOSITS_INTR_PAYABLE,
     +       CUSTOMER_DEPOSIT_INTEREST_ON
      INTEGER*2 MO
      REAL*4 CASH_TAXES_RECEIVABLE_FROM_SUBS
      REAL*4 MONTHLY_COMMON_DIVIDENDS(0:12)
      INTEGER*2 LEAD_SHARE,MONTH
      REAL*4 ST_INVESTMENT_EARNINGS
      REAL*4 CONSOLID_LOST_SEC_29_CREDITS,CONSOLD_AMT_MINIMUM_TAX,
     +       CONSOLID_AMT_CREDITS_USED,CONSOLD_FED_DEF_TAXES_FROM_NOL,
     +       CONSOLD_STATE_DEF_TAX_FROM_NOL
      REAL*4 CON_2_ACTUAL_STATE_ADJ,CON_2_ACTUAL_FEDERAL_ADJ
      REAL*4 CONSOLID_AMT_CREDITS_CREATED,
     +       CON_DEF_TAX_DR_NOLS_AMT_CREDITS
      REAL*4 BTL_CASH_EARNINGS,
     +       CPL_FUEL_REVENUE_RECEIVABLE,
     +       CATAWBA_RECEIVABLES,
     +       CATAWBA_PAYABLES,
     +       MIDAS_ISSUED_LTD,
     +       MIDAS_ISSUED_PS
      REAL*4 CONSOLID_FED_INCOME_TAX_ACCRUAL,
     +       CONSOLID_STATE_INC_TAX_ACCRUAL,
     +       CONSOLID_NON_INCOME_TAX_ACCRUAL,
     +       SUB_TAXES_ACCRUAL,
     +       PARENT_STATE_TAXES_ACCRUAL_ADJ,
     +       PARENT_FEDERAL_TAX_ACCRUAL_ADJ,
     +       PARENT_NON_INCOME_TAX_ACCRL_ADJ
      REAL*4 BOY_NUC_DECOM_FUND_LIABILITY
      logical*1 def_taxes_dr_is_contra
      REAL*4 PARENT_BTL_INTRA_FED_TAXES,
     +       PARENT_BTL_INTRA_STATE_TAXES
      REAL*4 CON_FEDERAL_TAXABLE_INCOME_ADJ,
     +       CON_FED_DEFERRED_TAX_DR_ADJ
      REAL*4 EFFECTIVE_TAX_RATE
      LOGICAL*1 IS_CONSOLIDATING_CLASS
      INTEGER*2 MOVE_TO_CLASS_ID
      LOGICAL*1 OPENING_BALANACE_4_PROPERTY_TAX,
     +  CLOSING_BALANACE_4_PROPERTY_TAX
      INTEGER*2 VARS_2_PASS
      INTEGER*2 LINKS_2_PARENT,CLASSES_ASSIGNED
      LOGICAL*1 MORE_LEVELS
      REAL*4 CAPITAL_MULTIPILER
      LOGICAL*1 USE_ALL_STATE_TAX_BENEFITS_NOW,
     +  USE_ALL_FED_TAX_BENEFITS_NOW
      REAL*4 ADJUST_4_STATE_CREDITS
      REAL*4 CATAWBA_DEFERRED_TAXES_BAL_CR
      CHARACTER*1 ACCOUNT_ACTIVE
      REAL*4 SUB_COMMON_BUYBACK_CS_ADJ,
     +       SUB_COMMON_BUYBACK_RE_ADJ
      REAL DEBT_ISSUED_4_ACQUISITION,
     +     COMMON_ISSUED_4_ACQUISITION,
     +     PREFERRED_ISSUED_4_ACQUISITION,
     +     SINKING_FUND_PAYMENT,
     +     ACQUISITION_EXPENSE
      INTEGER*2 ACQUISITION_MO
      REAL*4, ALLOCATABLE :: CUM_CAPTURED_OPT_METHOD_REVS(:)
      LOGICAL*1 LAHEY_LF95,UI
      logical (kind=1) :: WVPA_INIT_TRACKER_BALANCES ! External
      REAL*4 GAS_STORAGE_BOY,
     +       MATERIALS_SUPPLIES_BOY,
     +       FUEL_INVENTORY_BOY

C KEEP THIS LINE UNTIL INITIALIZATION HAS BASE YEAR RATE


         CALL RETURN_NUM_OF_EXISTING_CLASSES(NUM_OF_EA_CLASSES,
     +                                        MAX_EA_CLASS_NUM)

         NUM_OF_ENRG_CLASSES = RETURN_NUM_OF_HYDRO_CLASSES(
     +                                      MAX_ENRG_CLASS_NUM)
         CALL RETURN_INITIALIZATION_CLASSES(NUM_OF_CL_CLASSES,
     +                              MAX_CL_CLASS_NUM)
         CALL RETURN_NUM_OF_DEBT_CLASSES(NUM_OF_DB_CLASSES,
     +                                        MAX_DB_CLASS_NUM)
         CALL RETURN_NUM_OF_DEBIT_CLASSES(NUM_OF_DD_CLASSES,
     +                                        MAX_DD_CLASS_NUM)
         CALL RETURN_NUM_OF_NUC_FUEL_CLASSES(NUM_OF_NF_CLASSES,
     +                                        MAX_NF_CLASS_NUM)

         CALL RETURN_NUM_OF_DSM_CLASSES(NUM_OF_DSM_CLASSES,
     +                                       MAX_DSM_CLASS_NUM)
         CALL RETURN_CLASS_REVENUE_CLASSES(NUM_OF_RATE_REVENUE_CLASSES,
     +                              MAX_RATE_REVENUE_CLASS_NUM)
         CALL RETURN_INITIALIZATION_CLASSES(NUM_OF_INITIZATION_CLASSES,
     +                            MAX_INITIALIZATION_CLASS_NUM)
         MAX_CLASS_NUM = MAX(MAX_EA_CLASS_NUM,
     +               MAX_DB_CLASS_NUM,MAX_DD_CLASS_NUM,
     +               MAX_FA_CLASS_NUM,MAX_AA_CLASS_NUM,
     +               MAX_NF_CLASS_NUM,MAX_DSM_CLASS_NUM,
     +               MAX_CL_CLASS_NUM,MAX_ENRG_CLASS_NUM,
     +               MAX_RATE_REVENUE_CLASS_NUM,
     +               MAX_INITIALIZATION_CLASS_NUM)

         IF(MAX_CLASS_NUM <= 0) RETURN
         IF(ALLOCATED(MASTER_CLASS_LIST)) DEALLOCATE(MASTER_CLASS_LIST)
         ALLOCATE(MASTER_CLASS_LIST(0:MAX_CLASS_NUM))
         MASTER_CLASS_LIST = 0
         ALLOCATE(TEMP_LIST(MAX_CLASS_NUM))

         IF (MAX_INITIALIZATION_CLASS_NUM > 0) THEN
            CALL RETURN_INITIALIZATION_POINTER(TEMP_LIST)
            CLASSES_FOUND = LOAD_MASTER_CLASS_LIST(
     +                            MAX_INITIALIZATION_CLASS_NUM,
     +                             TEMP_LIST,MASTER_CLASS_LIST)
         ENDIF
         IF(MAX_DSM_CLASS_NUM > 0) THEN
            CALL RETURN_DSM_CLASS_POINTER(TEMP_LIST)
            CLASSES_FOUND = LOAD_MASTER_CLASS_LIST(MAX_DSM_CLASS_NUM,
     +                             TEMP_LIST,MASTER_CLASS_LIST)
         ENDIF
         IF(MAX_EA_CLASS_NUM > 0) THEN
            CALL RETURN_EXISTING_CLASS_POINTER(TEMP_LIST)
            CLASSES_FOUND = LOAD_MASTER_CLASS_LIST(MAX_EA_CLASS_NUM,
     +                             TEMP_LIST,MASTER_CLASS_LIST)
         ENDIF

         IF(MAX_ENRG_CLASS_NUM > 0) THEN
            MAX_ENRG_CLASS_NUM = RETURN_HYDRO_CLASS_POINTER(TEMP_LIST)
            CLASSES_FOUND = LOAD_MASTER_CLASS_LIST(MAX_ENRG_CLASS_NUM,
     +                             TEMP_LIST,MASTER_CLASS_LIST)
         ENDIF

         IF(MAX_DD_CLASS_NUM > 0) THEN
            CALL RETURN_DEBIT_CLASS_POINTER(TEMP_LIST)
            CLASSES_FOUND = LOAD_MASTER_CLASS_LIST(MAX_DD_CLASS_NUM,
     +                             TEMP_LIST,MASTER_CLASS_LIST)
         ENDIF
         IF(MAX_DB_CLASS_NUM > 0) THEN
            CALL RETURN_DEBT_CLASS_POINTER(TEMP_LIST)
            CLASSES_FOUND = LOAD_MASTER_CLASS_LIST(MAX_DB_CLASS_NUM,
     +                             TEMP_LIST,MASTER_CLASS_LIST)
         ENDIF
         IF(MAX_NF_CLASS_NUM > 0) THEN
            CALL RETURN_NUC_FUEL_POINTER(TEMP_LIST)
            CLASSES_FOUND = LOAD_MASTER_CLASS_LIST(MAX_NF_CLASS_NUM,
     +                             TEMP_LIST,MASTER_CLASS_LIST)
         ENDIF

         IF(MAX_RATE_REVENUE_CLASS_NUM > 0) THEN
            CALL RETURN_CLASS_REVENUE_POINTER(TEMP_LIST)
            CLASSES_FOUND = LOAD_MASTER_CLASS_LIST(
     +                             MAX_RATE_REVENUE_CLASS_NUM,
     +                             TEMP_LIST,MASTER_CLASS_LIST)
         ENDIF
         DEALLOCATE(TEMP_LIST,STAT=IOS)

         NUM_OF_ACTIVE_CLASSES = 0
         DO I = 1, MAX_CLASS_NUM
            IF(MASTER_CLASS_LIST(I) /= 0) THEN
               NUM_OF_ACTIVE_CLASSES = NUM_OF_ACTIVE_CLASSES + 1
               MASTER_CLASS_LIST(I) = NUM_OF_ACTIVE_CLASSES
            ENDIF
         ENDDO
         IF(ALLOCATED(CLASS_GPV)) DEALLOCATE(CLASS_GPV,
     +             CLASS_CUMULATIVE_DEPRECIATION,
     +             NET_UTILITY_PLANT,
     +             CLASS_CWIP,CLASS_NET_NF_VALUE,
     +             CUMULATIVE_NUCLEAR_BURN,RATE_BASE_loc,
     +             NET_NUCLEAR_FUEL_ADJ,
     +             DEFERRED_DEBITS_RATE_BASE,
     +             DEFERRED_CREDITS_IN_RATE_BASE,
     +             NUC_FUEL_RATE_BASE,
     +             CWIP_IN_RATE_BASE,
     +             NUC_DECOM_RATE_BASE,
     +             CIAC_RATE_BASE,
     +             PLANT_IN_SERVICE_RATE_BASE,
     +             ASSET_NEC_IN_RATE_BASE,
     +             CLASS_ADDENDUM_2_RATE_BASE,
     +             POST_RETIREMENT_MEDICAL_FUND,
     +             POST_RETIREMENT_MED_PAYABLE,
     +             NUC_DECOM_FUND_LIABILITY,
     +             LONG_TERM_INVESTMENTS,
     +             DEBT_FILE_INVESTMENTS,
     +             NOTES_RECEIVABLE,
     +             GRE_OTH_PROP_TAXES,
     +             OTHER_DEFERRED_CREDITS_BAL,
     +             REGULATORY_DEFERRED_CREDITS_BAL,
     +             GAIN_ON_REAQUIRED_DEBT_BAL,
     +             NOTES_PAYABLE,
     +             CAPITIALIZED_LEASES_RATE_BASE,
     +             LONG_TERM_DEBT,COMMON_SHARES,
     +             COMMON_STOCK,LINEC,PREFERRED_STOCK,
     +             CUSTOMER_DEPOSITS_BAL,CIAC_BALANCE,
     +             CLASS_NAME,CLASS_REVENUES,NET_DD_BALANCE,
     +             OTHER_DD_BALANCE,
     +             GOODWILL,
     +             UNAMORTIZED_INTEREST_BALANCE,
     +             UNAMORTIZED_ISSUE_EXP_BALANCE,
     +             CUMULATIVE_BOOK_DEP_ADJUSTMENTS,CLASS_TYPE,
     +             LINKED_2_CLASS,CUMULATIVE_GPV_ADJUSTMENTS,
     +             AI_CLASS_CWIP,YEAR_CLASS_DEACTIVATED,
     +            CLASS_PRIOR_INBALANCE,ACTIVATE_CLASS_IN_YEAR,
     +             ACCOUNTS_RECEIVABLE,
     +             CLASS_NUC_DECOM_TRUST_BAL,
     +             CLASS_NUC_DECOM_INC_EARNINGS,
     +             CLASS_NUC_DECOM_BAL_EARNINGS,
     +             ACCOUNTS_PAYABLE,
     +             COMMON_DIVIDEND_PAYMENT,
     +             FUEL_INVENTORY,
     +             CLASS_MATERIALS_N_SUPPLIES,
     +             CLASS_GAS_STORAGE,
     +             CLASS_DEFERRED_PURCHASE_GAS,
     +             ACQUISITION_PREMIUM,
     +             DEFERRED_FUEL_BALANCE,
     +             CUM_AMORT_ADJUSTMENT,
     +             CUM_GOODWILL_AT,
     +             CUM_REG_ASSET_ADJ_AT,
     +             CUM_FASB133_ADJ_AT,
     +             CUM_FASB109_ADJ_AT,
     +             DEBT_FILE_UNAMORT_INTR_BAL,
     +             DEBT_FILE_UNAMORT_ISS_EXP_BAL,
     +             DEBIT_FILE_UNAMORT_ISS_EXP_BAL,
     +             CUM_DD_UNAMORT_INTR_ADJ_AT,
     +             CUM_DD_UNAMORT_ISSUE_EXP_ADJ_AT,
     +             CUM_DD_RATEBASE_ADJUST,
     +             NUCLEAR_DECOM_FUND_BAL_ADJ_AT,
     +             CAP_LEASES_BAL_ADJ_AT,
     +             ASSETS_NEC_BAL_ADJ_AT,
     +             PREFERRED_STOCK_BAL_ADJ_AT,
     +             LTD_BAL_ADJ_AT,
     +             STD_BAL_ADJ_AT,
     +             NUC_DECOM_LIAB_BAL_ADJ_AT,
     +             LIABS_NEC_BAL_ADJ_AT,
     +             OTHER_INVESTMENT_BAL_ADJ_AT,
     +             NOTES_RECEIVABLE_BAL_ADJ_AT,
     +             POST_RETIRE_MEDICAL_BAL_ADJ_AT,
     +             DEFERRED_REVENUES_BAL_ADJ_AT,
     +             DEFERRED_FUEL_BAL_ADJ_AT,
     +             DEFERRED_PURCH_GAS_BAL_ADJ_AT,
     +             LT_INVEST_BAL_ADJ_AT,
     +             ST_INVEST_BAL_ADJ_AT,
     +             FUEL_INVENTORY_BAL_ADJ_AT,
     +             GAS_IN_STORAGE_BAL_ADJ_AT,
     +             MATRIAL_SUPPLY_BAL_ADJ_AT,
     +             ACCOUNTS_RECV_BAL_ADJ_AT,
     +             UNBILLED_REV_BAL_ADJ_AT,
     +             TAXES_RECEIVABLE_BAL_ADJ_AT,
     +             CURRENT_LT_DEBT_BAL_ADJ_AT,
     +             NOTES_PAYABLE_BAL_ADJ_AT,
     +             CUSTOMER_DEPOSIT_BAL_ADJ_AT,
     +             CICA_BAL_ADJ_AT,
     +             POST_RETIRE_PAYABLE_BAL_ADJ_AT,
     +             ACCRUED_PENSION_BAL_ADJ_AT,
     +             DEFERRED_GAINS_BAL_ADJ_AT,
     +             storm_RESERVE_BAL_ADJ_AT,
     +             ACCOUNTS_PAYABLE_BAL_ADJ_AT,
     +             PREFERRED_STOCK_ADDENDUM,
     +             LONG_TERM_DEBT_ADDENDUM,
     +             WEIGHTED_CLASS_PS_COST,
     +             WEIGHTED_CLASS_LTD_COST,
     +             CURRENCY_DENOMINATION,
     +             REPORT_CLASS,
     +             REPORT_ZEROS_4_CLASS,
     +             CONSOLIDATING_CLASS,
     +             CUM_RATE_BASE_NUCLEAR_BURN,
     +             CUM_CAPTURED_OPT_METHOD_REVS,
     +             FED_TAX_EXEMPT,
     +             STD_INTEREST_VECTOR,
     +             LTD_INTEREST_VECTOR,
     +             PS_DIVIDENDS_VECTOR,
     +             STI_INTEREST_VECTOR,
     +             LTI_INTEREST_VECTOR,
     +             CUSTOMER_DEPOSIT_INTREST_VECTOR,
     +             DECOM_FUND_INTEREST_VECTOR,
     +             RETIREMENT_FUND_INTEREST_VECTOR,
     +             CUMULATIVE_CLASS_OTH_LIAB_SALE_ASSETS,
     +             CURRENCY_CONVERSION_VECTOR)

         ALLOCATE(CLASS_GPV(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(NET_UTILITY_PLANT(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CLASS_CWIP(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(RATE_BASE_loc(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(DEFERRED_DEBITS_RATE_BASE(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(
     +        DEFERRED_CREDITS_IN_RATE_BASE(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(NUC_FUEL_RATE_BASE(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CWIP_IN_RATE_BASE(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(NUC_DECOM_RATE_BASE(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CIAC_RATE_BASE(2,0:NUM_OF_ACTIVE_CLASSES))
        ALLOCATE(PLANT_IN_SERVICE_RATE_BASE(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(ASSET_NEC_IN_RATE_BASE(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CLASS_ADDENDUM_2_RATE_BASE(0:NUM_OF_ACTIVE_CLASSES))
        ALLOCATE(POST_RETIREMENT_MEDICAL_FUND(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(ACCOUNTS_RECEIVABLE(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CLASS_NUC_DECOM_TRUST_BAL(0:NUM_OF_ACTIVE_CLASSES))
        ALLOCATE(CLASS_NUC_DECOM_INC_EARNINGS(0:NUM_OF_ACTIVE_CLASSES))
        ALLOCATE(CLASS_NUC_DECOM_BAL_EARNINGS(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(FUEL_INVENTORY(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CLASS_MATERIALS_N_SUPPLIES(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CLASS_GAS_STORAGE(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CLASS_DEFERRED_PURCHASE_GAS(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(ACQUISITION_PREMIUM(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(DEFERRED_FUEL_BALANCE(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(ACCOUNTS_PAYABLE(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(COMMON_DIVIDEND_PAYMENT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(POST_RETIREMENT_MED_PAYABLE(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(NUC_DECOM_FUND_LIABILITY(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(LONG_TERM_INVESTMENTS(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(DEBT_FILE_INVESTMENTS(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(NOTES_RECEIVABLE(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(GRE_OTH_PROP_TAXES(0:NUM_OF_ACTIVE_CLASSES))
        ALLOCATE(OTHER_DEFERRED_CREDITS_BAL(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(REGULATORY_DEFERRED_CREDITS_BAL
     +                             (2,0:NUM_OF_ACTIVE_CLASSES))
        ALLOCATE(GAIN_ON_REAQUIRED_DEBT_BAL(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(NOTES_PAYABLE(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(
     +        CAPITIALIZED_LEASES_RATE_BASE(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(
     +        CLASS_CUMULATIVE_DEPRECIATION(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CLASS_NET_NF_VALUE(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CUMULATIVE_NUCLEAR_BURN(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(NET_NUCLEAR_FUEL_ADJ(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CUM_RATE_BASE_NUCLEAR_BURN(0:NUM_OF_ACTIVE_CLASSES))
        ALLOCATE(CUM_CAPTURED_OPT_METHOD_REVS(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CLASS_REVENUES(0:MAX_CLASS_NUM))
         ALLOCATE(CLASS_NAME(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CLASS_TYPE(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CLASS_PRIOR_INBALANCE(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(LINKED_2_CLASS(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(YEAR_CLASS_DEACTIVATED(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(ACTIVATE_CLASS_IN_YEAR(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(LINEC(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(COMMON_STOCK(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(COMMON_SHARES(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(PREFERRED_STOCK(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(LONG_TERM_DEBT(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CUSTOMER_DEPOSITS_BAL(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CIAC_BALANCE(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(NET_DD_BALANCE(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(OTHER_DD_BALANCE(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(GOODWILL(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(
     +         UNAMORTIZED_INTEREST_BALANCE(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(
     +        UNAMORTIZED_ISSUE_EXP_BALANCE(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CUM_AMORT_ADJUSTMENT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CUM_GOODWILL_AT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CUM_REG_ASSET_ADJ_AT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CUM_FASB133_ADJ_AT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CUM_FASB109_ADJ_AT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(DEBT_FILE_UNAMORT_INTR_BAL(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(
     +  DEBT_FILE_UNAMORT_ISS_EXP_BAL(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(
     +         DEBIT_FILE_UNAMORT_ISS_EXP_BAL(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CUM_DD_UNAMORT_INTR_ADJ_AT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(
     +        CUM_DD_UNAMORT_ISSUE_EXP_ADJ_AT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(
     +  NUCLEAR_DECOM_FUND_BAL_ADJ_AT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CAP_LEASES_BAL_ADJ_AT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(ASSETS_NEC_BAL_ADJ_AT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(PREFERRED_STOCK_BAL_ADJ_AT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(LTD_BAL_ADJ_AT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(STD_BAL_ADJ_AT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(NUC_DECOM_LIAB_BAL_ADJ_AT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(LIABS_NEC_BAL_ADJ_AT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(OTHER_INVESTMENT_BAL_ADJ_AT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(NOTES_RECEIVABLE_BAL_ADJ_AT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(
     +         POST_RETIRE_MEDICAL_BAL_ADJ_AT(0:NUM_OF_ACTIVE_CLASSES))
        ALLOCATE(DEFERRED_REVENUES_BAL_ADJ_AT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(DEFERRED_FUEL_BAL_ADJ_AT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(
     +  DEFERRED_PURCH_GAS_BAL_ADJ_AT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(LT_INVEST_BAL_ADJ_AT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(ST_INVEST_BAL_ADJ_AT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(FUEL_INVENTORY_BAL_ADJ_AT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(GAS_IN_STORAGE_BAL_ADJ_AT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(MATRIAL_SUPPLY_BAL_ADJ_AT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(ACCOUNTS_RECV_BAL_ADJ_AT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(UNBILLED_REV_BAL_ADJ_AT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(TAXES_RECEIVABLE_BAL_ADJ_AT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CURRENT_LT_DEBT_BAL_ADJ_AT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(NOTES_PAYABLE_BAL_ADJ_AT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CUSTOMER_DEPOSIT_BAL_ADJ_AT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CICA_BAL_ADJ_AT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(
     +         POST_RETIRE_PAYABLE_BAL_ADJ_AT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(ACCRUED_PENSION_BAL_ADJ_AT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(DEFERRED_GAINS_BAL_ADJ_AT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(storm_RESERVE_BAL_ADJ_AT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(ACCOUNTS_PAYABLE_BAL_ADJ_AT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CUM_DD_RATEBASE_ADJUST(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(
     +        CUMULATIVE_BOOK_DEP_ADJUSTMENTS(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CUMULATIVE_CLASS_OTH_LIAB_SALE_ASSETS
     +                               (0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CUMULATIVE_GPV_ADJUSTMENTS(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(AI_CLASS_CWIP(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(PREFERRED_STOCK_ADDENDUM(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(LONG_TERM_DEBT_ADDENDUM(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(WEIGHTED_CLASS_PS_COST(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(WEIGHTED_CLASS_LTD_COST(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CURRENCY_DENOMINATION(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(REPORT_CLASS(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(REPORT_ZEROS_4_CLASS(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CONSOLIDATING_CLASS(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(FED_TAX_EXEMPT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(STD_INTEREST_VECTOR(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(LTD_INTEREST_VECTOR(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(PS_DIVIDENDS_VECTOR(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(STI_INTEREST_VECTOR(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(LTI_INTEREST_VECTOR(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(
     +        CUSTOMER_DEPOSIT_INTREST_VECTOR(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(DECOM_FUND_INTEREST_VECTOR(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(
     +        RETIREMENT_FUND_INTEREST_VECTOR(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CURRENCY_CONVERSION_VECTOR(0:NUM_OF_ACTIVE_CLASSES))

C PARAMETER FILE VALUES

        IF(ALLOCATED(ABANDS))
     +      DEALLOCATE(ABANDS,AFDC1C,AFDC2C,AFDCDP,BKDEPC,
     +         BOOK_VALUE_STOCK,TOTAL_CAPITIAL,
     +         CEPCUM,COMMON_EQUITY,DDAMTC,DEPCUM,
     +         DEF_ITC_BALANCE,NAFC1C,NAFC2C,NF_IN_PROCESS,
     +         NFIS,NNFV,NPV,OTHER_ASSETS,PLANT,RBCWIP,RBDD,
     +         RBNF,RB_NF_IN_PROCESS,REARNC,SALES,
     +         SHORT_TERM_DEBT,STOCK_PRICE_YEAR_END,
     +         INTEREST_ON_SHORT_TERM_DEBT,
     +         DEF_TAX_CR_BALANCE,
     +         WCCUM,OPERATING_REVENUES,STD_RATE,
     +         LIQUID_INVESTMENTS,
     +         NUC_DECOM_FUND_BAL,CUMTXNORM,BASE_REVENUE,
     +         OTH_REVENUE_loc,ADJ_CLAUSE_REVENUE,
     +         OTHER_LT_LIABILITY,
     +         CUM_DEF_REVENUES,NPV_RATEBASE,
     +         CUM_ITC_DEF_RATEBASE,RBCWIP_AFDC_METH2,
     +         CUM_DEF_TAX_RATEBASE,RB_REG_DD,
     +         DEFERRED_EXPENSE_BALANCE,
     +         AMTBKPREF,AMTNEGBKPREF,AVAILCREDIT,
     +         INVESTMENT_IN_SUBSIDIARIES,
     +         CAPITIALZIED_LEASES,
     +         DEFERRED_PURCHASE_POWER,
     +         PENSION_LIABILITY,
     +         DEFERRED_GAIN_FROM_SALES,
     +         STORM_RESERVE_BALANCE,
     +         ExecBenefitsBalance,
     +         IncentiveCompBalance,
     +         ACCRUED_VACATION_PAY_BALANCE,
     +         RB_INCLUDE_DEFERRED_TAX_DR,
     +         RB_INCLUDE_DEFERRED_REVENUES,
     +         RB_EXCLUDED_PENSION_LIABILITY,
     +      RB_EXCLUDED_DEFERRED_ASSET_GAIN,
     +         RB_EXCLUDED_STORM_RESERVE,
     +         RB_EXCLUDE_ACCRUED_VACATION_PAY,
     +         FASB143_NET_ASSET_VALUE,
     +         FASB143_LT_LIABILITY_VALUE,
     +         INIT_PLANNING_PEAK,
     +         FASB_87_INTANGIBLE_ASSETS,
     +         OTHER_COMPREHENSIVE_INCOME_BALANCE,    ! 103
     +         OPERATING_REVENUE_TAX_LAGGED_BASIS,    ! 104
     +         PROPERTY_TAX_BASIS)  ! 91 BASE YEAR


         ALLOCATE(ABANDS(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(AFDC1C(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(AFDC2C(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(AFDCDP(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(BKDEPC(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(BOOK_VALUE_STOCK(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(STOCK_PRICE_YEAR_END(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(DEFERRED_PURCHASE_POWER(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(PENSION_LIABILITY(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(DEFERRED_GAIN_FROM_SALES(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(STORM_RESERVE_BALANCE(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(ExecBenefitsBalance(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(IncentiveCompBalance(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(ACCRUED_VACATION_PAY_BALANCE(2,
     +                                0:NUM_OF_ACTIVE_CLASSES))
        ALLOCATE(RB_INCLUDE_DEFERRED_TAX_DR(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(RB_INCLUDE_DEFERRED_REVENUES(2,
     +                                0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(RB_EXCLUDED_PENSION_LIABILITY(2,
     +                                0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(RB_EXCLUDED_DEFERRED_ASSET_GAIN(2,
     +                                0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(RB_EXCLUDED_STORM_RESERVE(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(RB_EXCLUDE_ACCRUED_VACATION_PAY(2,
     +                                0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(FASB143_NET_ASSET_VALUE(2,0:NUM_OF_ACTIVE_CLASSES))
        ALLOCATE(FASB143_LT_LIABILITY_VALUE(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(PROPERTY_TAX_BASIS(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(FASB_87_INTANGIBLE_ASSETS(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(OTHER_COMPREHENSIVE_INCOME_BALANCE(
     +                                0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(OPERATING_REVENUE_TAX_LAGGED_BASIS(
     +                    0:NUM_OF_ACTIVE_CLASSES))   ! 104
         ALLOCATE(TOTAL_CAPITIAL(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CEPCUM(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(COMMON_EQUITY(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(DDAMTC(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(DEPCUM(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(DEF_ITC_BALANCE(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(NAFC1C(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(NAFC2C(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(NF_IN_PROCESS(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(NFIS(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(NNFV(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(NPV(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(OTHER_ASSETS(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(PLANT(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(RBCWIP(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(RBDD(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(RBNF(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(RB_NF_IN_PROCESS(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(REARNC(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(SALES(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(SHORT_TERM_DEBT(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(
     +  INTEREST_ON_SHORT_TERM_DEBT(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(DEF_TAX_CR_BALANCE(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(WCCUM(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(OPERATING_REVENUES(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(STD_RATE(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(LIQUID_INVESTMENTS(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(NUC_DECOM_FUND_BAL(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CUMTXNORM(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(BASE_REVENUE(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(OTH_REVENUE_loc(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(ADJ_CLAUSE_REVENUE(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(OTHER_LT_LIABILITY(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CUM_DEF_REVENUES(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(NPV_RATEBASE(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CUM_ITC_DEF_RATEBASE(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(RBCWIP_AFDC_METH2(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CUM_DEF_TAX_RATEBASE(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(RB_REG_DD(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(DEFERRED_EXPENSE_BALANCE(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(AMTBKPREF(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(AMTNEGBKPREF(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(AVAILCREDIT(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(INVESTMENT_IN_SUBSIDIARIES(
     +  2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CAPITIALZIED_LEASES(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(INIT_PLANNING_PEAK(3,0:NUM_OF_ACTIVE_CLASSES))

         IF(ALLOCATED(ANNINT)) DEALLOCATE(ANNINT,LTDINT,LTDRET,
     +                            PSDIV,PSRED,RATE_REVENUE,
     +                            NET_DEFERRED_EXPENSE_CASH,
     +                            ANNUAL_DEFERRED_CASH_AMORT,
     +                            ANN_PS_DIV,ANN_LTD_INT)
         ALLOCATE(ANNINT(0:MAX_FINANCIAL_SIMULATION_YEARS-1,
     +                                0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(ANN_PS_DIV(0:MAX_FINANCIAL_SIMULATION_YEARS-1,
     +                                0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(ANN_LTD_INT(0:MAX_FINANCIAL_SIMULATION_YEARS-1,
     +                                0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(LTDINT(0:MAX_FINANCIAL_SIMULATION_YEARS-1,
     +                                0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(LTDRET(0:MAX_FINANCIAL_SIMULATION_YEARS-1,
     +                                0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(PSDIV(0:MAX_FINANCIAL_SIMULATION_YEARS-1,
     +                                0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(PSRED(0:MAX_FINANCIAL_SIMULATION_YEARS-1,
     +                                0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(RATE_REVENUE(0:MAX_FINANCIAL_SIMULATION_YEARS-1,
     +                                0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(NET_DEFERRED_EXPENSE_CASH(
     +                      0:MAX_FINANCIAL_SIMULATION_YEARS-1,
     +                                0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(ANNUAL_DEFERRED_CASH_AMORT(
     +                      0:MAX_FINANCIAL_SIMULATION_YEARS-1,
     +                                0:NUM_OF_ACTIVE_CLASSES))

         IF(ALLOCATED(WEIGHTED_COST_OF_CAPITAL_BY))
     +                  DEALLOCATE(WEIGHTED_COST_OF_CAPITAL_BY,
     +                              PARENT_SUB_CIAC_BALANCE,
     +                              CIAC_CLASS_BALANCE)
         ALLOCATE(WEIGHTED_COST_OF_CAPITAL_BY(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(PARENT_SUB_CIAC_BALANCE(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CIAC_CLASS_BALANCE(0:NUM_OF_ACTIVE_CLASSES))
         IF(ALLOCATED(BY_ADJUSTMENT_2_ECONOMIC_ASSETS))
     +  DEALLOCATE(BY_ADJUSTMENT_2_ECONOMIC_ASSETS,
     +             OPERATING_ASSETS_YEAR_END)
         ALLOCATE(
     +        BY_ADJUSTMENT_2_ECONOMIC_ASSETS(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(OPERATING_ASSETS_YEAR_END(0:NUM_OF_ACTIVE_CLASSES))
         CALL INIT_REPORTING_VALUE_ARRAY(acq_VARIABLE_NUMBER)

         COUNTRY_NOT_USA = COUNTRY() /= USA
         MONTAUK_IS_ACTIVE = MONTAUK_ACTIVE()
        CREDITS_ARE_IN_INCOME_STATEMENT = CREDITS_IN_INCOME_STATEMENT()

C READ TAX LOSS FILES MOVED HERE TO GET TAX RATES

         ACTIVE_TAX_LOSS_CLASSES = READ_TAX_LOSSES(MAX_CLASS_NUM,
     +                                   NUM_OF_ACTIVE_CLASSES,
     +                                    MASTER_CLASS_LIST)
      RETURN

      ENTRY ZERO_ASSET_CLASS_ARRAYS


         CUSTOMER_DEPOSITS_BAL = 0.
         CIAC_BALANCE = 0.
         CLASS_GPV = 0.
         NET_UTILITY_PLANT = 0.
         CLASS_CWIP = 0.
         NET_DD_BALANCE = 0.
         OTHER_DD_BALANCE = 0.
         GOODWILL = 0.
         UNAMORTIZED_INTEREST_BALANCE = 0.
         UNAMORTIZED_ISSUE_EXP_BALANCE = 0.
         CLASS_CUMULATIVE_DEPRECIATION = 0.
         CLASS_NET_NF_VALUE = 0.
         RATE_BASE_loc = 0.
         DEFERRED_DEBITS_RATE_BASE = 0.
         DEFERRED_CREDITS_IN_RATE_BASE = 0.
         NUC_FUEL_RATE_BASE = 0.
         CWIP_IN_RATE_BASE = 0.
         NUC_DECOM_RATE_BASE = 0.
         CIAC_RATE_BASE = 0.
         PLANT_IN_SERVICE_RATE_BASE = 0.
         ASSET_NEC_IN_RATE_BASE = 0.
         CAPITIALIZED_LEASES_RATE_BASE = 0.
         LINEC = 0.
         COMMON_STOCK = 0.
         COMMON_SHARES = 0.
         PREFERRED_STOCK = 0.
         LONG_TERM_DEBT = 0.

         CUMULATIVE_NUCLEAR_BURN = 0.
         NET_NUCLEAR_FUEL_ADJ = 0.
         CUM_RATE_BASE_NUCLEAR_BURN = 0.
         CUM_CAPTURED_OPT_METHOD_REVS = 0.
         CUMULATIVE_BOOK_DEP_ADJUSTMENTS = 0.
         CUMULATIVE_CLASS_OTH_LIAB_SALE_ASSETS = 0.
         CUMULATIVE_GPV_ADJUSTMENTS = 0.
         AI_CLASS_CWIP = 0.
         CLASS_ADDENDUM_2_RATE_BASE = 0.
         POST_RETIREMENT_MEDICAL_FUND = 0.
         POST_RETIREMENT_MED_PAYABLE = 0.
         OTHER_COMPREHENSIVE_INCOME_BALANCE = 0.
         OPERATING_REVENUE_TAX_LAGGED_BASIS = 0.
         FASB_87_INTANGIBLE_ASSETS = 0.
         ACCOUNTS_RECEIVABLE = 0.
         CLASS_NUC_DECOM_TRUST_BAL = 0.
         CLASS_NUC_DECOM_INC_EARNINGS = 0.
         CLASS_NUC_DECOM_BAL_EARNINGS = 0.
         ACCOUNTS_PAYABLE = 0.
         FUEL_INVENTORY = 0.
         CLASS_MATERIALS_N_SUPPLIES = 0.
         CLASS_GAS_STORAGE = 0.
         CLASS_DEFERRED_PURCHASE_GAS = 0.
         ACQUISITION_PREMIUM = 0.
         DEFERRED_FUEL_BALANCE = 0.
         COMMON_DIVIDEND_PAYMENT = 0.
         NUC_DECOM_FUND_LIABILITY = 0.
         LONG_TERM_INVESTMENTS = 0.
         DEBT_FILE_INVESTMENTS = 0.
         NOTES_RECEIVABLE = 0.
         GRE_OTH_PROP_TAXES = 0.
         NOTES_PAYABLE = 0.
         OTHER_DEFERRED_CREDITS_BAL = 0.
         REGULATORY_DEFERRED_CREDITS_BAL = 0.
         GAIN_ON_REAQUIRED_DEBT_BAL = 0.
         CUM_AMORT_ADJUSTMENT = 0.
         CUM_GOODWILL_AT = 0.
         CUM_REG_ASSET_ADJ_AT = 0.
         CUM_FASB133_ADJ_AT = 0.
         CUM_FASB109_ADJ_AT = 0.
         DEBT_FILE_UNAMORT_INTR_BAL = 0.
         DEBT_FILE_UNAMORT_ISS_EXP_BAL = 0.
         DEBIT_FILE_UNAMORT_ISS_EXP_BAL = 0.
         CUM_DD_UNAMORT_INTR_ADJ_AT = 0.
         CUM_DD_UNAMORT_ISSUE_EXP_ADJ_AT = 0.
         NUCLEAR_DECOM_FUND_BAL_ADJ_AT = 0.
         CAP_LEASES_BAL_ADJ_AT = 0.
         ASSETS_NEC_BAL_ADJ_AT = 0.
         PREFERRED_STOCK_BAL_ADJ_AT = 0.
         LTD_BAL_ADJ_AT = 0.
         STD_BAL_ADJ_AT = 0.
         NUC_DECOM_LIAB_BAL_ADJ_AT = 0.
         LIABS_NEC_BAL_ADJ_AT = 0.
         OTHER_INVESTMENT_BAL_ADJ_AT = 0.
         NOTES_RECEIVABLE_BAL_ADJ_AT = 0.
         POST_RETIRE_MEDICAL_BAL_ADJ_AT = 0.
         DEFERRED_REVENUES_BAL_ADJ_AT = 0.
         DEFERRED_FUEL_BAL_ADJ_AT = 0.
         DEFERRED_PURCH_GAS_BAL_ADJ_AT = 0.
         LT_INVEST_BAL_ADJ_AT = 0.
         ST_INVEST_BAL_ADJ_AT = 0.
         FUEL_INVENTORY_BAL_ADJ_AT = 0.
         GAS_IN_STORAGE_BAL_ADJ_AT = 0.
         MATRIAL_SUPPLY_BAL_ADJ_AT = 0.
         ACCOUNTS_RECV_BAL_ADJ_AT = 0.
         UNBILLED_REV_BAL_ADJ_AT = 0.
         TAXES_RECEIVABLE_BAL_ADJ_AT = 0.
         CURRENT_LT_DEBT_BAL_ADJ_AT = 0.
         NOTES_PAYABLE_BAL_ADJ_AT = 0.
         CUSTOMER_DEPOSIT_BAL_ADJ_AT = 0.
         CICA_BAL_ADJ_AT = 0.
         POST_RETIRE_PAYABLE_BAL_ADJ_AT = 0.
         ACCRUED_PENSION_BAL_ADJ_AT = 0.
         DEFERRED_GAINS_BAL_ADJ_AT = 0.
         storm_RESERVE_BAL_ADJ_AT = 0.
         ACCOUNTS_PAYABLE_BAL_ADJ_AT = 0.
         CUM_DD_RATEBASE_ADJUST = 0.
         PREFERRED_STOCK_ADDENDUM = 0.
         LONG_TERM_DEBT_ADDENDUM = 0.
         WEIGHTED_CLASS_PS_COST = 0.
         WEIGHTED_CLASS_LTD_COST = 0.

         CLASS_NAME(:) = ' '
         CLASS_TYPE(:) = ' '
         CURRENCY_DENOMINATION(:) = ' '
         REPORT_CLASS(:) = .TRUE.
         REPORT_ZEROS_4_CLASS(:) = .FALSE.
         CONSOLIDATING_CLASS(:) = .FALSE.
         FED_TAX_EXEMPT(:) = ' '

C PARAMETER FILE VALUES

         ABANDS = 0.
         AFDC1C = 0.
         AFDC2C = 0.
         AFDCDP = 0.
         BKDEPC = 0.
         BOOK_VALUE_STOCK = 0.
         STOCK_PRICE_YEAR_END = 0.
         DEFERRED_PURCHASE_POWER = 0.
         PENSION_LIABILITY = 0.
         DEFERRED_GAIN_FROM_SALES = 0.
         STORM_RESERVE_BALANCE = 0.
         ExecBenefitsBalance = 0.
         IncentiveCompBalance = 0.
         ACCRUED_VACATION_PAY_BALANCE = 0.
         RB_INCLUDE_DEFERRED_TAX_DR = 0.
         RB_INCLUDE_DEFERRED_REVENUES = 0.
         RB_EXCLUDED_PENSION_LIABILITY = 0.
         RB_EXCLUDED_DEFERRED_ASSET_GAIN = 0.
         RB_EXCLUDED_STORM_RESERVE = 0.
         RB_EXCLUDE_ACCRUED_VACATION_PAY = 0.
         FASB143_NET_ASSET_VALUE = 0.
         FASB143_LT_LIABILITY_VALUE = 0.
         TOTAL_CAPITIAL = 0.
         CEPCUM = 0.
         COMMON_EQUITY = 0.
         DDAMTC = 0.
         DEPCUM = 0.
         DEF_ITC_BALANCE = 0.
         NAFC1C = 0.
         NAFC2C = 0.
         NF_IN_PROCESS = 0.
         NFIS = 0.
         NNFV = 0.
         NPV = 0.
         OTHER_ASSETS = 0.
         PLANT = 0.
         RBCWIP = 0.
         RBDD = 0.
         RBNF = 0.
         RB_NF_IN_PROCESS = 0.
         REARNC = 0.
         SALES = 0.
         SHORT_TERM_DEBT = 0.
         INTEREST_ON_SHORT_TERM_DEBT = 0.
         DEF_TAX_CR_BALANCE = 0.
         WCCUM = 0.
         OPERATING_REVENUES = 0.
         STD_RATE = 0.
         LIQUID_INVESTMENTS = 0.
         NUC_DECOM_FUND_BAL = 0.
         CUMTXNORM = 0.
         BASE_REVENUE = 0.
         OTH_REVENUE_loc = 0.
         ADJ_CLAUSE_REVENUE = 0.
         OTHER_LT_LIABILITY = 0.
         CUM_DEF_REVENUES = 0.
         NPV_RATEBASE  = 0.
         CUM_ITC_DEF_RATEBASE = 0.
         RBCWIP_AFDC_METH2 = 0.
         CUM_DEF_TAX_RATEBASE = 0.
         RB_REG_DD = 0.
         DEFERRED_EXPENSE_BALANCE = 0.
         AMTBKPREF = 0.
         AMTNEGBKPREF = 0.
         AVAILCREDIT = 0.
         INVESTMENT_IN_SUBSIDIARIES = 0.
         CAPITIALZIED_LEASES = 0.

         INIT_PLANNING_PEAK = 0.

         ANNINT = 0.
         ANN_PS_DIV = 0.
         ANN_LTD_INT = 0.
         LTDINT = 0.
         LTDRET = 0.
         PSDIV = 0.
         PSRED = 0.
         RATE_REVENUE = 0.
         NET_DEFERRED_EXPENSE_CASH = 0.
         ANNUAL_DEFERRED_CASH_AMORT = 0.

         BY_ADJUSTMENT_2_ECONOMIC_ASSETS = 0.
         OPERATING_ASSETS_YEAR_END = 0.
         WEIGHTED_COST_OF_CAPITAL_BY = 0.
         PARENT_SUB_CIAC_BALANCE = 0.
         CIAC_CLASS_BALANCE = 0.
         CLASS_PRIOR_INBALANCE = 0.
      RETURN

      ENTRY ASSET_CLASS_ANALYSIS_BY(R_YEAR,WRITE_THE_RESULTS)


         VARS_2_PASS = acq_VARIABLE_NUMBER-INT2(1)
         IF(ASSET_CLASS_REPORTS() .AND.
     +         .NOT. REPORT_HEADER_ACTIVE) THEN
            INCOME_UNIT = ASSET_CLASS_INCOME_HEADER(START_RECORD,
     +                                      acq_VARIABLE_NUMBER)
            REPORT_HEADER_ACTIVE = .TRUE.
         ENDIF


         YR = R_YEAR
         AA_CLASS_EXISTS = .FALSE.
         ASSET_REPORTS_ACTIVE = WRITE_THE_RESULTS .AND.
     +                  ASSET_CLASS_REPORTS()
         SBU_LTD_ELIM = 0.
         SBU_STD_ELIM = 0.
         SBU_PS_ELIM = 0.
         acq_SBU_UNAMORTIZED_INTEREST_BAL = 0.
         acq_SBU_UNAMORTIZED_ISSUE_EXPENSE_BAL = 0.           ! 339
         TOTAL_SUB_COMMON_EQUITY = 0.
         TOTAL_SUB_RETAINED_EARNINGS = 0.
         TOTAL_SUB_OCI_EARNINGS = 0.
         TOTAL_SUB_INVESTMENT = 0.
         FIRST_LEVEL_SUB_COMMON_EQUITY = 0.
         FIRST_LEVEL_SUB_EARNINGS = 0.
         FIRST_LEVEL_SUB_INVESTMENT = 0.
         YEAR_END_UNUSED_CREDIT_BAL = 0.
         ! NON-ZERO BALANCES OF SUBS INITIALIZATION FILE
         UNMODELLED_SUBS_OWNED_BY_SUBS = 0.
         UNMODELED_SUB_DIVIDEND_2_PARENT = 0.
         LAST_CLASS_LEVEL = -999
C        VOID_LOGICAL = ZERO_TOTAL_EMIS_VARS()

         SEPARATE_ELIMINATIONS = .FALSE.

C 10/15/97 SUM OF SBUs AND SUBs

         IF(ALLOCATED(BALANCE_SHEET_ROLLUPS))
     +                         DEALLOCATE(BALANCE_SHEET_ROLLUPS)
         ALLOCATE(BALANCE_SHEET_ROLLUPS(2,0:LAST_TRANSFER_ITEM,
     +                                      0:MAX_LINKED_LEVEL))
         BALANCE_SHEET_ROLLUPS = 0.


         IF(ALLOCATED(LEVEL_SUMATION)) DEALLOCATE(LEVEL_SUMATION)
         ALLOCATE(LEVEL_SUMATION(0:acq_VARIABLE_NUMBER-1,
     +                                      0:MAX_LINKED_LEVEL))
         LEVEL_SUMATION = 0.

         ALLOCATE(NUC_FUEL_RATE_BASE_AT(0:MAX_LINKED_LEVEL))
         ALLOCATE(CWIP_IN_RATE_BASE_AT(0:MAX_LINKED_LEVEL))
         ALLOCATE(OPENING_CASH_BALANCES(0:NUM_OF_ACTIVE_CLASSES))
         NUC_FUEL_RATE_BASE_AT = 0.
         CWIP_IN_RATE_BASE_AT = 0.
         OPENING_CASH_BALANCES = 0.

         IF(ALLOCATED(SUB_INVESTMENT_IN_SUBS))
     +                       DEALLOCATE(SUB_INVESTMENT_IN_SUBS)
         ALLOCATE(SUB_INVESTMENT_IN_SUBS(0:MAX_LINKED_LEVEL))
         SUB_INVESTMENT_IN_SUBS = 0.
         IF(YR == 1) THEN

C PROCESS THE ADDENDUM FILE

            CALL ADDENDUMS(.FALSE.)
            DUKE_IS_ACTIVE = DUKE()
            CPL_IS_ACTIVE = CPL_ACTIVE()
            AMEREN_IS_ACTIVE = AMEREN()
            PACIFICORP_IS_ACTIVE = PACIFICORP()
            FirstEnergy_Is_Active = FirstEnergy()
            IF(CPL_IS_ACTIVE)
     +    CALL CPL_INT_DEFERRED_FUEL_ACCNTING(MASTER_CLASS_LIST,
     +                                        CLASS_TYPE)
            EMPIRE_IS_ACTIVE = EMPIRE()
            IP_IS_ACTIVE = UTILITY_IS_IP()
            ST_JOE_BASE_ELECTRIC_REVENEUS = 0.
            CALL READ_ELIMINATIONS(INT2(acq_VARIABLE_NUMBER-1))

            acq_VARIABLE = 0.
            acq_SUBSIDARY_VARIABLES = 0.
            acq_SBU_VARIABLES = 0.
            CALL STORE_REPORTING_VALUES(acq_VARIABLE)

! READ TAX LOSS FILES MOVED ABOVE 9/17/98


            CALL INIT_READING_CLASS_PARAMETERS(MAX_CLASS_NUM)
            CALL INIT_CLASS_RUN_SWITCH_FILE(MAX_CLASS_NUM)

            IF(WVPA()) THEN
               CALL INIT_WVPA_SALES_REVENUE_BY_COOP
               VOID_LOGICAL = WVPA_INIT_TRACKER_BALANCES()
            ELSE
               CALL INIT_SALES_REVENUE_BY_CLASS
            ENDIF

C INITIALIZE BALANCE SHEET AND OUTPUT INFORMATION

c           NUMBER_OF_REPORTING_CLASSES = DEFINED_CLASSES ! TESTING
c           PARENT_HAS_LINKED_SUBS = .TRUE.
c           PARENT_HAS_LINKED_SBUS = .TRUE.
            SUBS_ACTIVE = DEFINED_CLASSES > 1
            SUBS_ACTIVE_FOR_REPORTING = NUMBER_OF_REPORTING_CLASSES > 1
            IF(SUBS_ACTIVE_FOR_REPORTING) THEN
               REPORTING_CLASS_ID = REPORTING_ASSET_CLASS()
            ELSE
               !IF ONLY ONE CLASS THE PARENT GETS OUTPUTTED
               REPORTING_CLASS_ID = -1
            ENDIF
            IF(ASSET_REPORTS_ACTIVE) THEN
               IF(SUBS_ACTIVE_FOR_REPORTING) THEN
                  BASE_OUTPUT_RECORD = START_RECORD +
     +                           NUMBER_OF_REPORTING_CLASSES + 1
                  IF(PARENT_HAS_LINKED_SUBS)
     +               BASE_OUTPUT_RECORD = BASE_OUTPUT_RECORD + 1
                  IF(PARENT_HAS_LINKED_SBUS)
     +               BASE_OUTPUT_RECORD = BASE_OUTPUT_RECORD + 1

               ELSE
                  BASE_OUTPUT_RECORD = START_RECORD
                REPORTING_CLASS_ID = -1 ! ONLY THE PARENT GETS OUTPUTTED
               ENDIF
            ENDIF
            CONSLD_YEAR_END_OP_ASSETS = 0


C WRITE THE CONSOLIDATED INFORMATION
         IF(gc_end_point == START_STUDY_ENDPOINT().AND.
     +            GRX_ITERATIONS == 0) THEN ! OPEN OUTPUT FILE
            TEMP_I2 = START_STUDY_ENDPOINT()
            WRITE(4,*) ' 091312 END_POINT START_STUDY_ENDPOINT',
     +                                         gc_end_point,TEMP_I2
            INQUIRE(FILE='MSG'//trim(GET_SCENAME())//'.STR',
     +                                        EXIST=FILE_EXISTS)
            IF(FILE_EXISTS) THEN
               CALL ERASE('MSG'//trim(GET_SCENAME())//'.STR')
            ENDIF
            IF(LAHEY_LF95()) THEN
               OPEN(23487,FILE='MSG'//trim(GET_SCENAME())//'.STR',
     +                   ACCESS='TRANSPARENT',STATUS='REPLACE')
               WRITE(23487) 'LF95 '
            ELSE
               OPEN(23487,FILE='MSG'//trim(GET_SCENAME())//'.STR',
     +  ACCESS='SEQUENTIAL',FORM='UNFORMATTED',STATUS='REPLACE')
            ENDIF
         ENDIF
            CLASS = DEFINED_CLASS_POINTER_LIST(1)
            PARENT_CLASS = CLASS == PARENT_CLASS_ID_NUM
            CLASS_POS = MASTER_CLASS_LIST(CLASS)
            PARENT_CLASS_NAME = CLASS_NAME(CLASS_POS)
            IF(DEFINED_CLASSES == 1) THEN
               ASSET_CLASS_NAME = trim(CLASS_NAME(CLASS_POS))
               WRITE(23487) gc_end_point,
     +         INT2(0),
     +         ASSET_CLASS_NAME,
     +         'Par',
     +         INT2(PARENT_CLASS_ID_NUM-1),
     +         INT2(get_BASE_YEAR()),
     +         INT2(2050)
            ELSE
             ASSET_CLASS_NAME = trim(CLASS_NAME(CLASS_POS))//' (Con)'
             WRITE(23487) gc_end_point,
     +           INT2(0),
     +           ASSET_CLASS_NAME,
     +           'CON',
     +           INT2(-1),
     +           INT2(get_BASE_YEAR()),
     +           INT2(2050)
C WRITE THE PARENT AND STRUCTURE INFORMATION
             DO CLASS_COUNTER = 1,DEFINED_CLASSES
                CLASS = DEFINED_CLASS_POINTER_LIST(CLASS_COUNTER)
                PARENT_CLASS = CLASS == PARENT_CLASS_ID_NUM
                CLASS_POS = MASTER_CLASS_LIST(CLASS)
                IF(PARENT_CLASS) THEN
                   ASSET_CLASS_NAME =
     +                trim(CLASS_NAME(CLASS_POS))//' (Parent)'
                ELSEIF(trim(CLASS_NAME(CLASS_POS)) /= ' ')THEN
                  ASSET_CLASS_NAME = trim(CLASS_NAME(CLASS_POS))
                ELSE
                   WRITE(STR_CLASS_NUM,'(I4)') CLASS-1
                   ASSET_CLASS_NAME = 'Class '//STR_CLASS_NUM
                ENDIF
                IF(PARENT_CLASS) THEN
                   ASSET_CLASS_TYPE_NAME = 'Par'
                ELSEIF(CLASS_TYPE(CLASS_POS) == SBU) THEN
                   ASSET_CLASS_TYPE_NAME = 'SBU'
                ELSEIF(CLASS_TYPE(CLASS_POS) == SUBSIDIARY) THEN
                   ASSET_CLASS_TYPE_NAME = 'Sub'
                ELSEIF(CLASS_TYPE(CLASS_POS) == REGULATED_GROUP) THEN
                   ASSET_CLASS_TYPE_NAME = 'Reg'
                ELSE
                   ASSET_CLASS_TYPE_NAME = 'XXX'
                ENDIF
                IF(get_BASE_YEAR()+ACTIVATE_CLASS_IN_YEAR(CLASS_POS) >
     +                                    gc_last_study_year) CYCLE
                WRITE(23487) gc_end_point,
     +         INT2(CLASS_AT_LEVEL(CLASS_COUNTER)),
     +         ASSET_CLASS_NAME,
     +         ASSET_CLASS_TYPE_NAME,
     +         INT2(CLASS-1),
     +        INT2(get_BASE_YEAR()+ACTIVATE_CLASS_IN_YEAR(CLASS_POS)),
     +        INT2(get_BASE_YEAR()+YEAR_CLASS_DEACTIVATED(CLASS_POS))
             ENDDO
            ENDIF
            DO CLASS_COUNTER = DEFINED_CLASSES,1,-1

               CLASS = DEFINED_CLASS_POINTER_LIST(CLASS_COUNTER)
               CLASS_LEVEL = CLASS_AT_LEVEL(CLASS_COUNTER)
               PARENT_CLASS = CLASS == PARENT_CLASS_ID_NUM
               CLASS_POS = MASTER_CLASS_LIST(CLASS)
               SUBSIDIARY_CLASS = CLASS_TYPE(CLASS_POS) == SUBSIDIARY
               THIS_IS_REPORTING_CLASS = CLASS == REPORTING_CLASS_ID
               DONT_TALLY_THIS_CLASS =
     +        ACTIVATE_CLASS_IN_YEAR(CLASS_POS) >= YR .AND.
     +                     ACTIVATE_CLASS_IN_YEAR(CLASS_POS) > 0
               if(class == class_check + 1) then
                  CLASS_POS = MASTER_CLASS_LIST(CLASS)
               endif

               IF(PARENT_CLASS .AND. SUBS_ACTIVE) THEN

                  PARENT_AVERAGE_SHARES = COMMON_SHARES(2,CLASS_POS)
                  PARENT_YEAR_END_SHARES = COMMON_SHARES(2,CLASS_POS)
                 EXCLUDE_SUB_COMMON_EQUITY = acq_SUBSIDARY_VARIABLES(77)
               EXCLUDE_SUB_RETAINED_EARNINGS=acq_SUBSIDARY_VARIABLES(78)
                EXCLUDE_SUB_OCI_EARNINGS = acq_SUBSIDARY_VARIABLES(730)
            EXCLUDE_SUB_TAX_DEFERRALS_DR= acq_SUBSIDARY_VARIABLES(73)
           acq_SUBSIDARY_VARIABLES(61) = NOT_AVAIL
                  IF(ASSET_REPORTS_ACTIVE .AND.
     +                              PARENT_HAS_LINKED_SBUS) THEN

C BASE YEAR SHAREHOLDER VALUE

                     ASSET_CLASS_NAME = 'SBU Totals'
                     CALL PASS_PARENT_2_SBU_TOTALS(
     +                            VARS_2_PASS,
     +                            LEVEL_SUMATION(0,CLASS_LEVEL),
     +                            acq_SBU_VARIABLES)
      acq_SBU_VARIABLES(339) =! RESET acq_CLASS_UNAMORTIZED_INTEREST_BAL
     +      acq_SBU_VARIABLES(628)   ! acq_UNAMORT_DEBT_INTEREST_BAL
     +     + acq_SBU_VARIABLES(629) !acq_UNAMORT_DEBIT_INTEREST_BAL
                     CALL CLASS_SHAREHOLDER_VALUE_NA(acq_SBU_VARIABLES)

              acq_SBU_VARIABLES(61) = NOT_AVAIL ! ACQ_RETURN_ON_RATEBASE
                     acq_OUTPUT_CLASS_ID = -10000.
                     acq_SBU_VARIABLES(441) = acq_OUTPUT_CLASS_ID
                     acq_SBU_VARIABLES(641) = acq_SBU_VARIABLES(76)
     +               - acq_SBU_VARIABLES(90) ! acq_ASSET_MINUS_LIABS
                     acq_SBU_VARIABLES(642) = 0.
                     TOTAL_SBU_PRIOR_INBALANCE = acq_SBU_VARIABLES(641)
                     WRITE(INCOME_UNIT,REC=BASE_OUTPUT_RECORD)
     +                                       PRT_ENDPOINT(),
     +                                       FLOAT(get_BASE_YEAR()),
     +                                       ASSET_CLASS_NAME,
     +                                       acq_SBU_VARIABLES
                     IF(FirstEnergy_Is_Active)
     +          CALL FE_PCA_LEGAL_REPORTS(FLOAT(get_BASE_YEAR()),
     +                                    ASSET_CLASS_NAME,
     +                                    BASE_OUTPUT_RECORD,
     +                                    acq_SBU_VARIABLES)
                     BASE_OUTPUT_RECORD = BASE_OUTPUT_RECORD - 1
                  ENDIF
                  acq_SUBSIDARY_VARIABLES(77) = TOTAL_SUB_COMMON_EQUITY
              acq_SUBSIDARY_VARIABLES(78) = TOTAL_SUB_RETAINED_EARNINGS
                  acq_SUBSIDARY_VARIABLES(730) = TOTAL_SUB_OCI_EARNINGS

            acq_SUBSIDARY_VARIABLES(79) = acq_SUBSIDARY_VARIABLES(77) +
     +                              acq_SUBSIDARY_VARIABLES(78)
                EXCLUDE_SUB_COMMON_EQUITY = acq_SUBSIDARY_VARIABLES(77)
               EXCLUDE_SUB_RETAINED_EARNINGS=acq_SUBSIDARY_VARIABLES(78)

                  EXCLUDE_SUB_INVESTMENT = acq_SUBSIDARY_VARIABLES(91)
               acq_SUBSIDARY_VARIABLES(82) = acq_SUBSIDARY_VARIABLES(79)
     +                            + acq_SUBSIDARY_VARIABLES(80)
     +                            + acq_SUBSIDARY_VARIABLES(81)
     +                            + acq_SUBSIDARY_VARIABLES(730)
             acq_SUBSIDARY_VARIABLES(713) = acq_SUBSIDARY_VARIABLES(412)
     +                            + acq_SUBSIDARY_VARIABLES(86)
     +                            + acq_SUBSIDARY_VARIABLES(87)
     +                             + acq_SUBSIDARY_VARIABLES(88)
     +                            + acq_SUBSIDARY_VARIABLES(710)
     +                            + acq_SUBSIDARY_VARIABLES(711)
     +                            + acq_SUBSIDARY_VARIABLES(712)
               acq_SUBSIDARY_VARIABLES(90) = acq_SUBSIDARY_VARIABLES(82)
     +                             + acq_SUBSIDARY_VARIABLES(83)
     +                            + acq_SUBSIDARY_VARIABLES(84)
     +                             + acq_SUBSIDARY_VARIABLES(85)
     +                             + acq_SUBSIDARY_VARIABLES(89)
     +                            + acq_SUBSIDARY_VARIABLES(287)
     +                            + acq_SUBSIDARY_VARIABLES(288)
     +                            + acq_SUBSIDARY_VARIABLES(389)
     +                            + acq_SUBSIDARY_VARIABLES(403)
     +                            + acq_SUBSIDARY_VARIABLES(411)
     +                            + acq_SUBSIDARY_VARIABLES(413)
     +                            + acq_SUBSIDARY_VARIABLES(414)
     +  + acq_SUBSIDARY_VARIABLES(637)
     +        + acq_SUBSIDARY_VARIABLES(713)
     +      + acq_SUBSIDARY_VARIABLES(905)
     +  + acq_SUBSIDARY_VARIABLES(906)
              acq_SUBSIDARY_VARIABLES(641) = acq_SUBSIDARY_VARIABLES(76)
     +      - acq_SUBSIDARY_VARIABLES(90) ! acq_ASSET_MINUS_LIABS
                  acq_SUBSIDARY_VARIABLES(642) = 0.
                TOTAL_SUB_PRIOR_INBALANCE = acq_SUBSIDARY_VARIABLES(641)
                  IF(ASSET_REPORTS_ACTIVE .AND.
     +                              PARENT_HAS_LINKED_SUBS) THEN
                     ASSET_CLASS_NAME = 'Subsidiary Totals'
                     CALL CLASS_SHAREHOLDER_VALUE_NA(
     +                                 acq_SUBSIDARY_VARIABLES)

                     acq_OUTPUT_CLASS_ID = -11000
                     acq_SUBSIDARY_VARIABLES(441) = acq_OUTPUT_CLASS_ID
              acq_SUBSIDARY_VARIABLES(641) = acq_SUBSIDARY_VARIABLES(76)
     +       -acq_SUBSIDARY_VARIABLES(90) ! acq_ASSET_MINUS_LIABS
                     acq_SUBSIDARY_VARIABLES(642) = 0.
                 TOTAL_SUB_PRIOR_INBALANCE=acq_SUBSIDARY_VARIABLES(641)
                     WRITE(INCOME_UNIT,REC=BASE_OUTPUT_RECORD)
     +                                       PRT_ENDPOINT(),
     +                                       FLOAT(get_BASE_YEAR()),
     +                                       ASSET_CLASS_NAME,
     +                                  acq_SUBSIDARY_VARIABLES
                     IF(FirstEnergy_Is_Active)
     +          CALL FE_PCA_LEGAL_REPORTS(FLOAT(get_BASE_YEAR()),
     +                                    ASSET_CLASS_NAME,
     +                                    BASE_OUTPUT_RECORD,
     +                                  acq_SUBSIDARY_VARIABLES)
                     BASE_OUTPUT_RECORD = BASE_OUTPUT_RECORD - 1
                  ENDIF
                  acq_SUBSIDARY_VARIABLES(61) = 0.
                  IF(REPORTING_CLASS_ID == -3) THEN
                    CALL STORE_REPORTING_VALUES(acq_SUBSIDARY_VARIABLES)
                     THIS_IS_REPORTING_CLASS = .FALSE.
                  ENDIF
                  IF(REPORTING_CLASS_ID == -4) THEN
                     CALL STORE_REPORTING_VALUES(acq_SBU_VARIABLES)
                     THIS_IS_REPORTING_CLASS = .FALSE.
                  ENDIF
               ENDIF
               IF(CLASS > 0 .AND. MASTER_CLASS_LIST(CLASS) == 0) CYCLE
               CALL EXISTING_ASSET_BY_INFO(CLASS,CLASS_GPV(2,CLASS_POS),
     +               CLASS_CUMULATIVE_DEPRECIATION(2,CLASS_POS))
               CALL DEBIT_BY_INFO(CLASS,
     +                NET_DD_BALANCE(2,CLASS_POS),
     +                DEFERRED_DEBITS_RATE_BASE(2,CLASS_POS),
     +                UNAMORTIZED_INTEREST_BALANCE(2,CLASS_POS),
     +                OTHER_DD_BALANCE(2,CLASS_POS),
     +                GOODWILL(2,CLASS_POS),
     +                acq_CLASS_REGULATORY_ASSETS,
     +                acq_FASB_109,
     +                acq_FASB_133,
     +               UNAMORTIZED_ISSUE_EXP_BALANCE(2,CLASS_POS))
               CALL DEFERRED_CREDITS_BY_INFO(CLASS,
     +             DEFERRED_CREDITS_IN_RATE_BASE(2,CLASS_POS),
     +             OTHER_DEFERRED_CREDITS_BAL(2,CLASS_POS),
     +             REGULATORY_DEFERRED_CREDITS_BAL(2,CLASS_POS),
     +             GAIN_ON_REAQUIRED_DEBT_BAL(2,CLASS_POS),
     +             DEFERRED_GAIN_FROM_SALES(2,CLASS_POS))
               CALL DEBT_BY_ISSUE_EXP_BAL(CLASS,
     +                         PS_ISSUING_BAL,
     +                         LTD_ISSUING_BAL,
     +                         DEBT_FILE_INVESTMENTS(CLASS_POS),
     +                         NOTES_RECEIVABLE(CLASS_POS),
     +                         NOTES_PAYABLE(CLASS_POS),
     +                         acq_CURRENT_LTD_RETIREMENTS)
               CALL DEBT_COMMON_STOCK_BY_INFO(CLASS,
     +                           DEBT_COMMON_STOCK_BALANCE,
     +                           DEBT_COMMON_SHARES_OUTSTANDING,
     +                           CS_ISSUE_EXP_BAL)
               DEBT_FILE_UNAMORT_ISS_EXP_BAL(CLASS_POS)=CS_ISSUE_EXP_BAL
     +                                         + PS_ISSUING_BAL

               DEBT_FILE_UNAMORT_INTR_BAL(CLASS_POS) = LTD_ISSUING_BAL
               NET_DD_BALANCE(2,CLASS_POS) = NET_DD_BALANCE(2,CLASS_POS)
     +                + DEBT_FILE_UNAMORT_ISS_EXP_BAL(CLASS_POS)
     +                + DEBT_FILE_UNAMORT_INTR_BAL(CLASS_POS)

               CALL NUCLEAR_FUEL_BY_INFO(CLASS,
     +                          CLASS_NET_NF_VALUE(2,CLASS_POS),
     +                          NUC_FUEL_RATE_BASE(2,CLASS_POS),
     +                          NFIS(2,CLASS_POS))
               CALL FUTURE_ASSET_BY_INFO(CLASS,CLASS_CWIP(2,CLASS_POS),
     +                           CWIP_IN_RATE_BASE(2,CLASS_POS))

C              IF(DUKE_IS_ACTIVE) THEN
C                 NET_DD_BALANCE(2,CLASS_POS) =
C    +                                  NET_DD_BALANCE(2,CLASS_POS) +
C    +                                  CATAWBA_BY_DEBITS_BALANCE(CLASS)
C                 DEF_TAX_CR_BALANCE(2,CLASS_POS) =
C    +                                 DEF_TAX_CR_BALANCE(2,CLASS_POS) +
C    +                                 CATAWBA_BY_DEF_TAX_BALANCE(CLASS)
C              ENDIF
               WRITE(STR_CLASS_NUM,'(I4)') CLASS-1
               IF(CLASS == 0 .AND. SUBS_ACTIVE_FOR_REPORTING) THEN
                  ASSET_CLASS_NAME =
     +                   trim(CLASS_NAME(CLASS_POS))//' (Con)'
               ELSEIF(PARENT_CLASS .AND. SUBS_ACTIVE_FOR_REPORTING) THEN
                  ASSET_CLASS_NAME =
     +              trim(CLASS_NAME(CLASS_POS))//STR_CLASS_NUM
     +                                           //' (Parent)'
               ELSEIF(trim(CLASS_NAME(CLASS_POS)) /= ' ')THEN
                  ASSET_CLASS_NAME = trim(CLASS_NAME(CLASS_POS))
     +                                           //STR_CLASS_NUM
               ELSE
                  ASSET_CLASS_NAME = 'Class '//STR_CLASS_NUM
               ENDIF
               WRITE(STR_CLASS_NUM,'(I2)') CLASS_LEVEL
               IF(CLASS_TYPE(CLASS_POS) == SBU) THEN
                  ASSET_CLASS_NAME=trim(ASSET_CLASS_NAME)//' (SBU)'//
     +                                             STR_CLASS_NUM
                  acq_SBU_UNAMORT_DEBIT_INTEREST_BAL =
     +                 acq_SBU_UNAMORT_DEBIT_INTEREST_BAL +
     +                 UNAMORTIZED_INTEREST_BALANCE(2,CLASS_POS)
                  acq_SBU_UNAMORTIZED_ISSUE_EXPENSE_BAL =
     +                UNAMORTIZED_ISSUE_EXP_BALANCE(2,CLASS_POS)
     +                + acq_SBU_UNAMORTIZED_ISSUE_EXPENSE_BAL! 339

               ELSEIF(SUBSIDIARY_CLASS) THEN
                  ASSET_CLASS_NAME=trim(ASSET_CLASS_NAME)//' (Sub)'//
     +                                             STR_CLASS_NUM
               ELSEIF(CLASS_TYPE(CLASS_POS) == REGULATED_GROUP) THEN
                  ASSET_CLASS_NAME=trim(ASSET_CLASS_NAME)//' (Reg)'//
     +                                             STR_CLASS_NUM
               ENDIF

               acq_SBU_VARIABLES(0:VARS_2_PASS) =
     +                 LEVEL_SUMATION(0:VARS_2_PASS,CLASS_LEVEL)
               LEVEL_SUMATION(0:VARS_2_PASS,CLASS_LEVEL) = 0.

               BY_ADJUSTMENT_2_ECONOMIC_ASSETS(CLASS_POS) =
     +                BY_ADJUSTMENT_2_ECONOMIC_ASSETS(CLASS_POS)
     +                + acq_SBU_VARIABLES(262)
               CLASS_ADDENDUM_2_RATE_BASE(CLASS_POS) =
     +                     CLASS_ADDENDUM_2_RATE_BASE(CLASS_POS)
     +                     + acq_SBU_VARIABLES(145)
               DEFERRED_DEBITS_RATE_BASE(2,CLASS_POS) =
     +                    DEFERRED_DEBITS_RATE_BASE(2,CLASS_POS)
     +                    + acq_SBU_VARIABLES(146)
               UNAMORTIZED_INTEREST_BALANCE(2,CLASS_POS) =
     +                 UNAMORTIZED_INTEREST_BALANCE(2,CLASS_POS)
     +                 + acq_SBU_UNAMORT_DEBIT_INTEREST_BAL
               UNAMORTIZED_ISSUE_EXP_BALANCE(2,CLASS_POS) =
     +                UNAMORTIZED_ISSUE_EXP_BALANCE(2,CLASS_POS)
     +                + acq_SBU_UNAMORTIZED_ISSUE_EXPENSE_BAL! 339
               acq_CLASS_UNAMORTIZED_ISSUE_EXP_BALANCE =
     +                UNAMORTIZED_ISSUE_EXP_BALANCE(2,CLASS_POS)
               UNAMORT_DEBIT_ISS_EXPENSE_BAL =
     +                 DEBIT_FILE_UNAMORT_ISS_EXP_BAL(CLASS_POS)
               UNAMORT_DEBT_ISS_EXPENSE_BAL =
     +                  DEBT_FILE_UNAMORT_ISS_EXP_BAL(CLASS_POS)
               acq_UNAMORT_DEBT_INTEREST_BAL =
     +                     DEBT_FILE_UNAMORT_INTR_BAL(CLASS_POS)
               acq_UNAMORT_DEBIT_INTEREST_BAL =
     +                 UNAMORTIZED_INTEREST_BALANCE(2,CLASS_POS)
               acq_CLASS_UNAMORTIZED_INTEREST_BAL =
     +                              acq_UNAMORT_DEBT_INTEREST_BAL
     +                              + acq_UNAMORT_DEBIT_INTEREST_BAL
               IF(CLASS_TYPE(CLASS_POS) /= SBU .AND.
     + CLASS_TYPE(CLASS_POS) /= REGULATED_GROUP) THEN ! PARENT OR SUB
                  CALL SBU_2_PARENT_ADJUSTMENTS(CLASS_POS,.TRUE.)
               ELSE
                  CALL SBU_2_PARENT_ADJUSTMENTS(CLASS_POS,.TRUE.)
               ENDIF
               PARENT_SUB_CIAC_BALANCE(CLASS_POS) =
     +                                 CIAC_BALANCE(2,CLASS_POS)


               IF(CLASS_TYPE(CLASS_POS) == SUBSIDIARY .AND.
     +                         .NOT. DONT_TALLY_THIS_CLASS) THEN
                  UNMODELLED_SUBS_OWNED_BY_SUBS =
     +                 UNMODELLED_SUBS_OWNED_BY_SUBS
     +                 + INVESTMENT_IN_SUBSIDIARIES(2,CLASS_POS)
               ELSE

               ENDIF
               PLANT_IN_SERVICE_RATE_BASE(2,CLASS_POS) =
     +        CLASS_GPV(2,CLASS_POS)-
     +                CLASS_CUMULATIVE_DEPRECIATION(2,CLASS_POS)

               acq_UNAMORT_DEBT_INTEREST_BAL =
     +                     DEBT_FILE_UNAMORT_INTR_BAL(CLASS_POS)
               acq_UNAMORT_DEBIT_INTEREST_BAL =
     +                 UNAMORTIZED_INTEREST_BALANCE(2,CLASS_POS)
               UNAMORT_DEBT_ISS_EXPENSE_BAL =
     +                  DEBT_FILE_UNAMORT_ISS_EXP_BAL(CLASS_POS)
               RATE_BASE_loc(2,CLASS_POS) =
     +          PLANT_IN_SERVICE_RATE_BASE(2,CLASS_POS)
     +          + DEFERRED_DEBITS_RATE_BASE(2,CLASS_POS)
     +          - DEFERRED_CREDITS_IN_RATE_BASE(2,CLASS_POS)
     +          + NUC_FUEL_RATE_BASE(2,CLASS_POS)
     +          + CWIP_IN_RATE_BASE(2,CLASS_POS)
     +          + NUC_DECOM_RATE_BASE(2,CLASS_POS)
     +          + RB_INCLUDE_DEFERRED_TAX_DR(2,CLASS_POS)
     +          + RB_INCLUDE_DEFERRED_REVENUES(2,CLASS_POS)
     +          - CUM_DEF_TAX_RATEBASE(2,CLASS_POS)
     +          - CUM_ITC_DEF_RATEBASE(2,CLASS_POS)
     +          - CIAC_RATE_BASE(2,CLASS_POS)
     +          - RB_EXCLUDED_PENSION_LIABILITY(2,CLASS_POS)
     +- RB_EXCLUDED_DEFERRED_ASSET_GAIN(2,CLASS_POS)
     +          - RB_EXCLUDE_ACCRUED_VACATION_PAY(2,CLASS_POS)
     +          - RB_EXCLUDED_STORM_RESERVE(2,CLASS_POS)
     +          + ASSET_NEC_IN_RATE_BASE(2,CLASS_POS)
               NET_UTILITY_PLANT(2,CLASS_POS) = CLASS_GPV(2,CLASS_POS) +
     +              CLASS_CWIP(2,CLASS_POS) -
     +              CLASS_CUMULATIVE_DEPRECIATION(2,CLASS_POS) +
     +              CLASS_NET_NF_VALUE(2,CLASS_POS)
               acq_VARIABLE(53) = COMMON_SHARES(2,CLASS_POS)
               acq_VARIABLE(299) = COMMON_SHARES(2,CLASS_POS)
               acq_VARIABLE(63) = CLASS_GPV(2,CLASS_POS)
               acq_VARIABLE(64) = CLASS_CWIP(2,CLASS_POS)
               acq_VARIABLE(65) = CLASS_GPV(2,CLASS_POS) +
     +                CLASS_CWIP(2,CLASS_POS)
           acq_VARIABLE(66) = CLASS_CUMULATIVE_DEPRECIATION(2,CLASS_POS)
               acq_VARIABLE(67) = CLASS_NET_NF_VALUE(2,CLASS_POS)
               acq_VARIABLE(68) = NET_UTILITY_PLANT(2,CLASS_POS)
               acq_VARIABLE(69) = OTHER_ASSETS(2,CLASS_POS)
               acq_VARIABLE(390) = ACCOUNTS_RECEIVABLE(CLASS_POS)
               acq_VARIABLE(391) = FUEL_INVENTORY(CLASS_POS)
               acq_VARIABLE(469) = CLASS_MATERIALS_N_SUPPLIES(CLASS_POS)
               acq_VARIABLE(468) = CLASS_GAS_STORAGE(CLASS_POS)
              acq_VARIABLE(467) = CLASS_DEFERRED_PURCHASE_GAS(CLASS_POS)
               IF(PARENT_CLASS) THEN
                  INVESTMENT_IN_SUBSIDIARIES(2,CLASS_POS) =
     +                   INVESTMENT_IN_SUBSIDIARIES(2,CLASS_POS)
     +                   + FIRST_LEVEL_SUB_COMMON_EQUITY
     +                   + FIRST_LEVEL_SUB_EARNINGS
               ELSE
                  INVESTMENT_IN_SUBSIDIARIES(2,CLASS_POS) =
     +                   INVESTMENT_IN_SUBSIDIARIES(2,CLASS_POS)
     +                   + SUB_INVESTMENT_IN_SUBS(CLASS_LEVEL)
                  SUB_INVESTMENT_IN_SUBS(CLASS_LEVEL) = 0.
               ENDIF
              acq_VARIABLE(91) = INVESTMENT_IN_SUBSIDIARIES(2,CLASS_POS)
               acq_VARIABLE(92) = CAPITIALZIED_LEASES(2,CLASS_POS)
               acq_VARIABLE(70) = NUC_DECOM_FUND_BAL(2,CLASS_POS)
               acq_VARIABLE(71) = NET_DD_BALANCE(2,CLASS_POS)
               acq_VARIABLE(466) = OTHER_DD_BALANCE(2,CLASS_POS)
               acq_VARIABLE(462) = GOODWILL(2,CLASS_POS)
               acq_VARIABLE(72) = CUM_DEF_REVENUES(2,CLASS_POS)
               acq_VARIABLE(73) = CUMTXNORM(2,CLASS_POS)
               acq_VARIABLE(74) = LIQUID_INVESTMENTS(2,CLASS_POS)
             acq_VARIABLE(286) = POST_RETIREMENT_MEDICAL_FUND(CLASS_POS)
               acq_VARIABLE(289) = LONG_TERM_INVESTMENTS(CLASS_POS) +
     +                 DEBT_FILE_INVESTMENTS(CLASS_POS)
               OPENING_CASH_BALANCES(CLASS_POS) =
     +                        LIQUID_INVESTMENTS(2,CLASS_POS)
     +                      + LONG_TERM_INVESTMENTS(CLASS_POS)
     +                      + DEBT_FILE_INVESTMENTS(CLASS_POS)
               acq_VARIABLE(402) = NOTES_RECEIVABLE(CLASS_POS)
               acq_VARIABLE(410) = DEFERRED_PURCHASE_POWER(2,CLASS_POS)

               acq_CLASS_DEFERRED_FUEL_BALANCE =
     +          DEFERRED_FUEL_BALANCE(CLASS_POS) ! VARIABLE(392)
     
               acq_CLASS_FASB87_BALANCE =
     +                      FASB_87_INTANGIBLE_ASSETS(CLASS_POS)
              acq_VARIABLE(75) = WCCUM(2,CLASS_POS) + LINEC(2,CLASS_POS)
               acq_VARIABLE(76) = NET_UTILITY_PLANT(2,CLASS_POS)
     +                + OTHER_ASSETS(2,CLASS_POS)
     +                + INVESTMENT_IN_SUBSIDIARIES(2,CLASS_POS)
     +                + CAPITIALZIED_LEASES(2,CLASS_POS)
     +                + NUC_DECOM_FUND_BAL(2,CLASS_POS)
     +                + NET_DD_BALANCE(2,CLASS_POS)
     +                + acq_CLASS_FASB87_BALANCE
     +                + CUM_DEF_REVENUES(2,CLASS_POS)
     +                + CUMTXNORM(2,CLASS_POS)
     +                + LIQUID_INVESTMENTS(2,CLASS_POS)
     +                + POST_RETIREMENT_MEDICAL_FUND(CLASS_POS)
     +                + NOTES_RECEIVABLE(CLASS_POS)
     +                + LONG_TERM_INVESTMENTS(CLASS_POS)
     +                + DEBT_FILE_INVESTMENTS(CLASS_POS)
     +                + WCCUM(2,CLASS_POS)
     +                + LINEC(2,CLASS_POS)
     +                + ACCOUNTS_RECEIVABLE(CLASS_POS)
     +                + FUEL_INVENTORY(CLASS_POS)
     +                + DEFERRED_PURCHASE_POWER(2,CLASS_POS)
     +                + acq_CLASS_DEFERRED_FUEL_BALANCE
     +                + CLASS_MATERIALS_N_SUPPLIES(CLASS_POS)
     +                + CLASS_GAS_STORAGE(CLASS_POS)
     +                + CLASS_DEFERRED_PURCHASE_GAS(CLASS_POS)
     +                + acq_VARIABLE(636) ! NET ARO ASSET VALUE

     
     
               acq_VARIABLE(77) = COMMON_STOCK(2,CLASS_POS)
               acq_VARIABLE(78) = REARNC(2,CLASS_POS)
               acq_VARIABLE(79) = COMMON_EQUITY(2,CLASS_POS)
                             

               acq_CLASS_OCI_BALANCE =
     +     OTHER_COMPREHENSIVE_INCOME_BALANCE(CLASS_POS)  ! 730
               acq_TOTAL_EQUITY_WITH_OCI = acq_CLASS_OCI_BALANCE ! 731
     +                         + COMMON_EQUITY(2,CLASS_POS)
        call write_trace_real(file_trace_aca, "acq_tewOCI", 
     + acq_TOTAL_EQUITY_WITH_OCI)
     
               acq_VARIABLE(80) = PREFERRED_STOCK(2,CLASS_POS)
               acq_VARIABLE(81) = LONG_TERM_DEBT(2,CLASS_POS)
               acq_VARIABLE(82) = COMMON_EQUITY(2,CLASS_POS)
     +                + PREFERRED_STOCK(2,CLASS_POS)
     +                + LONG_TERM_DEBT(2,CLASS_POS)
     +                + acq_CLASS_OCI_BALANCE
       call write_trace_real(file_trace_aca, "acq_VARIABLE(82)", 
     + acq_VARIABLE(82))
     
               acq_TOTAL_CAPITIAL_WITH_OCI = ACQ_TOTAL_CAPITIAL_BAL
               acq_VARIABLE(83) = OTHER_LT_LIABILITY(2,CLASS_POS)
             acq_VARIABLE(637) = FASB143_LT_LIABILITY_VALUE(2,CLASS_POS)
     +    + BALANCE_SHEET_ROLLUPS(2,aro_liabilities,CLASS_LEVEL)

               acq_VARIABLE(403) = NOTES_PAYABLE(CLASS_POS)
               acq_VARIABLE(84) = SHORT_TERM_DEBT(2,CLASS_POS)
               acq_VARIABLE(85) = CUSTOMER_DEPOSITS_BAL(2,CLASS_POS)
               acq_VARIABLE(86) = CIAC_BALANCE(2,CLASS_POS)
               acq_VARIABLE(87) = DEF_TAX_CR_BALANCE(2,CLASS_POS)
               acq_VARIABLE(88) = DEF_ITC_BALANCE(2,CLASS_POS)
             acq_VARIABLE(287) = POST_RETIREMENT_MED_PAYABLE(CLASS_POS)
               acq_VARIABLE(288) = NUC_DECOM_FUND_LIABILITY(CLASS_POS)
               acq_VARIABLE(389) = ACCOUNTS_PAYABLE(CLASS_POS)
               acq_VARIABLE(411) = PENSION_LIABILITY(2,CLASS_POS)
               acq_VARIABLE(412) = DEFERRED_GAIN_FROM_SALES(2,CLASS_POS)
               acq_VARIABLE(413) = STORM_RESERVE_BALANCE(2,CLASS_POS)
               acq_VARIABLE(905) = ExecBenefitsBalance(2,CLASS_POS)
               acq_VARIABLE(906) = IncentiveCompBalance(2,CLASS_POS)
           acq_VARIABLE(414) = ACCRUED_VACATION_PAY_BALANCE(2,CLASS_POS)
               acq_VARIABLE(89) = LINEC(2,CLASS_POS)
               acq_REGULATORY_DEFERRED_CREDITS_BAL_EOY =
     +    REGULATORY_DEFERRED_CREDITS_BAL(2,CLASS_POS)
     +    + BALANCE_SHEET_ROLLUPS(2,Regulatory_Deferred_Credits,
     +                                              CLASS_LEVEL)
               acq_OTHER_DEFERRED_CREDITS_BAL_EOY =
     +         OTHER_DEFERRED_CREDITS_BAL(2,CLASS_POS)
     +         + BALANCE_SHEET_ROLLUPS(2,Other_Deferred_Credits,
     +                                              CLASS_LEVEL)
               acq_GAIN_ON_REAQUIRED_DEBT_BAL_EOY =
     +            GAIN_ON_REAQUIRED_DEBT_BAL(2,CLASS_POS)
     +            + BALANCE_SHEET_ROLLUPS(2,Reaquired_Debt_Gain,
     +                                              CLASS_LEVEL)
          acq_TOTAL_DEFERRED_CREDITS_BAL = ! 713
     +               DEFERRED_GAIN_FROM_SALES(2,CLASS_POS) ! 412
     +               + CIAC_BALANCE(2,CLASS_POS)           ! 86
     +               + DEF_TAX_CR_BALANCE(2,CLASS_POS)     ! 87
     +               + DEF_ITC_BALANCE(2,CLASS_POS)        ! 88
     +              + acq_OTHER_DEFERRED_CREDITS_BAL_EOY      ! 712
     +            + acq_REGULATORY_DEFERRED_CREDITS_BAL_EOY ! 711
     +              + acq_GAIN_ON_REAQUIRED_DEBT_BAL_EOY      ! 710

               CONSOLD_BOY_OTHER_DEFERRED_CREDITS =
     +                           acq_SUBSIDARY_VARIABLES(712)
               CONSOLD_BOY_REGULATORY_DEFERRED_CREDITS =
     +                             acq_SUBSIDARY_VARIABLES(711)
               CONSOLD_BOY_GAIN_ON_REAQUIRED_DEBT =
     +                            acq_SUBSIDARY_VARIABLES(710)
               acq_VARIABLE(90) = REARNC(2,CLASS_POS)
     +               + COMMON_STOCK(2,CLASS_POS)
     +               + acq_CLASS_OCI_BALANCE
     +               + PREFERRED_STOCK(2,CLASS_POS)
     +               + LONG_TERM_DEBT(2,CLASS_POS)
     +               + NOTES_PAYABLE(CLASS_POS)
     +               + OTHER_LT_LIABILITY(2,CLASS_POS)
     +               + acq_VARIABLE(637) ! NET ARO LIAB VALUE
     +               + SHORT_TERM_DEBT(2,CLASS_POS)
     +               + CUSTOMER_DEPOSITS_BAL(2,CLASS_POS)
     +               + POST_RETIREMENT_MED_PAYABLE(CLASS_POS)
     +               + NUC_DECOM_FUND_LIABILITY(CLASS_POS)
     +               + ACCOUNTS_PAYABLE(CLASS_POS)
     +               + PENSION_LIABILITY(2,CLASS_POS)
     +               + STORM_RESERVE_BALANCE(2,CLASS_POS)
     +               + ExecBenefitsBalance(2,CLASS_POS)
     +               + IncentiveCompBalance(2,CLASS_POS)
     +               + ACCRUED_VACATION_PAY_BALANCE(2,CLASS_POS)
     +               + acq_TOTAL_DEFERRED_CREDITS_BAL
     +               + LINEC(2,CLASS_POS)
             acq_ASSET_MINUS_LIABS = acq_VARIABLE(76) - acq_VARIABLE(90)
               acq_ANNUAL_CHANGE_ASSET_MINUS_LIABS = 0.
               CLASS_PRIOR_INBALANCE(CLASS_POS) = acq_ASSET_MINUS_LIABS
            acq_LTD_BALANCE_WO_CURRENT_LTD = LONG_TERM_DEBT(2,CLASS_POS)
     +                              - acq_CURRENT_LTD_RETIREMENTS
       acq_TOTAL_CAPITIAL_BAL_WO_CURRENT_LTD = ACQ_TOTAL_CAPITIAL_BAL
     +                                 - acq_CURRENT_LTD_RETIREMENTS


C RATE BASE STUFF

               acq_VARIABLE(62)  = RATE_BASE_loc(2,CLASS_POS)
     +                 + CLASS_ADDENDUM_2_RATE_BASE(CLASS_POS)
             acq_VARIABLE(143) = PLANT_IN_SERVICE_RATE_BASE(2,CLASS_POS)
               acq_VARIABLE(144) = CUM_DEF_TAX_RATEBASE(2,CLASS_POS)
               acq_VARIABLE(145) = CLASS_ADDENDUM_2_RATE_BASE(CLASS_POS)
             acq_VARIABLE(146) = DEFERRED_DEBITS_RATE_BASE(2,CLASS_POS)
               acq_VARIABLE(147) = NUC_FUEL_RATE_BASE(2,CLASS_POS)
               acq_VARIABLE(369) = NUC_FUEL_RATE_BASE(2,CLASS_POS)
               acq_VARIABLE(254) = NF_IN_PROCESS(2,CLASS_POS)
               acq_VARIABLE(148) = CWIP_IN_RATE_BASE(2,CLASS_POS)
               acq_VARIABLE(370) = CWIP_IN_RATE_BASE(2,CLASS_POS)
               acq_VARIABLE(149) = CUM_ITC_DEF_RATEBASE(2,CLASS_POS)
               acq_VARIABLE(150) = NUC_DECOM_RATE_BASE(2,CLASS_POS)
               acq_VARIABLE(151) = CIAC_RATE_BASE(2,CLASS_POS)
               acq_VARIABLE(152) = ASSET_NEC_IN_RATE_BASE(2,CLASS_POS)
            acq_VARIABLE(153)=CAPITIALIZED_LEASES_RATE_BASE(2,CLASS_POS)
             acq_VARIABLE(415) = RB_INCLUDE_DEFERRED_TAX_DR(2,CLASS_POS)
           acq_VARIABLE(416) = RB_INCLUDE_DEFERRED_REVENUES(2,CLASS_POS)
            acq_VARIABLE(417)=RB_EXCLUDED_PENSION_LIABILITY(2,CLASS_POS)
               acq_VARIABLE(418) =
     +  RB_EXCLUDED_DEFERRED_ASSET_GAIN(2,CLASS_POS)
              acq_VARIABLE(419) = RB_EXCLUDED_STORM_RESERVE(2,CLASS_POS)
               acq_VARIABLE(420) =
     +              RB_EXCLUDE_ACCRUED_VACATION_PAY(2,CLASS_POS)
C BASE YEAR OPERATING_ASSETS_YEAR_END
               OPERATING_ASSETS_YEAR_END(CLASS_POS) =
     +                NET_UTILITY_PLANT(2,CLASS_POS) +
     +                WCCUM(2,CLASS_POS) -
     +                DEF_TAX_CR_BALANCE(2,CLASS_POS) +
     +                BY_ADJUSTMENT_2_ECONOMIC_ASSETS(CLASS_POS)
               acq_VARIABLE(261) = WCCUM(2,CLASS_POS)
            acq_VARIABLE(262)=BY_ADJUSTMENT_2_ECONOMIC_ASSETS(CLASS_POS)
               acq_VARIABLE(263) = OPERATING_ASSETS_YEAR_END(CLASS_POS)

               IF(CLASS_LEVEL >= 0) THEN

                  IF(CLASS_TYPE(CLASS_POS) == SBU .OR.
     +            CLASS_TYPE(CLASS_POS) == REGULATED_GROUP) THEN
                     IF(.NOT. DONT_TALLY_THIS_CLASS)
     +             CALL TALLY_RESULTS_INFO(VARS_2_PASS,
     +                          acq_VARIABLE,
     +                          LEVEL_SUMATION(0,CLASS_LEVEL-1))
                     LEVEL_SUMATION(89,CLASS_LEVEL-1) = 0.  ! LIAB NEC
                     LEVEL_SUMATION(75,CLASS_LEVEL-1) = 0.  ! ASSET NEC

                     IF(.NOT. DONT_TALLY_THIS_CLASS)
     +              CALL TALLY_RESULTS_INFO(VARS_2_PASS,
     +                           acq_VARIABLE,acq_SBU_VARIABLES)
                     acq_SBU_VARIABLES(89) = 0. ! LIAB NEC
                     acq_SBU_VARIABLES(75) = 0. ! ASSET NEC
                  ELSEIF(CLASS_LEVEL >= 0) THEN
                     IF(CONSOLIDATING_CLASS(CLASS_POS)) THEN
                        IF(.NOT. DONT_TALLY_THIS_CLASS)
     +                 CALL SUB_CONSOLIDATING_ADJUSTMENTS(
     +                             VARS_2_PASS,
     +                     acq_VARIABLE,acq_SUBSIDARY_VARIABLES)
                     ELSE
                     IF(.NOT. DONT_TALLY_THIS_CLASS)
     +                CALL TALLY_RESULTS_INFO(VARS_2_PASS,
     +                     acq_VARIABLE,acq_SUBSIDARY_VARIABLES)
                     ENDIF
                     IF(.NOT. DONT_TALLY_THIS_CLASS) THEN
                        CONSLD_YEAR_END_OP_ASSETS =
     +                      CONSLD_YEAR_END_OP_ASSETS +
     +                      OPERATING_ASSETS_YEAR_END(CLASS_POS)
                        TOTAL_SUB_COMMON_EQUITY = acq_VARIABLE(77)
     +                                 + TOTAL_SUB_COMMON_EQUITY
                        TOTAL_SUB_RETAINED_EARNINGS = acq_VARIABLE(78)
     +                             + TOTAL_SUB_RETAINED_EARNINGS
                        TOTAL_SUB_OCI_EARNINGS = acq_VARIABLE(730)
     +                                  + TOTAL_SUB_OCI_EARNINGS
                        TOTAL_SUB_INVESTMENT = acq_VARIABLE(91)
     +                                 + TOTAL_SUB_INVESTMENT
                        IF(CLASS_LEVEL == 1) THEN
                       FIRST_LEVEL_SUB_COMMON_EQUITY = acq_VARIABLE(77)+
     +                             FIRST_LEVEL_SUB_COMMON_EQUITY
                           FIRST_LEVEL_SUB_EARNINGS =
     +                                  FIRST_LEVEL_SUB_EARNINGS
     +                    + acq_VARIABLE(78)  ! RETAINED BALANCE
     +                      + acq_VARIABLE(730) ! OCI BALANCE FE
                        FIRST_LEVEL_SUB_INVESTMENT = acq_VARIABLE(91) +
     +                                FIRST_LEVEL_SUB_INVESTMENT
                        ENDIF
                        IF(CLASS_LEVEL > 1) THEN
                           SUB_INVESTMENT_IN_SUBS(CLASS_LEVEL-1) =
     +                     SUB_INVESTMENT_IN_SUBS(CLASS_LEVEL-1)
     +                     + acq_VARIABLE(77)
     +                     + acq_VARIABLE(78)
     +                   + acq_VARIABLE(730) ! OCI BALANCE ! FE
                           SUB_INVESTMENT_IN_SUBS(CLASS_LEVEL) = 0.
                        ENDIF
                     ENDIF
                     IF(CLASS_LEVEL > 1) THEN
                           SUB_INVESTMENT_IN_SUBS(CLASS_LEVEL) = 0.
                     ENDIF
                  ENDIF
               ENDIF

               acq_VARIABLE(61) = NOT_AVAIL ! ACQ_RETURN_ON_RATEBASE

C BASE YEAR SHAREHOLDER VALUE

               CALL CLASS_SHAREHOLDER_VALUE_NA(acq_VARIABLE)
               IF(ASSET_REPORTS_ACTIVE .AND. (PARENT_CLASS .OR.
     +                            REPORT_CLASS(CLASS_POS))) THEN
                  acq_VARIABLE(641) = acq_VARIABLE(76)
     +                    - acq_VARIABLE(90) ! acq_ASSET_MINUS_LIABS
                  acq_VARIABLE(642) = 0.
                  CLASS_PRIOR_INBALANCE(CLASS_POS) = acq_VARIABLE(641)

                  IF(REPORT_ZEROS_4_CLASS(CLASS_POS) .AND.
     +              ACTIVATE_CLASS_IN_YEAR(CLASS_POS) > YR) THEN
                     acq_VARIABLE = 0.
                  ENDIF
                  acq_OUTPUT_CLASS_ID = CLASS - 1
                  WRITE(INCOME_UNIT,REC=BASE_OUTPUT_RECORD)
     +                                      PRT_ENDPOINT(),
     +                                      FLOAT(get_BASE_YEAR()),
     +                                      ASSET_CLASS_NAME,
     +                                      acq_VARIABLE
                  IF(FirstEnergy_Is_Active)
     +          CALL FE_PCA_LEGAL_REPORTS(FLOAT(get_BASE_YEAR()),
     +                                    ASSET_CLASS_NAME,
     +                                    BASE_OUTPUT_RECORD,
     +                                    acq_VARIABLE)
                  BASE_OUTPUT_RECORD = BASE_OUTPUT_RECORD - 1
               ENDIF
               CALL MOVE_BALANCE_SHEET_ITEMS()
               IF(THIS_IS_REPORTING_CLASS .OR.
     +       (PARENT_CLASS .AND. REPORTING_CLASS_ID == -1)) THEN
                  CALL STORE_REPORTING_VALUES(acq_VARIABLE)
                  THIS_IS_REPORTING_CLASS = .FALSE.
               ENDIF
               IF(PARENT_CLASS .AND. SUBS_ACTIVE) THEN
                  IF(NUM_OF_SUBSIDIARIES > 0) THEN
                   EXCLUDE_SUB_INVESTMENT = acq_SUBSIDARY_VARIABLES(91)
     +                         - UNMODELLED_SUBS_OWNED_BY_SUBS
     +                         - UNMODELLED_SUBS_OWNED_BY_PARENT

                  ELSE
                     EXCLUDE_SUB_INVESTMENT =
     +                         - UNMODELLED_SUBS_OWNED_BY_PARENT
                  ENDIF
                  acq_VARIABLE = 0.

C  GET ELIMINATION INFORMATION FOR THE BASE YEAR.

                  CALL EXISTING_ASSET_BY_INFO(ELIMINAITON_CLASS_ID_NUM,
     +                       CLASS_GPV(2,0),
     +                       CLASS_CUMULATIVE_DEPRECIATION(2,0))
                  CALL DEBIT_BY_INFO(ELIMINAITON_CLASS_ID_NUM,
     +                       NET_DD_BALANCE(2,0),
     +                       DEFERRED_DEBITS_RATE_BASE(2,0),
     +                       UNAMORTIZED_INTEREST_BALANCE(2,0),
     +                       OTHER_DD_BALANCE(2,0),
     +                       GOODWILL(2,0),
     +                       acq_CLASS_REGULATORY_ASSETS,
     +                       acq_FASB_109,
     +                       acq_FASB_133,
     +                       UNAMORTIZED_ISSUE_EXP_BALANCE(2,0))
                  CALL DEFERRED_CREDITS_BY_INFO(
     +                     ELIMINAITON_CLASS_ID_NUM,
     +                     DEFERRED_CREDITS_IN_RATE_BASE(2,0),
     +                     OTHER_DEFERRED_CREDITS_BAL(2,0),
     +                     REGULATORY_DEFERRED_CREDITS_BAL(2,0),
     +                     GAIN_ON_REAQUIRED_DEBT_BAL(2,0),
     +                     DEFERRED_GAIN_FROM_SALES(2,0))
                  CALL NUCLEAR_FUEL_BY_INFO(ELIMINAITON_CLASS_ID_NUM,
     +                          CLASS_NET_NF_VALUE(2,0),
     +                          NUC_FUEL_RATE_BASE(2,0),
     +                          NFIS(2,0))
                  CALL FUTURE_ASSET_BY_INFO(ELIMINAITON_CLASS_ID_NUM,
     +                                   CLASS_CWIP(2,0),
     +                                   CWIP_IN_RATE_BASE(2,0))
                  CALL DEBT_BASE_YEAR_ELIM(ELIMINAITON_CLASS_ID_NUM,
     +                             R_PREFERRED_STOCK_ISSUED,
     +                             R_LONG_TERM_DEBT_ISSUED,
     +                             R_INVESTMENT_IN_AFILLIATES,
     +                             R_LOANS_TO_AFILLIATES,
     +                             PS_PREM_BAL,
     +                             LTD_PREM_BAL,
     +                             PS_ISSUING_BAL,
     +                             LTD_ISSUING_BAL,
     +                             DEBT_FILE_INVESTMENTS(0),
     +                             NOTES_RECEIVABLE(0),
     +                             NOTES_PAYABLE(0))
                  DEBT_FILE_UNAMORT_ISS_EXP_BAL(0) = PS_ISSUING_BAL
     +                                       + LTD_ISSUING_BAL
                  NET_DD_BALANCE(2,0) = NET_DD_BALANCE(2,0)
     +                        + DEBT_FILE_UNAMORT_ISS_EXP_BAL(0)
c     +                          + PS_ISSUING_BAL
c     +                          + LTD_ISSUING_BAL
C                  OTHER_DD_BALANCE(2,0) = OTHER_DD_BALANCE(2,0)
C     +                            + PS_ISSUING_BAL
C     +                            + LTD_ISSUING_BAL
                  acq_UNAMORT_DEBT_INTEREST_BAL =
     +                             DEBT_FILE_UNAMORT_INTR_BAL(0)
                  acq_UNAMORT_DEBIT_INTEREST_BAL =
     +                         UNAMORTIZED_INTEREST_BALANCE(2,0)
                  acq_CLASS_UNAMORTIZED_ISSUE_EXP_BALANCE =
     +                        UNAMORTIZED_ISSUE_EXP_BALANCE(2,0)
                  UNAMORT_DEBT_ISS_EXPENSE_BAL =
     +                          DEBT_FILE_UNAMORT_ISS_EXP_BAL(0)
                  acq_CLASS_UNAMORTIZED_INTEREST_BAL =
     +                               acq_UNAMORT_DEBIT_INTEREST_BAL
     +                               + acq_UNAMORT_DEBT_INTEREST_BAL

                  PLANT_IN_SERVICE_RATE_BASE(2,0) = CLASS_GPV(2,0) -
     +                        CLASS_CUMULATIVE_DEPRECIATION(2,0)
                  RATE_BASE_loc(2,0) =
     +                 PLANT_IN_SERVICE_RATE_BASE(2,0)
     +                 + DEFERRED_DEBITS_RATE_BASE(2,0)
     +                 - DEFERRED_CREDITS_IN_RATE_BASE(2,0)
     +                 + NUC_FUEL_RATE_BASE(2,0)
     +                 + CWIP_IN_RATE_BASE(2,0)
     +                 - NUC_DECOM_RATE_BASE(2,0)
     +                 - CUM_DEF_TAX_RATEBASE(2,0)
     +                 - CUM_ITC_DEF_RATEBASE(2,0)
     +                 - CIAC_RATE_BASE(2,0)
     +                 + ASSET_NEC_IN_RATE_BASE(2,0)
                  NET_UTILITY_PLANT(2,0) = CLASS_GPV(2,0)
     +                 + CLASS_CWIP(2,0)
     +                 - CLASS_CUMULATIVE_DEPRECIATION(2,0)
     +                 + CLASS_NET_NF_VALUE(2,0)

                  acq_VARIABLE(63) = CLASS_GPV(2,0)

                  acq_VARIABLE(64) = CLASS_CWIP(2,0)
                  acq_VARIABLE(65) = CLASS_GPV(2,0) + CLASS_CWIP(2,0)

                  acq_VARIABLE(66) = CLASS_CUMULATIVE_DEPRECIATION(2,0)
                  acq_VARIABLE(67) = CLASS_NET_NF_VALUE(2,0)
                  acq_VARIABLE(68) = NET_UTILITY_PLANT(2,0)

                  OTHER_ASSETS(2,0) = OTHER_ASSETS(2,0)
     +                        + R_INVESTMENT_IN_AFILLIATES
     +                        + R_LOANS_TO_AFILLIATES
                  acq_VARIABLE(69) = OTHER_ASSETS(2,0)
                  OTHER_COMPREHENSIVE_INCOME_BALANCE(0) =
     +                     OTHER_COMPREHENSIVE_INCOME_BALANCE(0)
     +                     + EXCLUDE_SUB_OCI_EARNINGS
                  INVESTMENT_IN_SUBSIDIARIES(2,0) =
     +                   INVESTMENT_IN_SUBSIDIARIES(2,0)
     +                   + EXCLUDE_SUB_INVESTMENT
                  acq_VARIABLE(91) = INVESTMENT_IN_SUBSIDIARIES(2,0)
                  acq_VARIABLE(92) = CAPITIALZIED_LEASES(2,0)
                  acq_VARIABLE(70) = NUC_DECOM_FUND_BAL(2,0)
                  acq_VARIABLE(71) = NET_DD_BALANCE(2,0)
                  acq_VARIABLE(466) = OTHER_DD_BALANCE(2,0)
                  acq_VARIABLE(462) = GOODWILL(2,0)
                  acq_VARIABLE(72) = CUM_DEF_REVENUES(2,0)
c                 CUMTXNORM(2,0) = CUMTXNORM(2,0) + ! removed 3/13/98
c    +                              EXCLUDE_SUB_TAX_DEFERRALS_DR
                  acq_VARIABLE(73) = CUMTXNORM(2,0)
                  acq_VARIABLE(74) = LIQUID_INVESTMENTS(2,0)
                  acq_VARIABLE(286) = POST_RETIREMENT_MEDICAL_FUND(0)
                  acq_VARIABLE(389) = ACCOUNTS_PAYABLE(0)
                  acq_VARIABLE(289) = LONG_TERM_INVESTMENTS(0) +
     +                    DEBT_FILE_INVESTMENTS(0)
                  OPENING_CASH_BALANCES(0) = LIQUID_INVESTMENTS(2,0)
     +                             + LONG_TERM_INVESTMENTS(0)
     +                             + DEBT_FILE_INVESTMENTS(0)
                  acq_VARIABLE(402) = NOTES_RECEIVABLE(0)
                  acq_VARIABLE(75) = WCCUM(2,0) + LINEC(2,0)
                  acq_VARIABLE(391) = FUEL_INVENTORY(0)
                  acq_VARIABLE(469) = CLASS_MATERIALS_N_SUPPLIES(0)
                  acq_VARIABLE(468) = CLASS_GAS_STORAGE(0)
                  acq_VARIABLE(467) = CLASS_DEFERRED_PURCHASE_GAS(0)

                   ! acq_VARIABLE(392)
        acq_CLASS_DEFERRED_FUEL_BALANCE = DEFERRED_FUEL_BALANCE(0)
                  acq_VARIABLE(410) = DEFERRED_PURCHASE_POWER(2,0)
                  acq_VARIABLE(636) = FASB143_NET_ASSET_VALUE(2,0)
                  acq_VARIABLE(76) = NET_UTILITY_PLANT(2,0)
     +                 + OTHER_ASSETS(2,0)
     +                 + INVESTMENT_IN_SUBSIDIARIES(2,0)
     +                 + CAPITIALZIED_LEASES(2,0)
     +                 + NUC_DECOM_FUND_BAL(2,0)
     +                 + NET_DD_BALANCE(2,0)
     +                 + acq_CLASS_DEFERRED_FUEL_BALANCE
     +                 + FUEL_INVENTORY(0)
     +                 + CUM_DEF_REVENUES(2,0)
     +                 + CUMTXNORM(2,0)
     +                 + NOTES_RECEIVABLE(0)
     +                 + LIQUID_INVESTMENTS(2,0)
     +                 + POST_RETIREMENT_MEDICAL_FUND(0)
     +                 + LONG_TERM_INVESTMENTS(0)
     +                 + DEBT_FILE_INVESTMENTS(0)
     +                 + DEFERRED_PURCHASE_POWER(2,0)
     +                 + ACCOUNTS_RECEIVABLE(0)
     +                 + WCCUM(2,0)
     +                 + LINEC(2,0)
     +                 + CLASS_MATERIALS_N_SUPPLIES(0)
     +                 + CLASS_GAS_STORAGE(0)
     +                 + CLASS_DEFERRED_PURCHASE_GAS(0)
     +                 + FASB143_NET_ASSET_VALUE(2,0)

                  COMMON_STOCK(2,0) = COMMON_STOCK(2,0)
     +                        + EXCLUDE_SUB_COMMON_EQUITY
                  REARNC(2,0) = REARNC(2,0)
     +                  + EXCLUDE_SUB_RETAINED_EARNINGS

                  acq_VARIABLE(77) = COMMON_STOCK(2,0)
                  acq_VARIABLE(78) =  REARNC(2,0)
                  COMMON_EQUITY(2,0) = REARNC(2,0) + COMMON_STOCK(2,0)
       call write_trace_real(file_trace_aca, "common_equity(2,0)",
     + COMMON_EQUITY(2,0))
                  acq_VARIABLE(79) = COMMON_EQUITY(2,0)
                  PREFERRED_STOCK(2,0) = PREFERRED_STOCK(2,0)
     +                           + SBU_PS_ELIM
     +                           + R_PREFERRED_STOCK_ISSUED
     +                         + PS_PREM_BAL ! - PS_ISSUING_BAL
                  acq_VARIABLE(80) = PREFERRED_STOCK(2,0)
                  LONG_TERM_DEBT(2,0) = LONG_TERM_DEBT(2,0)
     +                          + SBU_LTD_ELIM
     +                          + R_LONG_TERM_DEBT_ISSUED
     +                        + LTD_PREM_BAL ! - LTD_ISSUING_BAL
                  acq_VARIABLE(81) = LONG_TERM_DEBT(2,0)
                  acq_CLASS_OCI_BALANCE =
     +           OTHER_COMPREHENSIVE_INCOME_BALANCE(0)  ! 730
                  OTHER_COMPREHENSIVE_INCOME_BALANCE(0) =
     +                           acq_CLASS_OCI_BALANCE   ! FE ! 730
        acq_TOTAL_EQUITY_WITH_OCI = acq_CLASS_OCI_BALANCE ! 731
     +                            + COMMON_EQUITY(2,0)
                  acq_VARIABLE(82) = COMMON_EQUITY(2,0)
     +           + PREFERRED_STOCK(2,0)   ! NOTE THESE ARE
     +         + LONG_TERM_DEBT(2,0)    ! 1 NOT 2 UNTIL DB ELIM EXISTS
     +                   + acq_CLASS_OCI_BALANCE
                  acq_VARIABLE(83) = OTHER_LT_LIABILITY(2,0)
                  acq_VARIABLE(637) = FASB143_LT_LIABILITY_VALUE(2,0)
                  SHORT_TERM_DEBT(2,0)=SHORT_TERM_DEBT(2,0)+SBU_STD_ELIM
                  acq_VARIABLE(403) = NOTES_PAYABLE(0)
                  acq_VARIABLE(84) = SHORT_TERM_DEBT(2,0)
                  acq_VARIABLE(85) = CUSTOMER_DEPOSITS_BAL(2,0)
                  acq_VARIABLE(86) = CIAC_BALANCE(2,0)
                  acq_VARIABLE(87) = DEF_TAX_CR_BALANCE(2,0)
                  acq_VARIABLE(88) = DEF_ITC_BALANCE(2,0)

                  acq_VARIABLE(287) = POST_RETIREMENT_MED_PAYABLE(0)
                  acq_VARIABLE(288) = NUC_DECOM_FUND_LIABILITY(0)
                  acq_VARIABLE(390) = ACCOUNTS_RECEIVABLE(0)
                  acq_VARIABLE(411) = PENSION_LIABILITY(2,0)
                  acq_VARIABLE(412) = DEFERRED_GAIN_FROM_SALES(2,0)
                  acq_VARIABLE(413) = STORM_RESERVE_BALANCE(2,0)
                  acq_VARIABLE(905) = ExecBenefitsBalance(2,0)
                  acq_VARIABLE(906) = IncentiveCompBalance(2,0)
                  acq_VARIABLE(414) = ACCRUED_VACATION_PAY_BALANCE(2,0)
                  acq_VARIABLE(89) = LINEC(2,0)
        acq_VARIABLE(730) = OTHER_COMPREHENSIVE_INCOME_BALANCE(0)  ! 730
                  acq_VARIABLE(712) = OTHER_DEFERRED_CREDITS_BAL(2,0)
                acq_VARIABLE(711) = REGULATORY_DEFERRED_CREDITS_BAL(2,0)
                  acq_VARIABLE(710) = GAIN_ON_REAQUIRED_DEBT_BAL(2,0)
                  acq_TOTAL_DEFERRED_CREDITS_BAL =
     +              DEFERRED_GAIN_FROM_SALES(2,0)
     +              + CIAC_BALANCE(2,0)
     +              + DEF_TAX_CR_BALANCE(2,0)
     +              + DEF_ITC_BALANCE(2,0)
     +              + OTHER_DEFERRED_CREDITS_BAL(2,0)
     +              + REGULATORY_DEFERRED_CREDITS_BAL(2,0)
     +              + GAIN_ON_REAQUIRED_DEBT_BAL(2,0)
                  acq_VARIABLE(90) = REARNC(2,0)
     +                   + COMMON_STOCK(2,0)
     +                   + PREFERRED_STOCK(2,0)
     +                   + LONG_TERM_DEBT(2,0)
     +                   + acq_CLASS_OCI_BALANCE
     +                   + NOTES_PAYABLE(0)
     +                   + OTHER_LT_LIABILITY(2,0)
     +                   + FASB143_LT_LIABILITY_VALUE(2,0)
     +                   + SHORT_TERM_DEBT(2,0)
     +                   + CUSTOMER_DEPOSITS_BAL(2,0)
     +                   + POST_RETIREMENT_MED_PAYABLE(0)
     +                   + NUC_DECOM_FUND_LIABILITY(0)
     +                   + ACCOUNTS_PAYABLE(0)
     +                   + PENSION_LIABILITY(2,0)
     +                   + STORM_RESERVE_BALANCE(2,0)
     +                   + ExecBenefitsBalance(2,0)
     +                   + IncentiveCompBalance(2,0)
     +                   + ACCRUED_VACATION_PAY_BALANCE(2,0)
     +                   + acq_TOTAL_DEFERRED_CREDITS_BAL
     +                   + LINEC(2,0)

                  acq_VARIABLE(62)  = RATE_BASE_loc(2,0)
     +                    + CLASS_ADDENDUM_2_RATE_BASE(0)
                  acq_VARIABLE(143) = PLANT_IN_SERVICE_RATE_BASE(2,0)
                  acq_VARIABLE(144) = CUM_DEF_TAX_RATEBASE(2,0)
                  acq_VARIABLE(145) = CLASS_ADDENDUM_2_RATE_BASE(0)
                  acq_VARIABLE(146) = DEFERRED_DEBITS_RATE_BASE(2,0)
                  acq_VARIABLE(147) = NUC_FUEL_RATE_BASE(2,0)
                  acq_VARIABLE(369) = NUC_FUEL_RATE_BASE(2,0)
                  acq_VARIABLE(254) = NF_IN_PROCESS(2,0)
                  acq_VARIABLE(148) = CWIP_IN_RATE_BASE(2,0)
                  acq_VARIABLE(370) = CWIP_IN_RATE_BASE(2,0)
                  acq_VARIABLE(149) = CUM_ITC_DEF_RATEBASE(2,0)
                  acq_VARIABLE(150) = NUC_DECOM_RATE_BASE(2,0)
                  acq_VARIABLE(151) = CIAC_RATE_BASE(2,0)
                  acq_VARIABLE(152) = ASSET_NEC_IN_RATE_BASE(2,0)
                  acq_VARIABLE(153) = CAPITIALIZED_LEASES_RATE_BASE(2,0)

                  CALL INTRA_COMPANY_ADJUSTMENT(VARS_2_PASS,
     +                     acq_VARIABLE,acq_SUBSIDARY_VARIABLES)
                  acq_VARIABLE(61) = NOT_AVAIL ! ACQ_RETURN_ON_RATEBASE
                  acq_VARIABLE(299) = PARENT_AVERAGE_SHARES
                  acq_VARIABLE(53) = PARENT_YEAR_END_SHARES
                  acq_VARIABLE(742) = REARNC(2,0)
     +                   + COMMON_STOCK(2,0)
     +                   + PREFERRED_STOCK(2,0)
     +  + acq_VARIABLE(741) ! LONG_TERM_DEBT(2,0) WO CURRENT LTD
     +                   + acq_CLASS_OCI_BALANCE
                  CONSOLIDING_ADJ_RETN_EARN_BAL = acq_VARIABLE(78)
                  ASSET_CLASS_NAME = 'Consolidating Adjustments (-)'
                  IF(MONTHLY_MIDAS_ACTIVE)
     +               CALL MONTHLY_BOY_ELIMINATIONS(acq_VARIABLE)
                  IF(ASSET_REPORTS_ACTIVE) THEN
                     acq_OUTPUT_CLASS_ID = -2
                     CALL CONSOLIDATING_ADJS_NA(acq_VARIABLE)
                     acq_VARIABLE(641) = acq_VARIABLE(76)
     +                       - acq_VARIABLE(90)
                     acq_VARIABLE(642) = 0.
                     CONSOLIDATING_PRIOR_INBALANCE = acq_VARIABLE(641)

                     WRITE(INCOME_UNIT,REC=BASE_OUTPUT_RECORD)
     +                                         PRT_ENDPOINT(),
     +                                         FLOAT(get_BASE_YEAR()),
     +                                         ASSET_CLASS_NAME,
     +                                         acq_VARIABLE
                     IF(FirstEnergy_Is_Active)
     +             CALL FE_PCA_LEGAL_REPORTS(FLOAT(get_BASE_YEAR()),
     +                                       ASSET_CLASS_NAME,
     +                                       BASE_OUTPUT_RECORD,
     +                                       acq_VARIABLE)
                     BASE_OUTPUT_RECORD = BASE_OUTPUT_RECORD - 1
                  ENDIF

                  ASSET_CLASS_NAME =
     +                trim(PARENT_CLASS_NAME)//' Consolidated'
                  acq_SUBSIDARY_VARIABLES(61) = NOT_AVAIL
                  CALL CLASS_SHAREHOLDER_VALUE_NA(acq_VARIABLE)
              CONSOLID_RETAINED_EARNINGS_BAL=acq_SUBSIDARY_VARIABLES(78)
                  CONSOLID_OCI_EARNINGS_BAL=acq_SUBSIDARY_VARIABLES(730)
               CONSOLD_COMMON_EQUITY_BAL = acq_SUBSIDARY_VARIABLES(731)
               CONSOLD_BOY_DEFERRED_TAXES_DR=acq_SUBSIDARY_VARIABLES(73)
                  CONSOLD_BOY_NET_DEFERRED_DEBITS =
     +                              acq_SUBSIDARY_VARIABLES(71)
                  CONSOLD_BOY_CWIP = acq_SUBSIDARY_VARIABLES(64)
                  CONSOLD_BOY_OTHER_ASSETS = acq_SUBSIDARY_VARIABLES(69)
               CONSOLD_BOY_DEFERRED_TAXES_CR=acq_SUBSIDARY_VARIABLES(87)
               CONSOLD_BOY_CURRENT_ASSETS = acq_SUBSIDARY_VARIABLES(75)
               CONSOLD_BOY_OTHER_LT_LIABS =  acq_SUBSIDARY_VARIABLES(83)
              CONSOLD_BOY_ACCOUNTS_PAYABLE =acq_SUBSIDARY_VARIABLES(389)
              CONSOLD_BOY_ACCOUNTS_RECIABLE=acq_SUBSIDARY_VARIABLES(390)
              CONSOLD_BOY_RETAINED_EARNINGS=acq_SUBSIDARY_VARIABLES(78)
                  CONSOLD_BOY_SUB_INVESTMENT = 0.
              CONSOLIDATED_BOY_FUNDS_BALANCE=acq_SUBSIDARY_VARIABLES(74)
                  CONSOLIDATED_LTD_BALANCE_WO_CURRENT_LTD =
     +                             acq_SUBSIDARY_VARIABLES(741)
                  CONSOLIDATED_LTD_BALANCE = acq_SUBSIDARY_VARIABLES(81)
             acq_SUBSIDARY_VARIABLES(742) = acq_SUBSIDARY_VARIABLES(731)
     +                            + acq_SUBSIDARY_VARIABLES(80)
     + ! LONG_TERM_DEBT(2,0) WO CURRENT LTD
     +                           + acq_SUBSIDARY_VARIABLES(741)
                  IF(ASSET_REPORTS_ACTIVE) THEN
                     acq_OUTPUT_CLASS_ID = -1
              acq_SUBSIDARY_VARIABLES(641) = acq_SUBSIDARY_VARIABLES(76)
     +                              -acq_SUBSIDARY_VARIABLES(90)
                     acq_SUBSIDARY_VARIABLES(642) = 0.
                     CONSOLIDATED_PRIOR_INBALANCE =
     +                              acq_SUBSIDARY_VARIABLES(641)
                     acq_SUBSIDARY_VARIABLES(441) = acq_OUTPUT_CLASS_ID
                     WRITE(INCOME_UNIT,REC=BASE_OUTPUT_RECORD)
     +                                       PRT_ENDPOINT(),
     +                                       FLOAT(get_BASE_YEAR()),
     +                                       ASSET_CLASS_NAME,
     +                                   acq_SUBSIDARY_VARIABLES
                     IF(FirstEnergy_Is_Active)
     +            CALL FE_PCA_LEGAL_REPORTS(FLOAT(get_BASE_YEAR()),
     +                                      ASSET_CLASS_NAME,
     +                                      BASE_OUTPUT_RECORD,
     +                                 acq_SUBSIDARY_VARIABLES)
                     BASE_OUTPUT_RECORD = BASE_OUTPUT_RECORD - 1
                  ENDIF
                  IF(REPORTING_CLASS_ID == -2) THEN
                   CALL STORE_REPORTING_VALUES(acq_SUBSIDARY_VARIABLES)
                     THIS_IS_REPORTING_CLASS = .FALSE.
                  ENDIF
C MOVED ABOVE     BASE_OUTPUT_RECORD = BASE_OUTPUT_RECORD - 1
                  EXIT
               ENDIF
            ENDDO
         ENDIF
         SHARE_LEAD = 0.
         CS_DECLARATION_MONTH(1) = 3
         CS_DECLARATION_MONTH(2) = 6
         CS_DECLARATION_MONTH(3) = 9
         CS_DECLARATION_MONTH(4) = 12
         IF(MONTHLY_MIDAS_ACTIVE) THEN
            CALL M3_ALLOCATE_ARRAYS(MAX_LINKED_LEVEL,
     +                      NUMBER_OF_REPORTING_CLASSES,
     +                      MAX_CLASS_NUM,
     +                      NUM_OF_ACTIVE_CLASSES,
     +                      MASTER_CLASS_LIST,
     +                      PARENT_CASH_CS_DIVIDEND_PAYMENT,
     +                      OPENING_CASH_BALANCES,
     +                      CS_DECLARATION_MONTH,
     +                      SHARE_LEAD,
     +                      PARENT_CLASS_ID_NUM)
            CALL INIT_PRODUCTION_CASH_LAG()
         ENDIF

         DEALLOCATE(NUC_FUEL_RATE_BASE_AT,
     +      CWIP_IN_RATE_BASE_AT,
     +      OPENING_CASH_BALANCES)
         MODEL_ISSUED_DEBT_REPORT = DEBT_REPORT(REPORT_ALL_ACCOUNTS)
         CALL FLUSH(23487)
      RETURN

      ENTRY ASSET_CLASS_ANALYSIS(R_YEAR,WRITE_THE_RESULTS)
        aca_called=aca_called+1
        if(file_trace_aca==0) then
            file_trace_aca=open_trace("asset_class_analysis.trace", 
     +           rq_aca)
        end if

        call write_trace_message(file_trace_aca, "Args:")
        call write_trace_int2(file_trace_aca, "R_YEAR", R_YEAR)
        call write_trace_bool4(file_trace_aca, "Write Results", 
     + WRITE_THE_RESULTS)
        call write_trace_int4(file_trace_aca, "Callcount", aca_called)

       
! 3/24/98. GAT PER MARK.

         YR = R_YEAR
         ASSET_YR = YR + 1
         IF(yr+get_BASE_YEAR() == 2016) then
            yr = yr
         endif
         LAST_CLASS_LEVEL = -999
         VARS_2_PASS = acq_VARIABLE_NUMBER-INT2(1)
         CALL MG_LOCATE_WRITE(18,70,'Asset Classes',3,2)
         call write_trace_bool1(file_trace_aca, "AMEREN ACTIVE", 
     + AMEREN_IS_ACTIVE)
         call write_trace_bool1(file_trace_aca, "PACIFICORP_IS_ACTIVE",
     + PACIFICORP_IS_ACTIVE)
         
         IF(AMEREN_IS_ACTIVE .OR. PACIFICORP_IS_ACTIVE) THEN
C SPECIAL CODE FOR AMEREN 1/23/02
            LEVEL_MARKET_REVENUES = 0.
            LEVEL_FUEL_EXPENSE = 0.
            LEVEL_VARIABLE_EXPENSE = 0.
            TOTAL_AMEREN_MARKET_REVENUES = 0.
            TOTAL_AMEREN_FUEL_EXPENSE = 0.
            TOTAL_AMEREN_VARIABLE_EXPENSE = 0.
            DO CLASS_COUNTER = DEFINED_CLASSES,1,-1

               CLASS = DEFINED_CLASS_POINTER_LIST(CLASS_COUNTER)
               CLASS_LEVEL = CLASS_AT_LEVEL(CLASS_COUNTER)
               CLASS_POS = MASTER_CLASS_LIST(CLASS)
               IF(CLASS > 0 .AND. MASTER_CLASS_LIST(CLASS) == 0) CYCLE
               IF(YR >= YEAR_CLASS_DEACTIVATED(CLASS_POS) .AND.
     +              YEAR_CLASS_DEACTIVATED(CLASS_POS) > 0) cycle
               IF(LAST_CLASS_LEVEL /= CLASS_LEVEL) THEN
                  TOTAL_AMEREN_MARKET_REVENUES = LEVEL_MARKET_REVENUES
     +                            + TOTAL_AMEREN_MARKET_REVENUES
                  TOTAL_AMEREN_FUEL_EXPENSE = LEVEL_FUEL_EXPENSE
     +                               + TOTAL_AMEREN_FUEL_EXPENSE
                  TOTAL_AMEREN_VARIABLE_EXPENSE = LEVEL_VARIABLE_EXPENSE
     +                           + TOTAL_AMEREN_VARIABLE_EXPENSE
                  LEVEL_MARKET_REVENUES = 0.
                  LEVEL_FUEL_EXPENSE = 0.
                  LEVEL_VARIABLE_EXPENSE = 0.
               ENDIF
               DONT_TALLY_THIS_CLASS =
     +        ACTIVATE_CLASS_IN_YEAR(CLASS_POS) >= YR .AND.
     +                     ACTIVATE_CLASS_IN_YEAR(CLASS_POS) > 0
               IF(.NOT. DONT_TALLY_THIS_CLASS) THEN
                  VOID_INT2 = RETURN_AMEREN_CL_CLASS_EXPENSES(CLASS,
     +           CL_MARKET_REVENUES, 
     +    acq_WHOLESALE_FUEL_EXPENSE,
     +       acq_WHOLESALE_VOM_EXPENSE)

                  CALL READ_CLASS_RUN_SWITCHES(CLASS,YR,
     +                                    CLASS_TYPE(CLASS_POS))
                  LEVEL_MARKET_REVENUES = CL_MARKET_REVENUES
     +                            + LEVEL_MARKET_REVENUES
                  IF(.NOT. USE_BUDGET_FUEL_PURCHASE)
     +               LEVEL_FUEL_EXPENSE = acq_WHOLESALE_FUEL_EXPENSE
     +                                    + LEVEL_FUEL_EXPENSE
                  IF(.NOT.USE_BUDGET_VARIABLE_OM)
     +         LEVEL_VARIABLE_EXPENSE = acq_WHOLESALE_VOM_EXPENSE
     +                                  + LEVEL_VARIABLE_EXPENSE
               ENDIF
               LAST_CLASS_LEVEL = CLASS_LEVEL
            ENDDO
C END AMEREN CODE
         ENDIF
         call write_trace_int2(file_trace_aca, "YR", YR)
         
         ! USED BY AMEREN 12/03/01 MSG
         CALL SETUP_TRANSACT_TRANSFERS(YR,TOTAL_AMEREN_MARKET_REVENUES,
     +                         TOTAL_AMEREN_FUEL_EXPENSE,
     +                         TOTAL_AMEREN_VARIABLE_EXPENSE)
         ACCURAL_ACCOUNTING_ACTIVE = MONTHLY_MIDAS_ACTIVE
         APS_ACTIVE = APS_DQE()
         IF(globecom_YEAR <= LAST_AVAILABLE_MONTHLY_YEAR .AND.
     +                                MONTHLY_MIDAS_ACTIVE) THEN
            CALL RETURN_PARENT_CS_CARRY_OVER(
     +                          PARENT_CASH_CS_DIVIDEND_PAYMENT)
            IF(globecom_YEAR > 1) CALL SET_MONTHLY_PAYABLES(YR)
            VOID_REAL = MONTHLY_NON_INCOME_TAX_PROCS(MAX_LINKED_LEVEL)

            MAX_ITER = 25
         ELSE
            PARENT_CASH_CS_DIVIDEND_PAYMENT = 0.
            MAX_ITER = 25
         ENDIF
         ASSET_REPORTS_ACTIVE = WRITE_THE_RESULTS .AND.
     +                  ASSET_CLASS_REPORTS()
         IF(ASSET_REPORTS_ACTIVE .AND.
     +         .NOT. REPORT_HEADER_ACTIVE) THEN
            INCOME_UNIT = ASSET_CLASS_INCOME_HEADER(START_RECORD,
     +                                       acq_VARIABLE_NUMBER)
            REPORT_HEADER_ACTIVE = .TRUE.
         ENDIF
         IOU_UTILITY = UTILITY_TYPE() == 'I'
         IF(globecom_YEAR <= LAST_AVAILABLE_MONTHLY_YEAR .AND.
     +                                MONTHLY_MIDAS_ACTIVE) THEN
            CALL M3_SET_OUTPUT_RECORD()
         ENDIF
         IF(ASSET_REPORTS_ACTIVE) THEN
            IF(YR == 1) THEN
               IF(SUBS_ACTIVE_FOR_REPORTING) THEN
                  IF(PARENT_HAS_LINKED_SUBS .AND.
     +                              PARENT_HAS_LINKED_SBUS) THEN
                     OUTPUT_RCD_loc = START_RECORD +
     +                 INT(2*(NUMBER_OF_REPORTING_CLASSES+3)+1)
                  ELSEIF(PARENT_HAS_LINKED_SUBS .OR.
     +                              PARENT_HAS_LINKED_SBUS) THEN
                     OUTPUT_RCD_loc = START_RECORD +
     +                 INT(2*(NUMBER_OF_REPORTING_CLASSES+2)+1)
                  ELSE
                     OUTPUT_RCD_loc = START_RECORD +
     +                 INT(2*(NUMBER_OF_REPORTING_CLASSES+1)+1)
                  ENDIF
               ELSE
                  OUTPUT_RCD_loc = START_RECORD + 1
               ENDIF
            ELSE
               IF(SUBS_ACTIVE_FOR_REPORTING) THEN
                  IF(PARENT_HAS_LINKED_SUBS .AND.
     +                              PARENT_HAS_LINKED_SBUS) THEN
                     OUTPUT_RCD_loc = START_RECORD +
     +                       INT(NUMBER_OF_REPORTING_CLASSES+3)
                  ELSEIF(PARENT_HAS_LINKED_SUBS .OR.
     +                              PARENT_HAS_LINKED_SBUS) THEN
                     OUTPUT_RCD_loc = START_RECORD +
     +                       INT(NUMBER_OF_REPORTING_CLASSES+2)
                  ELSE
                     OUTPUT_RCD_loc = START_RECORD +
     +                       INT(NUMBER_OF_REPORTING_CLASSES+1)
                  ENDIF
               ELSE
                  OUTPUT_RCD_loc = START_RECORD
               ENDIF
            ENDIF
            START_RECORD = OUTPUT_RCD_loc + 1
         ENDIF

         IF(SUBS_ACTIVE_FOR_REPORTING) THEN
            REPORTING_CLASS_ID = REPORTING_ASSET_CLASS()
         ELSE
            !IF ONLY ONE CLASS THE PARENT GETS OUTPUTTED
            REPORTING_CLASS_ID = -1
         ENDIF

         CLASS_BORROWED_AFUDC_RATE = AFUDC_BORROWED_RATE()
      CALL RETURN_FED_TAX_RATES(YR,ns_class_parameters%FEDERAL_TAX_RATE)
         ns_class_parameters%FEDERAL_TAX_RATE=
     + STORE_FEDERAL_TAX_RATE(
     + ns_class_parameters%FEDERAL_TAX_RATE)/100.

         acq_FED_TAX_CREDIT_PASSED_UP = 0.
         acq_SEC_29_CREDITS_PASSED_UP = 0.
         acq_SEC_42_CREDITS_PASSED_UP = 0.
         CONSOLD_AVAIL_FED_TAX_CREDIT = 0.
         CONSOLID_FED_SEC_29_TAX_CREDITS = 0.
         CONSOLID_FED_SEC_42_TAX_CREDITS = 0.
         EXCLUDE_TAX_DEFERRALS_DR = 0.
         EXCLUDE_STATE_NOL_TAX_DEF_DR = 0.
         EXCLUDE_FED_NOL_TAX_DEF_DR = 0.
         EXCLUDE_TAX_DEFERRALS_CR = 0.
         EXCLUDE_ITC = 0.
         EXCLUDE_BTL_TAXES = 0.
         EXCLUDE_SUB_INCOME = 0.
         EXCLUDE_SUB_COMMON_EQUITY = 0.
         EXCLUDE_SUB_RETAINED_EARNINGS = 0.
         EXCLUDE_SUB_OCI_EARNINGS = 0.
         TOTAL_SUB_COMMON_EQUITY = 0.
         TOTAL_SUB_RETAINED_EARNINGS = 0.
         TOTAL_SUB_OCI_EARNINGS = 0.
         TOTAL_SUB_INVESTMENT = 0.

         EXCLUDE_COMMON_DIVIDENDS = 0.
         EXCLUDE_STATE_TAXES = 0.
         EXCLUDE_FED_TAXES = 0.
         FEDERAL_TAX_EXCLUSION_ADJ = 0.
         SUB_TAXABLE_INCOME = 0.
         SUB_FED_TAX_PAYMENTS_2_PARENT= 0.
         SUB_FED_TAX_LIABILITY = 0.
         SUB_STATE_TAX_LIABILITY = 0.
         SUB_STATE_TAX_PAYMENTS_2_PARENT = 0.
         SUB_TOTAL_BTL_FEDERAL_TAXES = 0.
         SUB_TOTAL_ATL_FEDERAL_TAXES = 0.
         SUB_TOTAL_BTL_INTRA_FED_TAXES = 0.
         SUB_TOTAL_BTL_INTRA_STATE_TAXES = 0.
         SUB_FEDERAL_TAXABLE_INCOME =  0.
         CONSOLIDATED_LOCAL_TAX_ADJ = 0.
         CONSOLIDATED_STATE_TAX_ADJ = 0.
         CONSOLIDATED_FED_TAX_ADJ = 0.
         CONSOLIDATED_FEDERAL_TAXES = 0.
         INTRA_TAXES_PAYABLE = 0.
         SUB_NON_INCOME_TAX_ACCRUALS = 0.
         SBU_LTD_ELIM = 0.
         SBU_STD_ELIM = 0.
         SBU_PS_ELIM = 0.
         acq_SBU_UNAMORTIZED_INTEREST_BAL = 0.
         acq_SBU_UNAMORTIZED_ISSUE_EXPENSE_BAL = 0.
         VOID_LOGICAL = ZERO_TOTAL_EMIS_VARS()
         PARENT_LEVEL_CS_ACQUISIONS = 0.
         PARENT_LEVEL_RE_ACQUISIONS = 0.
!       This is used to move balance sheet adjs to parent & consolidated
         BAL_SHEET_RE_SUB_ADJ = 0.
         SUB_COMMON_BUYBACK_CS_ADJ = 0.
         SUB_COMMON_BUYBACK_RE_ADJ = 0.
         TOTAL_CAP_LEASES_BAL_ADJ = 0.
         SEPARATE_ELIMINATIONS = .FALSE.
         acq_VARIABLE = 0.
         acq_SBU_VARIABLES = 0.
         acq_SUBSIDARY_VARIABLES = 0.
         CLASS_REVENUES = 0.
         LEVEL_SUMATION = 0.

         BALANCE_SHEET_ROLLUPS = 0.
         ODEC_NA3_PURCHASE_EXPENSE = 0.
         ODEC_NA3_TIER_RETURN = 0.
         ODEC_NA3_ACTIVE = .FALSE.

         IF(WVPA()) THEN
            VOID_LOGICAL = WVPA_RATES_TRACKER_OBJECT()
            VOID_LOGICAL = WVPA_PROCESS_RATE_STRUCTURES(YR)
            CALL CALCULATE_WVPA_COOP_REVENUES(YR,CLASS_REVENUES)
            VOID_LOGICAL = WVPA_RATE_TRACKER_REPORT(gc_end_point,
     +                         get_BASE_YEAR()+globecom_YEAR)
         ELSE
            CALL CALCULATE_CLASS_SALES_REVENUES(YR,CLASS_REVENUES,
     +                                    INTRA_COMPANY_REVENUE)
         ENDIF
         PA_CONTRACT_ACITVE = .FALSE.
         IF(CPL_IS_ACTIVE) THEN
            CALL CPL_DEFERRED_FUEL_ACCOUNTING(YR)
            CALL CPL_MON_SALE_AND_GEN_REPORT(YR) ! 2/14/99. GAT.
            CALL GET_PA_SWITCH(PA_CONTRACT_ACITVE)
         ENDIF

C MODIFICATION OF WHAT GETS PASSED TO SUBs FROM SUBs

         ALLOCATE(SUB_TOTAL_SUB_INCOME(-1:DEFINED_CLASSES))
         ALLOCATE(SUB_SBU_ACE_TAX_DEPRECIATION(-1:DEFINED_CLASSES))
         ALLOCATE(SUB_SBU_TAX_PRE_DEPRECIATION(-1:DEFINED_CLASSES))
         ALLOCATE(SBU_RETIREE_MEDICAL_PAYMENTS(-1:DEFINED_CLASSES))
         ALLOCATE(SBU_CASH_OTH_ASSET(-1:DEFINED_CLASSES))
         ALLOCATE(SBU_DSM_CAPITIAL(-1:DEFINED_CLASSES))
         ALLOCATE(SBU_BTL_LEASE_PAYMENTS(-1:DEFINED_CLASSES))
         ALLOCATE(SBU_ATL_LEASE_PAYMENTS(-1:DEFINED_CLASSES))
         ALLOCATE(SBU_CHANGE_DECOMMISSIONING_LIAB(-1:DEFINED_CLASSES))
         SUB_TOTAL_SUB_INCOME = 0.
         SUB_SBU_ACE_TAX_DEPRECIATION = 0.
         SUB_SBU_TAX_PRE_DEPRECIATION = 0.
         SBU_RETIREE_MEDICAL_PAYMENTS = 0.
         SBU_CASH_OTH_ASSET = 0.
         SBU_DSM_CAPITIAL = 0.
         SBU_BTL_LEASE_PAYMENTS = 0.
         SBU_ATL_LEASE_PAYMENTS = 0.
         SBU_CHANGE_DECOMMISSIONING_LIAB = 0.

C NON-INCOME TAX EXCLUSION VARIABLES

         ALLOCATE(PROPERTY_VALUE_GPV_WITH_CWIP(0:MAX_LINKED_LEVEL))
         ALLOCATE(PROPERTY_VALUE_GPV_NO_CWIP(0:MAX_LINKED_LEVEL))
         ALLOCATE(PROPERTY_VALUE_NPV_WITH_CWIP(0:MAX_LINKED_LEVEL))
         ALLOCATE(PROPERTY_VALUE_NPV_NO_CWIP(0:MAX_LINKED_LEVEL))
         ALLOCATE(EXCLUDED_SBU_PROPERTY_TAX(0:MAX_LINKED_LEVEL))
         ALLOCATE(SUB_EARNINGS_2_COMMON(0:MAX_LINKED_LEVEL))
         ALLOCATE(SUB_DIVIDEND_PAYMENTS_2_PARENT(0:MAX_LINKED_LEVEL))
         ALLOCATE(SUB_EQUITY_NEEDS_FROM_PARENT(0:MAX_LINKED_LEVEL))
         ALLOCATE(PARENT_ACQUISITION_OF_SUB_COST(0:MAX_LINKED_LEVEL))
         ALLOCATE(PARENT_ACQUISITION_GOODWILL(0:MAX_LINKED_LEVEL))
         ALLOCATE(SUB_EARNINGS_2_EXCLUDE(0:MAX_LINKED_LEVEL))
         ALLOCATE(NUC_FUEL_RATE_BASE_AT(0:MAX_LINKED_LEVEL))
         ALLOCATE(CWIP_IN_RATE_BASE_AT(0:MAX_LINKED_LEVEL))
         ALLOCATE(SBU_DEFERRED_DEBIT_RATEBASE(0:MAX_LINKED_LEVEL))
         ALLOCATE(SBU_DEFERRED_CREDIT_RATEBASE(0:MAX_LINKED_LEVEL))
         ALLOCATE(SBU_CLASS_OTH_LIAB_SALE_ASSETS(0:MAX_LINKED_LEVEL))
         ALLOCATE(SBU_ATL_TAX_EXPENSE(0:MAX_LINKED_LEVEL))
         ALLOCATE(SBU_BTL_TAX_EXPENSE(0:MAX_LINKED_LEVEL))

         PROPERTY_VALUE_GPV_WITH_CWIP = 0.
         PROPERTY_VALUE_GPV_NO_CWIP = 0.
         PROPERTY_VALUE_NPV_WITH_CWIP = 0.
         PROPERTY_VALUE_NPV_NO_CWIP = 0.
         EXCLUDED_SBU_PROPERTY_TAX = 0.
         SUB_EARNINGS_2_COMMON = 0.
         SUB_EQUITY_NEEDS_FROM_PARENT = 0.
         PARENT_ACQUISITION_OF_SUB_COST = 0.
         PARENT_ACQUISITION_GOODWILL = 0.
         SUB_EARNINGS_2_EXCLUDE = 0.
         SUB_DIVIDEND_PAYMENTS_2_PARENT = 0.
         NUC_FUEL_RATE_BASE_AT = 0.
         CWIP_IN_RATE_BASE_AT = 0.
         SBU_DEFERRED_DEBIT_RATEBASE = 0.
         SBU_DEFERRED_CREDIT_RATEBASE = 0.
         SBU_CLASS_OTH_LIAB_SALE_ASSETS = 0.
         SBU_ATL_TAX_EXPENSE = 0.
         SBU_BTL_TAX_EXPENSE = 0.

         ALLOCATE(EXCLUDED_REVENUE_TAX_BASIS(0:MAX_LINKED_LEVEL))
         ALLOCATE(EXCLUDED_REVENUE_TAX_BASIS_A(0:MAX_LINKED_LEVEL))
         ALLOCATE(EXCLUDED_REVENUE_TAX_BASIS_B(0:MAX_LINKED_LEVEL))
         ALLOCATE(EXCLUDED_REVENUE_TAX(0:MAX_LINKED_LEVEL))
         ALLOCATE(EXCLUDED_OTHER_TAXES_REV(0:MAX_LINKED_LEVEL))
         ALLOCATE(EXCLUDED_OTHER_TAXES_EXP(0:MAX_LINKED_LEVEL))
         ALLOCATE(EXCLUDED_OTHER_TAXES(0:MAX_LINKED_LEVEL))
         ALLOCATE(EXCLUDE_CAPITAL_TAXES_STATE(0:MAX_LINKED_LEVEL))
         ALLOCATE(EXCLUDE_CAPITAL_TAXES_FED(0:MAX_LINKED_LEVEL))
         ALLOCATE(EXCLUDE_CAPITAL_TAX_FED_BASIS(0:MAX_LINKED_LEVEL))
         ALLOCATE(EXCLUDE_CAPITAL_TAX_STATE_BASIS(0:MAX_LINKED_LEVEL))

         EXCLUDED_REVENUE_TAX_BASIS = 0.
         EXCLUDED_REVENUE_TAX_BASIS_A = 0.
         EXCLUDED_REVENUE_TAX_BASIS_B = 0.
         EXCLUDED_REVENUE_TAX = 0.
         EXCLUDED_OTHER_TAXES_REV = 0.
         EXCLUDED_OTHER_TAXES_EXP = 0.
         EXCLUDED_OTHER_TAXES = 0.
         EXCLUDE_CAPITAL_TAXES_STATE = 0.
         EXCLUDE_CAPITAL_TAXES_FED = 0.
         EXCLUDE_CAPITAL_TAX_FED_BASIS = 0.
         EXCLUDE_CAPITAL_TAX_STATE_BASIS = 0.
         LAST_CLASS_LEVEL = -999

C ITEMS FROM INIT FILE AND THE PARAMETER FILE

         LAST_GROUP_WAS_A_SUBSIDARY = .TRUE.
         WE_ARE_CONSOLIDATING = .FALSE.
         CALL STORE_REPORTING_VALUES(acq_VARIABLE)
         DO CLASS_COUNTER = DEFINED_CLASSES,1,-1

            INVESTMENT_IN_AFILLIATES = 0.
            LOANS_TO_AFILLIATES = 0.
            ns_class_canadian%PROVINCIAL_CAPITAL_TAX = 0.
            ns_class_canadian%FEDERAL_CAPITAL_TAX = 0.
            ns_class_canadian%PROVINCIAL_CAPITAL_TAX_RATE = 0.
            ns_class_canadian%FEDERAL_CAPITAL_TAX_RATE = 0.
            ns_class_canadian%PROVINCIAL_CAP_TAX_DEDUCTION = 0.
            ns_class_canadian%FEDERAL_CAPITAL_TAX_DEDUCTION = 0.
            ns_class_canadian%PROVINCIAL_CAP_TAX_ADDENDUM = 0.
            ns_class_canadian%FEDERAL_CAPITAL_TAX_ADDENDUM = 0.
            ADJ_2_LOCAL_TAXES = 0.
            DEFERRED_TAXES_DR = 0.
            ns_class_master%DEF_TAX_RATEBASE = 0.
            KEPCO_WC_DEF_MAINT_ENRG_AMORT = 0.
            KEPCO_WC_CURENT_MAINT_ENRG_COST = 0.
            ITC_AMORTIZATION = 0.
            STATE_TAX_ON_CAPITAL = 0.
            FEDERAL_TAX_ON_CAPITAL = 0.
            ns_class_master%ITCUSED = 0.
            FEDERAL_TAXES = 0.
            IF(LAST_CLASS_LEVEL == 1) THEN
               SUB_EARNINGS_2_COMMON(1:) = 0.
               SUB_EQUITY_NEEDS_FROM_PARENT(1:) = 0.
               PARENT_ACQUISITION_OF_SUB_COST(1:) = 0.
               PARENT_ACQUISITION_GOODWILL(1:) = 0.
               SUB_EARNINGS_2_EXCLUDE(1:) = 0.
               SUB_DIVIDEND_PAYMENTS_2_PARENT(1:) = 0.
               SUB_TOTAL_SUB_INCOME(1:) = 0.

            ENDIF
            CLASS = DEFINED_CLASS_POINTER_LIST(CLASS_COUNTER)
            CLASS_LEVEL = CLASS_AT_LEVEL(CLASS_COUNTER)
            PARENT_CLASS = CLASS == PARENT_CLASS_ID_NUM
            IF(PARENT_CLASS) THEN
               PARENT_CLASS = CLASS == PARENT_CLASS_ID_NUM
               ! TODO: Hardcoded value - figure out how to 
               ! make it data-driven.               
               IF(get_BASE_YEAR()+globecom_YEAR == 2024) THEN
                  PARENT_CLASS = CLASS == PARENT_CLASS_ID_NUM
               ENDIF
            ENDIF
            CLASS_POS = MASTER_CLASS_LIST(CLASS)
            SUBSIDIARY_CLASS = CLASS_TYPE(CLASS_POS) == SUBSIDIARY
            THIS_IS_REPORTING_CLASS = CLASS == REPORTING_CLASS_ID
            IF(LAHEY_LF95()) THEN
               IF(trim(CLASS_NAME(CLASS_POS)) /= ' ')THEN
                  WRITE(STR_CLASS_NUM,'(I4)') CLASS-1
                  ASSET_CLASS_NAME = trim(CLASS_NAME(CLASS_POS))
     +                                           //STR_CLASS_NUM
               ELSE
                  WRITE(STR_CLASS_NUM,'(I4)') CLASS-1
                  ASSET_CLASS_NAME = 'Class '//STR_CLASS_NUM
               ENDIF
               WRITE(STR_CLASS_NUM,'(I2)') CLASS_LEVEL
               IF(CLASS_TYPE(CLASS_POS) == SBU) THEN
                  ASSET_CLASS_NAME=trim(ASSET_CLASS_NAME)//' (SBU)'//
     +                                             STR_CLASS_NUM
               ELSEIF(SUBSIDIARY_CLASS) THEN
                  ASSET_CLASS_NAME=trim(ASSET_CLASS_NAME)//' (Sub)'//
     +                                             STR_CLASS_NUM
               ELSEIF(CLASS_TYPE(CLASS_POS) == REGULATED_GROUP) THEN
                  ASSET_CLASS_NAME=trim(ASSET_CLASS_NAME)//' (Reg)'//
     +                                             STR_CLASS_NUM
               ENDIF
               CALL MG_LOCATE_WRITE(8,26,
     +                  trim(ASSET_CLASS_NAME),ALL_VERSIONS,0)
            ELSE
               WRITE(SCREEN_MESSAGES,'(I4)') class-1
               IF(ASSET_ANALYST_ONLY()) THEN
                  CALL MG_LOCATE_WRITE(8,26,
     +                   trim(SCREEN_MESSAGES),ALL_VERSIONS,0)
               ELSE
                  CALL MG_LOCATE_WRITE(12,26,
     +                   trim(SCREEN_MESSAGES),ALL_VERSIONS,0)
               ENDIF
            ENDIF
            if(class == class_check + 1) then
               CLASS_POS = MASTER_CLASS_LIST(CLASS)
            endif

            DONT_TALLY_THIS_CLASS =
     +        ACTIVATE_CLASS_IN_YEAR(CLASS_POS) > YR .AND.
     +                     ACTIVATE_CLASS_IN_YEAR(CLASS_POS) > 0
            NEW_SUB_RETAINED_EARNINGS = 0.
            NEW_SUB_COMMON_STOCK = 0.
            IF(ACTIVATE_CLASS_IN_YEAR(CLASS_POS) == YR .AND.
     +     ACTIVATE_CLASS_IN_YEAR(CLASS_POS) > 0 .AND.
     +                                    SUBSIDIARY_CLASS) THEN
               NEW_SUB_RETAINED_EARNINGS = REARNC(2,CLASS_POS)
               NEW_SUB_COMMON_STOCK = COMMON_STOCK(2,CLASS_POS)

               PARENT_ACQUISITION_OF_SUB_COST(CLASS_LEVEL-1) =
     +             PARENT_ACQUISITION_OF_SUB_COST(CLASS_LEVEL-1)
     +             + REARNC(2,CLASS_POS)
     +             + COMMON_STOCK(2,CLASS_POS)
               NEW_SUB_ACQUISITION_GOODWILL =
     +                     ACQUISITION_PREMIUM(CLASS_POS)/100. *
     +                             (REARNC(2,CLASS_POS)
     +                              + COMMON_STOCK(2,CLASS_POS))
               PARENT_ACQUISITION_GOODWILL(CLASS_LEVEL-1) =
     +                PARENT_ACQUISITION_GOODWILL(CLASS_LEVEL-1)
     +                + NEW_SUB_ACQUISITION_GOODWILL

               IF(CLASS_LEVEL-1 == 0) THEN
                  PARENT_LEVEL_CS_ACQUISIONS=PARENT_LEVEL_CS_ACQUISIONS+
     +                               NEW_SUB_COMMON_STOCK
                  PARENT_LEVEL_RE_ACQUISIONS=PARENT_LEVEL_RE_ACQUISIONS+
     +                               NEW_SUB_RETAINED_EARNINGS
               ENDIF
            ENDIF

            IF(YR >= YEAR_CLASS_DEACTIVATED(CLASS_POS) .AND.
     +               YEAR_CLASS_DEACTIVATED(CLASS_POS) > 0) THEN
               IF(.NOT. (MONTHLY_MIDAS_ACTIVE .AND.
     +            YR == YEAR_CLASS_DEACTIVATED(CLASS_POS))) THEN
               IF(trim(CLASS_NAME(CLASS_POS)) /= ' ')THEN
                  WRITE(STR_CLASS_NUM,'(I4)') CLASS-1
                  ASSET_CLASS_NAME = trim(CLASS_NAME(CLASS_POS))
     +                                           //STR_CLASS_NUM
               ELSE
                  WRITE(STR_CLASS_NUM,'(I4)') CLASS-1
                  ASSET_CLASS_NAME = 'Class '//STR_CLASS_NUM
               ENDIF
               WRITE(STR_CLASS_NUM,'(I2)') CLASS_LEVEL
               IF(CLASS_TYPE(CLASS_POS) == SBU) THEN
                  ASSET_CLASS_NAME=trim(ASSET_CLASS_NAME)//' (SBU)'//
     +                                             STR_CLASS_NUM
               ELSEIF(SUBSIDIARY_CLASS) THEN
                  ASSET_CLASS_NAME=trim(ASSET_CLASS_NAME)//' (Sub)'//
     +                                             STR_CLASS_NUM
               ELSEIF(CLASS_TYPE(CLASS_POS) == REGULATED_GROUP) THEN
                  ASSET_CLASS_NAME=trim(ASSET_CLASS_NAME)//' (Reg)'//
     +                                             STR_CLASS_NUM
               ENDIF
               IF(ASSET_REPORTS_ACTIVE .AND.
     +                             REPORT_CLASS(CLASS_POS)) THEN
                  acq_VARIABLE = 0.
                  acq_OUTPUT_CLASS_ID = CLASS - 1
                  CALL MG_LOCATE_WRITE(8,15,ASSET_CLASS_NAME,3,4)
                  WRITE(INCOME_UNIT,REC=OUTPUT_RCD_loc)
     +                                    PRT_ENDPOINT(),
     +                      FLOAT(get_BASE_YEAR()+globecom_YEAR),
     +                                    ASSET_CLASS_NAME,
     +                                    acq_VARIABLE
                 IF(FirstEnergy_Is_Active)
     +          CALL FE_PCA_LEGAL_REPORTS(FLOAT(get_BASE_YEAR()+
     +                 globecom_YEAR),
     +                 ASSET_CLASS_NAME,
     +                 OUTPUT_RCD_loc,
     +                   acq_VARIABLE)
           IF(get_BASE_YEAR()+globecom_year >= 2011 .and. .false.) THEN
              write(37673,1021) OUTPUT_RCD_loc,
     +                  ASSET_CLASS_NAME,
     +                  acq_VARIABLE
                  ENDIF
                  OUTPUT_RCD_loc = OUTPUT_RCD_loc - 1
                  IF(MONTHLY_MIDAS_ACTIVE) THEN
                     IF(YR > YEAR_CLASS_DEACTIVATED(CLASS_POS) .AND.
     +               YEAR_CLASS_DEACTIVATED(CLASS_POS) > 0) THEN
                        CALL MONTHLY_ZERO_ALL_OUTPUT(globecom_YEAR,
     +                                       ASSET_CLASS_NAME,
     +                                       acq_OUTPUT_CLASS_ID)
                     ENDIF
                  ENDIF
               ENDIF
               CYCLE
               ENDIF
            ENDIF

            IF(SUBSIDIARY_CLASS) THEN
               BASE_RATES_REVENUES = 0.
            ENDIF
            BASE_RATES_REVENUES = 0.
            MARKET_BASE_REVENUES = 0.
            CLASS_FORECAST_REVENUES = 0.
            ns_class_parameters%CLASS_BASE_REVENUE = 0.
            ns_class_parameters%CLASS_BTL_EXPENSES = 0.
            ns_class_parameters%CLASS_BTL_REVENUES = 0.
            ACQ_SERVICE_TRANSACTION_EXPENSE = 0.
            ns_class_parameters%TAX_PREFERENCE_DEPRECIATION = 0.
            acq_BTL_LEASE_AMORTIZATION = 0.
            acq_ATL_LEASE_AMORTIZATION = 0.
            acq_ATL_LEASE_INTEREST = 0.
            acq_BTL_LEASE_INTEREST = 0.
            acq_SALVAGE_TRANSACTIONS = 0.
            acq_RETIREMENT_MEDICAL_PAYMENTS = 0.
            acq_OTHER_INCOME_NET_OF_TAX = 0.

            IF(DUKE_IS_ACTIVE) THEN
               DOE_FEES_IN_NUC_FUEL_COST = .TRUE.
               CATAWBA_ADJUSTMENT = 70.
               CATAWBA_ADJUSTMENT = JOINT_OWNERS_COSTS()
               CATAWBA_BURN_ADJUSTMENT = CATAWBA_ADJUSTMENT
            ELSE
               DOE_FEES_IN_NUC_FUEL_COST = .FALSE.
               CATAWBA_ADJUSTMENT = 0.
               CATAWBA_BURN_ADJUSTMENT = 0.
            ENDIF

            IF(PARENT_CLASS .AND. SUBS_ACTIVE) THEN
               CALL SET_SUBSIDARY_TOTALS_NA(acq_SBU_VARIABLES)
               CALL CAL_SUMMED_VALUES(acq_SBU_VARIABLES)
             acq_FED_TAXABLE_INCOME_AFTER_NOLS = acq_SBU_VARIABLES(136)
               IF(acq_FED_TAXABLE_INCOME_AFTER_NOLS > 0.) THEN
                  acq_SBU_VARIABLES(213) = 100.* acq_SBU_VARIABLES(340)/
     +                             acq_FED_TAXABLE_INCOME_AFTER_NOLS
               ELSE
                  acq_SBU_VARIABLES(213) = 
     + ns_class_parameters%FEDERAL_TAX_RATE*100.
               ENDIF
            ACQ_STATE_TAXABLE_INCOME_AFTER_NOLS = acq_SBU_VARIABLES(132)
               IF(ACQ_STATE_TAXABLE_INCOME_AFTER_NOLS /= 0.) THEN
                  acq_SBU_VARIABLES(141) =

     +                     100.*acq_SBU_VARIABLES(345)/
     +                      ACQ_STATE_TAXABLE_INCOME_AFTER_NOLS
               ELSE
         acq_SBU_VARIABLES(141) = ns_class_parameters%STATE_TAX_RATE
               ENDIF
               IF(ASSET_REPORTS_ACTIVE .AND.
     +                              PARENT_HAS_LINKED_SBUS) THEN
                  ASSET_CLASS_NAME = 'SBU Totals'
                  CALL PASS_PARENT_2_SBU_TOTALS(VARS_2_PASS,
     +                            LEVEL_SUMATION(0,CLASS_LEVEL),
     +                            acq_SBU_VARIABLES)
                  acq_CLASS_UNAMORTIZED_INTEREST_BAL =   ! RESET
     +                              acq_UNAMORT_DEBT_INTEREST_BAL
     +                              + acq_UNAMORT_DEBIT_INTEREST_BAL
                  CALL CLASS_SUB_TOTALS_VALUE_NA(acq_SBU_VARIABLES)
                  CALL CLASS_SHAREHOLDER_VALUE_NA(acq_SBU_VARIABLES)
                  IF(FirstEnergy_Is_Active) THEN
                     CALL FIRST_ENERGY_PandL_REPORT(INT2(-10000),
     +                                   acq_SBU_VARIABLES,
     +                                   CL_ANN_CLASS_ENERGY,
     +                            ZERO, ! EXP_FUEL_EXPENSE,
     +                       ZERO, ! EXP_PURCHASE_POWER_EXPENSE
     +                        ZERO, ! EXP_FILE_VARIABLE_EXPENSE
     +                          ZERO) !EXP_FILE_FIXED_EXPENSE
                  ENDIF
                  CALL GRE_DSC_REPORT(acq_SBU_VARIABLES)
                  CALL EBITDA_REPORT(acq_SBU_VARIABLES)
                  CALL SUB_SEC_RATIOS(acq_SBU_VARIABLES)

                  acq_OUTPUT_CLASS_ID = -10000.
                  acq_SBU_VARIABLES(441) = acq_OUTPUT_CLASS_ID
                  acq_SBU_VARIABLES(641) = acq_SBU_VARIABLES(76)
     +     - acq_SBU_VARIABLES(90) ! acq_ASSET_MINUS_LIABS
                  acq_SBU_VARIABLES(642) = acq_SBU_VARIABLES(641)
     +                         - TOTAL_SBU_PRIOR_INBALANCE
                  TOTAL_SBU_PRIOR_INBALANCE = acq_SBU_VARIABLES(641)
                  acq_SBU_VARIABLES(29) = acq_SBU_VARIABLES(681)
     +                        + acq_SBU_VARIABLES(682)
     +                        + acq_SBU_VARIABLES(733)
                  acq_SBU_VARIABLES(742) = acq_SBU_VARIABLES(731)
     +                         + acq_SBU_VARIABLES(80)
     +    + acq_SBU_VARIABLES(741) ! LONG_TERM_DEBT(2,0) WO CURRENT LTD

                  CALL MG_LOCATE_WRITE(8,15,ASSET_CLASS_NAME,3,4)
                  WRITE(INCOME_UNIT,REC=OUTPUT_RCD_loc)
     +              PRT_ENDPOINT(),
     +              FLOAT(get_BASE_YEAR()+globecom_YEAR),
     +              ASSET_CLASS_NAME,
     +              acq_SBU_VARIABLES
                  IF(FirstEnergy_Is_Active)
     + CALL FE_PCA_LEGAL_REPORTS(FLOAT(get_BASE_YEAR()+globecom_YEAR),
     +                           ASSET_CLASS_NAME,
     +                           OUTPUT_RCD_loc,
     +                           acq_SBU_VARIABLES)
          IF(get_BASE_YEAR()+globecom_year >= 2011 .and. .false.) THEN
             write(37673,1021) OUTPUT_RCD_loc,
     +                 ASSET_CLASS_NAME,
     +                 acq_SBU_VARIABLES
                  ENDIF
                  OUTPUT_RCD_loc = OUTPUT_RCD_loc - 1
               ENDIF
               acq_SUBSIDARY_VARIABLES(77) = TOTAL_SUB_COMMON_EQUITY
               acq_SUBSIDARY_VARIABLES(78) = TOTAL_SUB_RETAINED_EARNINGS
               acq_SUBSIDARY_VARIABLES(730) = TOTAL_SUB_OCI_EARNINGS
               acq_SUBSIDARY_VARIABLES(91) = TOTAL_SUB_INVESTMENT
               EXCLUDE_SUB_COMMON_EQUITY = acq_SUBSIDARY_VARIABLES(77)
             EXCLUDE_SUB_RETAINED_EARNINGS = acq_SUBSIDARY_VARIABLES(78)
               EXCLUDE_SUB_OCI_EARNINGS = 0.
              EXCLUDE_SUB_TAX_DEFERRALS_DR = acq_SUBSIDARY_VARIABLES(73)
               SUB_COLUMN_TOTAL_SUB_INCOME = acq_SUBSIDARY_VARIABLES(43)
            SUB_COLUMN_TOTAL_SUB_DIVIDEND = acq_SUBSIDARY_VARIABLES(107)

               acq_SUBSIDARY_VARIABLES(45) =
     + acq_SUBSIDARY_VARIABLES(42) + ! Net Income
     +         acq_SUBSIDARY_VARIABLES(43) - ! Subsidiary Income
     +    acq_SUBSIDARY_VARIABLES(44)   ! extraordinary expenses
      acq_SUBSIDARY_VARIABLES(47) =  acq_SUBSIDARY_VARIABLES(45) -
     + ! Earnings available to common
     +                        acq_SUBSIDARY_VARIABLES(361) !(46)
               acq_SUBSIDARY_VARIABLES(48) =  EXCLUDE_COMMON_DIVIDENDS
               ! Retained Earnings
           acq_SUBSIDARY_VARIABLES(49) =  acq_SUBSIDARY_VARIABLES(47) -
     +                            acq_SUBSIDARY_VARIABLES(48)


               acq_SUBSIDARY_VARIABLES(79) = acq_SUBSIDARY_VARIABLES(77)
     +                           + acq_SUBSIDARY_VARIABLES(78)
     +                           + acq_SUBSIDARY_VARIABLES(730)
             acq_SUBSIDARY_VARIABLES(731) = acq_SUBSIDARY_VARIABLES(77)
     +                           + acq_SUBSIDARY_VARIABLES(78)
     +                           + acq_SUBSIDARY_VARIABLES(730)
               acq_SUBSIDARY_VARIABLES(82) = acq_SUBSIDARY_VARIABLES(79)
     +                           + acq_SUBSIDARY_VARIABLES(80)
     +                           + acq_SUBSIDARY_VARIABLES(81)
             acq_SUBSIDARY_VARIABLES(713) = acq_SUBSIDARY_VARIABLES(412)
     +                           + acq_SUBSIDARY_VARIABLES(86)
     +                           + acq_SUBSIDARY_VARIABLES(87)
     +                           + acq_SUBSIDARY_VARIABLES(88)
     +                           + acq_SUBSIDARY_VARIABLES(710)
     +                           + acq_SUBSIDARY_VARIABLES(711)
     +                           + acq_SUBSIDARY_VARIABLES(712)
               acq_SUBSIDARY_VARIABLES(90) = acq_SUBSIDARY_VARIABLES(82)
     +                           + acq_SUBSIDARY_VARIABLES(83)
     +                           + acq_SUBSIDARY_VARIABLES(84)
     +                           + acq_SUBSIDARY_VARIABLES(85)
     +                           + acq_SUBSIDARY_VARIABLES(89)
     +                           + acq_SUBSIDARY_VARIABLES(287)
     +                           + acq_SUBSIDARY_VARIABLES(288)
     +                           + acq_SUBSIDARY_VARIABLES(389)
     +                           + acq_SUBSIDARY_VARIABLES(403)
     +                           + acq_SUBSIDARY_VARIABLES(411)
     +                           + acq_SUBSIDARY_VARIABLES(413)
     +                           + acq_SUBSIDARY_VARIABLES(414)
     +                           + acq_SUBSIDARY_VARIABLES(637)
     +                           + acq_SUBSIDARY_VARIABLES(713)
     +                           + acq_SUBSIDARY_VARIABLES(905)
     +                           + acq_SUBSIDARY_VARIABLES(906)

               CALL CAL_SUMMED_VALUES(acq_SUBSIDARY_VARIABLES)
               CALL SET_SUBSIDARY_TOTALS_NA(acq_SUBSIDARY_VARIABLES)
        acq_FED_TAXABLE_INCOME_AFTER_NOLS = acq_SUBSIDARY_VARIABLES(136)
               IF(acq_FED_TAXABLE_INCOME_AFTER_NOLS > 0.) THEN
                  acq_SUBSIDARY_VARIABLES(213) =
     +                      100.* acq_SUBSIDARY_VARIABLES(340)/
     +                            acq_FED_TAXABLE_INCOME_AFTER_NOLS
               ELSE
      acq_SUBSIDARY_VARIABLES(213) = 
     + ns_class_parameters%FEDERAL_TAX_RATE*100.
               ENDIF
        ACQ_STATE_TAXABLE_INCOME_AFTER_NOLS=acq_SUBSIDARY_VARIABLES(132)
               IF(ACQ_STATE_TAXABLE_INCOME_AFTER_NOLS /= 0.) THEN
                  acq_SUBSIDARY_VARIABLES(141) =
     +                     100.*acq_SUBSIDARY_VARIABLES(345)/
     +                       ACQ_STATE_TAXABLE_INCOME_AFTER_NOLS
               ELSE
      acq_SUBSIDARY_VARIABLES(141) = ns_class_parameters%STATE_TAX_RATE
               ENDIF
               IF(ASSET_REPORTS_ACTIVE .AND.
     +                              PARENT_HAS_LINKED_SUBS) THEN
                  ASSET_CLASS_NAME = 'Subsidiary Totals'

                  CALL GRE_DSC_REPORT(acq_SUBSIDARY_VARIABLES)
                  CALL EBITDA_REPORT(acq_SUBSIDARY_VARIABLES)
                  CALL SUB_SEC_RATIOS(acq_SUBSIDARY_VARIABLES)
                  IF(FirstEnergy_Is_Active) THEN
                     CALL FIRST_ENERGY_PandL_REPORT(INT2(-11000),
     +                                  acq_SUBSIDARY_VARIABLES,
     +                                     CL_ANN_CLASS_ENERGY,
     +                                 ZERO, ! EXP_FUEL_EXPENSE,
     +                        ZERO, ! EXP_PURCHASE_POWER_EXPENSE
     +                        ZERO, ! EXP_FILE_VARIABLE_EXPENSE
     +                             ZERO) !EXP_FILE_FIXED_EXPENSE
                  ENDIF
                CALL CLASS_SUB_TOTALS_VALUE_NA(acq_SUBSIDARY_VARIABLES)
                CALL CLASS_SHAREHOLDER_VALUE_NA(acq_SUBSIDARY_VARIABLES)
                  acq_OUTPUT_CLASS_ID = -11000
                  acq_SUBSIDARY_VARIABLES(441) = acq_OUTPUT_CLASS_ID
              acq_SUBSIDARY_VARIABLES(641) = acq_SUBSIDARY_VARIABLES(76)
     +         - acq_SUBSIDARY_VARIABLES(90) ! acq_ASSET_MINUS_LIABS
             acq_SUBSIDARY_VARIABLES(642) = acq_SUBSIDARY_VARIABLES(641)
     +                               - TOTAL_SUB_PRIOR_INBALANCE
               TOTAL_SUB_PRIOR_INBALANCE = acq_SUBSIDARY_VARIABLES(641)
              acq_SUBSIDARY_VARIABLES(29) = acq_SUBSIDARY_VARIABLES(681)
     +                            + acq_SUBSIDARY_VARIABLES(682)
     +                           + acq_SUBSIDARY_VARIABLES(733)
             acq_SUBSIDARY_VARIABLES(742) = acq_SUBSIDARY_VARIABLES(731)
     +                            + acq_SUBSIDARY_VARIABLES(80)
     + ! LONG_TERM_DEBT(2,0) WO CURRENT LTD
     +                           + acq_SUBSIDARY_VARIABLES(741)

                  CALL MG_LOCATE_WRITE(8,15,ASSET_CLASS_NAME,3,4)
                  WRITE(INCOME_UNIT,REC=OUTPUT_RCD_loc)
     +                 PRT_ENDPOINT(),
     +                 FLOAT(get_BASE_YEAR()+globecom_YEAR),
     +                 ASSET_CLASS_NAME,
     +                acq_SUBSIDARY_VARIABLES
                  IF(FirstEnergy_Is_Active)
     + CALL FE_PCA_LEGAL_REPORTS(FLOAT(get_BASE_YEAR()+globecom_YEAR),
     +                           ASSET_CLASS_NAME,
     +                           OUTPUT_RCD_loc,
     +                         acq_SUBSIDARY_VARIABLES)
       IF(get_BASE_YEAR()+globecom_year >= 2011 .and. .false.) THEN
          write(37673,1021) OUTPUT_RCD_loc,
     +              ASSET_CLASS_NAME,
     +              acq_SUBSIDARY_VARIABLES
                  ENDIF
                  OUTPUT_RCD_loc = OUTPUT_RCD_loc - 1
               ENDIF
               IF(REPORTING_CLASS_ID == -3) THEN
                  CALL STORE_REPORTING_VALUES(acq_SUBSIDARY_VARIABLES)
                  THIS_IS_REPORTING_CLASS = .FALSE.
               ENDIF
               IF(REPORTING_CLASS_ID == -4) THEN
                  CALL STORE_REPORTING_VALUES(acq_SBU_VARIABLES)
                  THIS_IS_REPORTING_CLASS = .FALSE.
               ENDIF
            ENDIF
            IF(CLASS > 0 .AND. MASTER_CLASS_LIST(CLASS) == 0) CYCLE

C EXCHANGE AND ZERO VARIABLES
            IF(LAST_GROUP_WAS_A_SUBSIDARY) THEN
               ! RESET THE SBU ELIMINATIONS
               acq_SBU_VARIABLES = 0.
               SBU_EXCLUDE_FED_TAXES = 0.
               SBU_ATL_EXCLUDE_FED_TAXES = 0.
               SBU_LTD_ELIM = 0.
               SBU_STD_ELIM = 0.
               SBU_PS_ELIM = 0.
               acq_SBU_UNAMORTIZED_INTEREST_BAL = 0.
               acq_SBU_UNAMORTIZED_ISSUE_EXPENSE_BAL = 0.

            ENDIF
            LAST_GROUP_WAS_A_SUBSIDARY = SUBSIDIARY_CLASS
            BOOK_DEPRECIATION = 0.
            ns_class_parameters%INCOME_TAX_DEPRECIATION = 0.
            EXP_BOOK_DEPRECIATION = 0.
            ADJUSTMENT_2_DEFERRED_TAXES_BAL = 0.
            ADJUSTMENT_2_DEFERRED_ITCS_BAL = 0.
            EXTRA_ORDINARY_EXPENSE = 0.
            GAS_STORAGE_BOY = CLASS_GAS_STORAGE(CLASS_POS)
            MATERIALS_SUPPLIES_BOY=CLASS_MATERIALS_N_SUPPLIES(CLASS_POS)
            FUEL_INVENTORY_BOY = FUEL_INVENTORY(CLASS_POS)
            CALL TRANSFER_ZERO_ASSETS(CLASS_POS)
            acq_VARIABLE = 0.
            ns_class_parameters%DIVIDEND_PER_SHARE = 0.
            LT_LIAB_BAL_ADJ = 0.
            CASH_TO_POST_RETIRE_MEDICAL_BAL = 0.

            CASH_TO_ACCRD_MBR_REVENUES_BAL = 0.
            acq_CAPACITY_SALES_TO_LEVEL_RM = 0.    ! 726
            acq_CAPACITY_PURCHASES_TO_LEVEL_RM = 0.  ! 725
            CUST_CAP_PURCHASES_TO_LEVEL_RM = 0.
            CWIP_BALANCE_ADJ = 0.
            OPREV_IN_ACCTS_RECEIVABLE = 0.
            ADDEN_ACCOUNTS_RECEIVABLE = 0.
            EXP_IN_ACCTS_PAYABLE = 0.
            ADDEN_ACCOUNTS_PAYABLE = 0.
            RATE_BASE_CASH_ADJ = 0.

            CALL READ_CLASS_RUN_SWITCHES(CLASS,YR,CLASS_TYPE(CLASS_POS))
            CALL READ_CLASS_PARAMETERS(CLASS,YR,CLASS_TYPE(CLASS_POS),
     +                         COVERAGE_RATIO,
     +                         acq_RETIREMENT_MEDICAL_PAYMENTS,
     +                         acq_SALVAGE_TRANSACTIONS,
     +                         CLASS_OTH_LIAB_SALE_ASSETS,
     +                         NET_DEFERRED_DEBIT_ADJUSTMENT,
     +                         RATE_BASE_CASH_ADJ,
     +                         ADJUSTMENT_2_DEFERRED_TAXES_BAL,
     +                         ADJUSTMENT_2_DEFERRED_ITCS_BAL,
     +                         NET_NUCLEAR_FUEL_ADJ(CLASS_POS),
     +                         RETAINED_EARNINGS_ADJ,
     +                         EXTRA_ORDINARY_EXPENSE,
     +                         LT_LIAB_BAL_ADJ,
     +                         CWIP_BALANCE_ADJ,
     +                         acq_CASH_ADDITIONS_2_FUEL_INVENTORY,
     +                         QRT_DIVIDEND_PER_SHARE,
     +                         ADJ_DEFERRED_TAX_DR_BALANCE,
     +                         PAID_IN_CAPITAL,
     +                         SUBSIDIARY_INVESTMENT_ADJ,
     +                         GOODWILL_ADJUSTMENT,
     +                         REG_ASSESTS_ADJUSTMENT,
     +                         FASB109_ADJUSTMENT,
     +                         FASB133_ADJUSTMENT,
     +             UNAMORT_INTEREST_ADJUSTMENT,  ! added to here
     +                         NUCLEAR_DECOM_FUND_BAL_ADJ,
     +                         CAP_LEASES_BAL_ADJ,
     +                         ASSETS_NEC_BAL_ADJ,
     +                         PREFERRED_STOCK_BAL_ADJ,
     +                         LTD_BAL_ADJ,
     +                         STD_BAL_ADJ,
     +                         NUC_DECOM_LIAB_BAL_ADJ,
     +                         LIABS_NEC_BAL_ADJ,
     +                         OTHER_INVESTMENT_BAL_ADJ,
     +                         NOTES_RECEIVABLE_BAL_ADJ,
     +                         POST_RETIRE_MEDICAL_BAL_ADJ,
     +                         DEFERRED_REVENUES_BAL_ADJ,
     +                         DEFERRED_FUEL_BAL_ADJ,
     +                         DEFERRED_PURCH_GAS_BAL_ADJ,
     +                         LT_INVEST_BAL_ADJ,
     +                         ST_INVEST_BAL_ADJ,
     +                         FUEL_INVENTORY_BAL_ADJ,
     +                         GAS_IN_STORAGE_BAL_ADJ,
     +                         MATRIAL_SUPPLY_BAL_ADJ,
     +                         ACCOUNTS_RECV_BAL_ADJ,
     +                         UNBILLED_REV_BAL_ADJ,
     +                         TAXES_RECEIVABLE_BAL_ADJ,
     +                         CURRENT_LT_DEBT_BAL_ADJ,
     +                         NOTES_PAYABLE_BAL_ADJ,
     +                         CUSTOMER_DEPOSIT_BAL_ADJ,
     +                         CICA_BAL_ADJ,
     +                         POST_RETIRE_PAYABLE_BAL_ADJ,
     +                         ACCRUED_PENSION_BAL_ADJ,
     +                         DEFERRED_GAINS_BAL_ADJ,
     +                         storm_RESERVE_BAL_ADJ,
     +                         ACCOUNTS_PAYABLE_BAL_ADJ,
     +                         ARO_NET_ASSETS_BAL_ADJ,
     +                         ARO_LIABILITY_BAL_ADJ,
     +                         OPREV_IN_ACCTS_RECEIVABLE,
     +                         ADDEN_ACCOUNTS_RECEIVABLE,
     +                         EXP_IN_ACCTS_PAYABLE,
     +                         ADDEN_ACCOUNTS_PAYABLE,
     +                         DEFERRED_PURCHASE_POWER_ADJ,
     +                         acq_CASH_ADDS_2_MATRIALS_INVENTORY,
     +                         acq_CASH_ADDS_2_GAS_INVENTORY,
     +                         acq_EXPENSING_FUEL_INVENTORY,
     +                         acq_EXPENSING_MATRIALS_INVENTORY,
     +                         acq_EXPENSING_GAS_INVENTORY,
     +                         COI_EARNINGS_ADJ)

            CALL RETURN_LEVEL_SALES_PURCHASES(CLASS,
     +                      acq_CAPACITY_SALES_TO_LEVEL_RM,    ! 726
     +                    acq_CAPACITY_PURCHASES_TO_LEVEL_RM,  ! 725
     +                           ADD_2_INCOME_STATEMENT)
            CALL RETURN_CASH_TRANSFERS(CLASS,YR,CASH_TO_CASH,
     +                              CASH_TO_POST_RETIRE_MEDICAL_BAL,
     +                              CASH_TO_ACCRD_MBR_REVENUES_BAL)

            CALL RETURN_GRE_DSC_ADJUSTMENTS(YR,
     +                        acq_GRE_INTEREST_PAYMENTS_MANUAL_ADJS,
     +                        acq_GRE_PRINCIPAL_MANUAL_ADJS)

            STD_MINIMUM_BAL = ns_class_parameters%STDMIN

C ADD-IN OF MONTHLY CAPITAL RATES

            CALL CLASS_CAPITAL_RATES()

            CUM_REG_ASSET_ADJ_AT(CLASS_POS) = REG_ASSESTS_ADJUSTMENT
     +                         + CUM_REG_ASSET_ADJ_AT(CLASS_POS)
            CUM_FASB133_ADJ_AT(CLASS_POS) = FASB133_ADJUSTMENT
     +                           + CUM_FASB133_ADJ_AT(CLASS_POS)
            CUM_FASB109_ADJ_AT(CLASS_POS) = FASB109_ADJUSTMENT
     +                           + CUM_FASB109_ADJ_AT(CLASS_POS)
            CUM_DD_UNAMORT_INTR_ADJ_AT(CLASS_POS) =
     +                     CUM_DD_UNAMORT_INTR_ADJ_AT(CLASS_POS)
     +                     + UNAMORT_INTEREST_ADJUSTMENT
            CUM_DD_UNAMORT_ISSUE_EXP_ADJ_AT(CLASS_POS) =
     +                CUM_DD_UNAMORT_ISSUE_EXP_ADJ_AT(CLASS_POS)
C                             + A NOT ADDED AJUSTMENT

C One level retained earnings adjustment flow to parent

           IF(SUBSIDIARY_CLASS .OR. PARENT_CLASS) BAL_SHEET_RE_SUB_ADJ =
     +              BAL_SHEET_RE_SUB_ADJ + RETAINED_EARNINGS_ADJ
            CALL RETURN_SBU_PASS_THROUGH_VALUES(EXCLUDE_SBU_REVENUE_TAX,
     +                             EXCLUDE_SBU_OTHER_TAXES,
     +                             EXCLUDE_SBU_PROPERTY_TAX,
     +                             EXCLUDE_SBU_STATE_INCOME_TAX,
     +                             EXCLUDE_SBU_CAPITAL_TAX)
            IF(YR == 1) THEN

C SBU USING ANUALIZED LTD AND PS AS A % COST VS $M

               IF(LTDINT(0,CLASS_POS) < 0.) THEN
                  WEIGHTED_CLASS_LTD_COST(CLASS_POS) =
     +                             ABS(LTDINT(0,CLASS_POS))/100.
                  LTDINT(0,CLASS_POS) =
     +                     WEIGHTED_CLASS_LTD_COST(CLASS_POS) *
     +                               LONG_TERM_DEBT(2,CLASS_POS)
               ELSE
                  IF(LONG_TERM_DEBT(2,CLASS_POS) /= 0. .AND.
     +                          LTDINT(0,CLASS_POS) > .001) THEN
                     WEIGHTED_CLASS_LTD_COST(CLASS_POS) =
     +                                   LTDINT(0,CLASS_POS)/
     +                               LONG_TERM_DEBT(2,CLASS_POS)
                  ELSE
                     WEIGHTED_CLASS_LTD_COST(CLASS_POS) = 
     + ns_class_parameters%LTDRTE
                  ENDIF
               ENDIF
               IF(PSDIV(0,CLASS_POS) < 0.) THEN
                  WEIGHTED_CLASS_PS_COST(CLASS_POS) =
     +                              ABS(PSDIV(0,CLASS_POS))/100.
                  PSDIV(0,CLASS_POS) =
     +                       WEIGHTED_CLASS_PS_COST(CLASS_POS) *
     +                              PREFERRED_STOCK(2,CLASS_POS)
               ELSE
                  IF(PREFERRED_STOCK(2,CLASS_POS) /= 0. .AND.
     +                           PSDIV(0,CLASS_POS) > .001) THEN
                     WEIGHTED_CLASS_PS_COST(CLASS_POS) =
     +                                   PSDIV(0,CLASS_POS)/
     +                              PREFERRED_STOCK(2,CLASS_POS)
                  ELSE
      WEIGHTED_CLASS_PS_COST(CLASS_POS) = ns_class_parameters%PSRATE
                  ENDIF
               ENDIF

               ANNINT(0,CLASS_POS) = LTDINT(0,CLASS_POS) +
     +                                        PSDIV(0,CLASS_POS)
               ANN_PS_DIV(0,CLASS_POS) = PSDIV(0,CLASS_POS)
               ANN_LTD_INT(0,CLASS_POS) = LTDINT(0,CLASS_POS)

C GAURD AGAINST BAD BASE YEAR STOCK PRICE

               IF(STOCK_PRICE_YEAR_END(1,CLASS_POS) < -999.) THEN
       STOCK_PRICE_YEAR_END(1,CLASS_POS) = 
     + ns_class_parameters%MARKET_2_BOOK *
     + BOOK_VALUE_STOCK(1,CLASS_POS)
               ENDIF
            ENDIF

C ADJUST NEW LTD INTEREST AND STD INTEREST RATE BY THE SCENARIO DRIVER

            ns_class_parameters%LTDRTE = 
     + ns_class_parameters%LTDRTE * 
     + GET_SCENARIO_BY_INDEX(YR,INT2(7),INT2(26))

            ns_class_parameters%STD_INTEREST_RATE = 
     + ns_class_parameters%STD_INTEREST_RATE *
     + GET_SCENARIO_BY_INDEX(YR,INT2(7),INT2(27))

            EXPENSE_COLLECT_VIA_ADJ_CLAUSE = 0.
            ns_class_parameters%CLASS_ADJ_CLAUSE_REVENUE = 0.
            acq_CLASS_GAS_ADJ_CLAUSE_REVENUE = 0.
            ACQ_CAPITIALIZED_INTEREST = 0.
            DEFERRED_TAX_BASIS = 0.
            ACQ_NF_DEFERRED_TAX_BASIS = 0.
            LEASOR_DEFERRED_TAX_BASIS = 0.
            AMORTIZATION_EXPENSE = 0.
            acq_ATL_AMORTIZATION = 0.
            acq_FASB143_ARO_INTEREST_ACCREATION = 0.
            ACQ_NF_ATL_AMORTIZATION = 0.
            NF_DEFERRED_DEBITS_RATE_BASE = 0.
            acq_NF_CAPITIALIZED_INTEREST = 0.
            BTL_AMORTIZATION = 0.
            BTL_AMORTIZATION_EXP = 0.
            acq_BTL_AMORTIZATION_IN_EXPENSES = 0.
            ATL_DEF_TAXES = 0.
            BTL_DEF_TAXES_CR = 0.
            BTL_DEFERRED_TAXES_DR = 0.
            EA_TAX_BOOK_DEP = 0.
            FA_SL_TAX_DEP = 0.
            LEASOR_NF_SL_TAX_DEP = 0.
            DSM_SL_TAX_DEP_loc = 0.
            LEASOR_NF_AMORTIZATION = 0.
            ACQ_OWNED_NF_BURN = 0.
            OWNED_NF_BURN_EXP_FILE = 0.
            OWNED_NF_BURN_SALES_FILE = 0.
            OWNED_NF_BURN_CL_RESOURCES = 0.
            ACQ_LEASED_NF_BURN = 0.
            LEASED_NF_BURN_EXP_FILE = 0.
            LEASED_NF_BURN_SALES_FILE = 0.
            LEASED_NF_BURN_CL_RESOURCES = 0.
            ACQ_ELIMINATION_CASH_ADJUSTMENT = 0.
            DD_DEFERRED_EXPENSE_CASH = 0.
            TF_OTHER_PURCHASE_POWER_EXPENSE = 0.
            RC_OTHER_PURCHASE_POWER_EXPENSE = 0.
            acq_WVPA_MEMBER_ACCRUED_REVENUES = 0.
            WVPA_PURCHASE_POWER_EXPENSE_ADJ = 0.
            acq_REFERENCE_BASE_REVENUES = 0.
            IF(DUKE_IS_ACTIVE) THEN
               VOID_LOGICAL =  CATAWBA_INFO(YR,CLASS,
     +                              CATAWBA_REVENUES,
     +                              CATAWBA_EXPENSES,
     +                           ACQ_CATAWBA_CAPACITY_PAYMENTS,
     +                           ACQ_CATAWBA_LEVEL_CAP_PAYMENTS,
     +                              acq_CATAWBA_OTHER_NET_REVENUES,
     +                              catawba_deferred_debits,
     +                           CTWBA_DEFER_TAXES_BAL_CR_loc,
     +                              CATAWBA_DEFERRED_TAXES_CR)
        ACQ_CATAWBA_TOTAL_CAP_PAYMENTS = ACQ_CATAWBA_CAPACITY_PAYMENTS -
     +                           ACQ_CATAWBA_LEVEL_CAP_PAYMENTS
            ELSEIF(CPL_IS_ACTIVE .AND. CLASS == EMC_PA_CLASS()) THEN
               CALL CPL_ENERGY_REV_AND_EXP(CATAWBA_REVENUES,
     +                             CPL_ENERGY_2_PA,
     +                             CATAWBA_EXPENSES,
     +                             CPL_ENERGY_FROM_PA,
     +                             CPL_EMC_REVENUES)
               IF(PA_CONTRACT_ACITVE) THEN
                  CATAWBA_REVENUES = CATAWBA_REVENUES + CPL_EMC_REVENUES
               ELSE
                  CATAWBA_REVENUES = CPL_EMC_REVENUES
                  CATAWBA_EXPENSES = 0.
               ENDIF
               ACQ_CATAWBA_CAPACITY_PAYMENTS = 0.
               ACQ_CATAWBA_LEVEL_CAP_PAYMENTS = 0.
               acq_CATAWBA_OTHER_NET_REVENUES = 0.
               catawba_deferred_debits = 0.
               CTWBA_DEFER_TAXES_BAL_CR_loc = 0.
               CATAWBA_DEFERRED_TAXES_CR = 0.
               ACQ_CATAWBA_TOTAL_CAP_PAYMENTS = 0.
            ELSE
               CATAWBA_REVENUES = 0.
               CATAWBA_EXPENSES = 0.
               ACQ_CATAWBA_CAPACITY_PAYMENTS = 0.
               ACQ_CATAWBA_LEVEL_CAP_PAYMENTS = 0.
               acq_CATAWBA_OTHER_NET_REVENUES = 0.
               catawba_deferred_debits = 0.
               CTWBA_DEFER_TAXES_BAL_CR_loc = 0.
               CATAWBA_DEFERRED_TAXES_CR = 0.
               ACQ_CATAWBA_TOTAL_CAP_PAYMENTS = 0.
            ENDIF

            acq_NEW_SUB_INVESTMENT = 0.
            acq_goodwill_of_new_sub_investment = 0.
            IF(PARENT_CLASS) THEN
               IF(NUM_OF_SUBSIDIARIES > 0) THEN
                  acq_NEW_SUB_INVESTMENT =
     +               PARENT_ACQUISITION_OF_SUB_COST(CLASS_LEVEL)
                  acq_goodwill_of_new_sub_investment =
     +                  PARENT_ACQUISITION_GOODWILL(CLASS_LEVEL)
               ENDIF
            ELSEIF(SUBSIDIARY_CLASS .and.
     +                .not. CONSOLIDATING_CLASS(CLASS_POS)) THEN
               acq_NEW_SUB_INVESTMENT =
     +               PARENT_ACQUISITION_OF_SUB_COST(CLASS_LEVEL)
               acq_goodwill_of_new_sub_investment =
     +                  PARENT_ACQUISITION_GOODWILL(CLASS_LEVEL)
            ENDIF
            CUM_GOODWILL_AT(CLASS_POS) = CUM_GOODWILL_AT(CLASS_POS)
     +                + PARENT_ACQUISITION_GOODWILL(CLASS_LEVEL)
     +                + GOODWILL_ADJUSTMENT
            PARENT_ACQUISITION_OF_SUB_COST(CLASS_LEVEL) = 0.
            PARENT_ACQUISITION_GOODWILL(CLASS_LEVEL) = 0.


C ITEMS FROM INIT FILE AND THE PARAMETER FILE

            CALL EXISTING_ASSET_INFO(ASSET_YR,CLASS,EA_CLASS_EXISTS,
     + ns_class_parameters%INCOME_TAX_DEPRECIATION,
     + BOOK_DEPRECIATION,
     + CLASS_GPV(2,CLASS_POS),
     + CLASS_CUMULATIVE_DEPRECIATION(2,CLASS_POS),
     + EA_TAX_BOOK_DEP,
     + DEFERRED_TAX_BASIS,
     + EA_PROPERTY_TAX_GPV,
     + EA_PROPERTY_TAX_NPV,
     + EA_DEFERRED_TAXES)

            CALL DEBT_INFO(ASSET_YR,CLASS,DB_CLASS_EXISTS,
     +     PSDIV(YR,CLASS_POS), ! DEBT_FILE_PREFERRED_DIVIDENDS,
     +   PSRED(YR,CLASS_POS), !DEBT_FILE_PREFERRED_RETIREMENTS,
     +             ns_class_master%DEBT_FILE_PREFERRED_ISSUED,
     +             ns_class_master%DEBT_FILE_LTD_ISSUED,
     +      LTDINT(YR,CLASS_POS), !INTEREST_ON_EXISTING_LTD,
     +         LTDRET(YR,CLASS_POS), !DEBT_FILE_LTD_RETIREMENTS,
     +             ANNINT(YR,CLASS_POS),
     +       ANN_PS_DIV(YR,CLASS_POS), !PREFERRED_STOCK_ANNUALIZED_DIVS
     +         ANN_LTD_INT(YR,CLASS_POS), !LONG_TERM_DEBT_ANNUALIZED_INT
     +             OTHER_INCOME_AFILLIATES,
     +             INVESTMENT_IN_AFILLIATES,
     +             INTEREST_INCOME_AFILLIATES,
     +             LOANS_TO_AFILLIATES,
     +             PS_PREM_BAL,
     +             PS_PREM_AMORT,
     +             LTD_NEW_PREM_ADJUSTMENT,
     +             LTD_PREM_AMORT,
     +             PS_ISSUING_BAL,
     +             PS_ISSUING_AMORT,
     +             LTD_ISSUING_BAL,
     +             LTD_ISSUING_AMORT,
     +             LTD_PS_ISSUE_TAX_EXPENSE,
     +             MIPS_INCOME_TAX_DEDUCTION,
     +             acq_LTD_INTEREST_CASH_PAYMENTS,
     +             acq_PS_DIVIDEND_CASH_PAYMENTS,
     +             acq_CURRENT_LTD_RETIREMENTS)

C INVESTMENT INFORMATION

            CALL DEBT_FILE_INVESTMENT_INFO(ASSET_YR,CLASS,
     +                             INVESTMENTS_MADE,
     +                             INVESTMENTS_SOLD,
     +                             DEBT_FILE_INVESTMENT_INCOME,
     +                             DIVIDEND_70_NONTAXABLE,
     +                             NOTES_RECEIVABLE_MADE,
     +                             NOTES_RECEIVABLE_CLEARED,
     +                             NOTES_PAYABLE_MADE,
     +                             NOTES_PAYABLE_CLEARED,
     +                             acq_NOTES_PAYABLE_INTEREST,
     +                             INTRA_INVESTMENT_INCOME,
     +                           NOTES_PAYABLE_CASH_INTEREST,
     +                           NOTES_RECEIVALBE_CASH_INTEREST)

            INVESTMENTS_BOY = DEBT_FILE_INVESTMENTS(CLASS_POS)
            DEBT_FILE_INVESTMENTS(CLASS_POS) =
     +                      DEBT_FILE_INVESTMENTS(CLASS_POS) +
     +                      INVESTMENTS_MADE - INVESTMENTS_SOLD
            NOTES_PAYABLE_BOY = NOTES_PAYABLE(CLASS_POS)
            NOTES_PAYABLE(CLASS_POS) = NOTES_PAYABLE(CLASS_POS) +
     +                         NOTES_PAYABLE_MADE -
     +                         NOTES_PAYABLE_CLEARED
            acq_NOTES_PAYABLE_BALANCE = NOTES_PAYABLE(CLASS_POS)
            NOTES_RECEIVABLE_BOY = NOTES_RECEIVABLE(CLASS_POS)
            NOTES_RECEIVABLE(CLASS_POS) = NOTES_RECEIVABLE(CLASS_POS) +
     +                            NOTES_RECEIVABLE_MADE -
     +                            NOTES_RECEIVABLE_CLEARED
            acq_NOTES_RECEIVABLE_BALANCE = NOTES_RECEIVABLE(CLASS_POS)
            acq_CASH_CHANGE_IN_NOTES_PAY_REC = NOTES_PAYABLE_CLEARED
     +                             - NOTES_RECEIVABLE_CLEARED
            acq_CASH_CHANGE_IN_NOTES_PAY_REC =
     +                             (NOTES_RECEIVABLE_MADE
     +                              - NOTES_RECEIVABLE_CLEARED)
     +                             -(NOTES_PAYABLE_MADE
     +                               -NOTES_PAYABLE_CLEARED)
c           MONTHLY_COMMON_SHARES_ACTIVE = .FALSE.
            CS_BUYBACK_ADJ_RETAINED_ERNING = 0.
            IF(MONTHLY_MIDAS_ACTIVE .or. .true.) THEN
               CALL DEBT_COMMON_STOCK_INFO(ASSET_YR,CLASS,
     +                          DEBT_COMMON_STOCK_ISSUED,
     +                          DEBT_COMMON_SHARES_ISSUED,
     +                          DEBT_COMMON_STOCK_BUYBACK,
     +                          DEBT_COMMON_SHARES_BUYBACK,
     +                          DEBT_COMMON_STOCK_BALANCE,
     +                          DEBT_COMMON_SHARES_OUTSTANDING,
     +                          CS_ISSUE_EXP_BAL,
     +                          CS_ISSUE_EXP_AMORT,
     +                          CS_ISSUE_EXP_THIS_PERIOD,
     +                          NET_MONTHLY_SHARES,
     +                          CS_BUYBACK_ADJ_RETAINED_ERNING,
     +                          COMMON_STOCK_ISSUED_2_EQUITY,
     +                          COMMON_STOCK_BUY_FROM_EQUITY)

            ENDIF

C ADDED 1/17/98
            DEBT_FILE_ISSUE_EXPENSE = LTD_PS_ISSUE_TAX_EXPENSE
     +                        + CS_ISSUE_EXP_THIS_PERIOD
            ns_class_master%FED_INCOME_TAX_DEDUCTIONS = 
     + ns_class_master%FED_INCOME_TAX_DEDUCTIONS
     +                          + MIPS_INCOME_TAX_DEDUCTION
     +                          + LTD_PS_ISSUE_TAX_EXPENSE
     +                          + CS_ISSUE_EXP_THIS_PERIOD
            ns_class_master%STATE_INCOME_TAX_DEDUCTIONS = 
     + ns_class_master%STATE_INCOME_TAX_DEDUCTIONS
     +                            + MIPS_INCOME_TAX_DEDUCTION
     +                            + LTD_PS_ISSUE_TAX_EXPENSE
     +                            + CS_ISSUE_EXP_THIS_PERIOD
          acq_PS_PREM_ISSUE_EXP_AMORT = PS_ISSUING_AMORT - PS_PREM_AMORT

            LTD_PS_DEFERRED_TAX_BASIS = LTD_PS_ISSUE_TAX_EXPENSE
     +                          + CS_ISSUE_EXP_THIS_PERIOD
     +                          - LTD_ISSUING_AMORT
     +                          - PS_ISSUING_AMORT
     +                          - CS_ISSUE_EXP_AMORT

            CALL DEBIT_INFO(ASSET_YR,CLASS,DD_CLASS_EXISTS,
     +                 DD_BALANCE,
     +             DEFERRED_DEBITS_RATE_BASE(2,CLASS_POS),
     +             AMORTIZATION_EXPENSE,
     +             NET_DD_BALANCE(2,CLASS_POS),
     +                 DD_CUM_AMORTIZATION,
     +                 DD_CUM_RB_AMORTIZATION,
     +             acq_INTEREST_AMORT_FROM_DEBIT_FILE,
     +             acq_ATL_AMORTIZATION,
     +             BTL_AMORTIZATION,
     +             ATL_DEF_TAXES,
     +             BTL_DEF_TAXES_CR,
     +             UNAMORTIZED_INTEREST_BALANCE(2,CLASS_POS),
     +             DD_DEFERRED_EXPENSE_CASH,
     +             acq_VARIABLE_OM_AMORT,
     +             DD_ATL_CURRENT_TAX_EXPENSE,
     +             DD_BTL_CURRENT_TAX_EXPENSE,
     +             acq_OTHER_OM_AMORT,
     +             acq_PURCHASE_POWER_AMORT,
     +             OTHER_DD_BALANCE(2,CLASS_POS),
     +             GOODWILL(2,CLASS_POS),
     +             acq_CLASS_REGULATORY_ASSETS,
     +             acq_FASB_109,
     +             acq_FASB_133,
     +             acq_OTHER_DD_AMORT,
     +             acq_GOODWILL_AMORT,
     +             acq_CLASS_REGULATORY_ASSETS_AMORT,
     +             acq_FASB_109_AMORT,
     +             acq_FASB_133_AMORT,
     +             UNAMORTIZED_ISSUE_EXP_BALANCE(2,CLASS_POS),
     +             DEFERRED_CREDITS_IN_RATE_BASE(2,CLASS_POS),
     +             OTHER_DEFERRED_CREDITS_BAL(2,CLASS_POS),
     +             REGULATORY_DEFERRED_CREDITS_BAL(2,CLASS_POS),
     +             GAIN_ON_REAQUIRED_DEBT_BAL(2,CLASS_POS),
     +             DEFERRED_GAIN_FROM_SALES(2,CLASS_POS))

            BOY_ISSUE_EXP_BAL = DEBT_FILE_UNAMORT_ISS_EXP_BAL(CLASS_POS)
     +              + UNAMORTIZED_ISSUE_EXP_BALANCE(1,CLASS_POS)
            DEBT_FILE_UNAMORT_ISS_EXP_BAL(CLASS_POS) = PS_ISSUING_BAL
     +  + CS_ISSUE_EXP_BAL! is shown as an interest or dividends

            DEBT_FILE_UNAMORT_INTR_BAL(CLASS_POS) = LTD_ISSUING_BAL

            acq_ATL_AMORTIZATION = acq_ATL_AMORTIZATION
     +                 + CS_ISSUE_EXP_AMORT
            NET_DD_BALANCE(2,CLASS_POS) = NET_DD_BALANCE(2,CLASS_POS)
     +       ! These are net balances which are
     +                + DEBT_FILE_UNAMORT_ISS_EXP_BAL(CLASS_POS)
     +                + DEBT_FILE_UNAMORT_INTR_BAL(CLASS_POS)

            acq_UNAMORT_DEBT_INTEREST_BAL =
     +                     DEBT_FILE_UNAMORT_INTR_BAL(CLASS_POS)
            acq_UNAMORT_DEBIT_INTEREST_BAL =
     +                 UNAMORTIZED_INTEREST_BALANCE(2,CLASS_POS)
            UNAMORT_DEBT_ISS_EXPENSE_BAL =
     +                  DEBT_FILE_UNAMORT_ISS_EXP_BAL(CLASS_POS)
            UNAMORT_DEBIT_ISS_EXPENSE_BAL =
     +                UNAMORTIZED_ISSUE_EXP_BALANCE(2,CLASS_POS)
            acq_CLASS_UNAMORTIZED_ISSUE_EXP_BALANCE =
     +                UNAMORTIZED_ISSUE_EXP_BALANCE(2,CLASS_POS)
            acq_CLASS_UNAMORTIZED_INTEREST_BAL =
     +                              acq_UNAMORT_DEBT_INTEREST_BAL
     +                              + acq_UNAMORT_DEBIT_INTEREST_BAL

            INTEREST_AMORTIZATION = acq_INTEREST_AMORT_FROM_DEBIT_FILE
     +         - LTD_PREM_AMORT   ! 1/23/98 CHANGED FORM MINUS
     +                      + LTD_ISSUING_AMORT

C NOTE!!! EXPENSE VARIABLES ARE SET TO ZERO IN THE FOLLOWING ROUTINE
C EXCEPT FOR THE FOLLOWING WHICH ARE INITIALIZED BY READING THE
C FINANCIAL PARAMETER FILE

      ns_class_parameters%ATL_LEASE_PAYMENTS = 0.
      ns_class_parameters%BTL_LEASE_PAYMENTS = 0.

            CALL EXPENSE_REVENUE_INFO(ASSET_YR,CLASS,EX_CLASS_EXISTS,
     +  acq_VARIABLE,
     +  EXP_FUEL_EXPENSE,
     +  EXP_PURCHASE_POWER_EXPENSE,
     +  EXP_FILE_VARIABLE_EXPENSE,
     +  EXP_FILE_FIXED_EXPENSE,
     +  acq_OTHER_EXPENSE_1,
     +  acq_OTHER_EXPENSE_2,
     +  acq_OTHER_EXPENSE_3,
     +  OWNED_NF_BURN_EXP_FILE,
     +  LEASED_NF_BURN_EXP_FILE,
     +  ACQ_DSM_EXPENSE,
     +  ACQ_DSM_REBATE,
!       REVENUES
     +  ns_class_parameters%CLASS_ADJ_CLAUSE_REVENUE,
     +  BASE_RATES_REVENUES,
     +  ns_class_assets_results_2%SECONDARY_SALES_REVENUES,
     +  SECONDARY_SALES_NOT_IN_RATES,
     +  ns_class_parameters%CLASS_OTHER_REVENUE,
     +  ns_class_parameters%CLASS_BTL_REVENUES,
     +  ns_class_parameters%CLASS_BTL_EXPENSES,
     +  ns_class_parameters%ATL_LEASE_PAYMENTS,
     +  ns_class_parameters%BTL_LEASE_PAYMENTS,
     +  EXP_SERVICE_TRANSACTIONS,
     +  CLASS_EXP_EMIS_EXPENSE,
     +  ACQ_DOE_NUC_FUEL_FEE,
     +  ACQ_NUC_DECOMMISSIONING_COST,
     +  CATAWBA_REVENUES,
     +  CATAWBA_EXPENSES,
     +  acq_GAS_REVENUES,
     +  acq_TRANSMISSION_OPERATION,
     +  acq_TRANSMISSION_MAINTENANCE,
     +  acq_DISTRIBUTION_OPERATION,
     +  acq_DISTRIBUTION_MAINTENANCE,
     +  acq_CUSTOMER_ACCOUNTS,
     +  acq_CUSTOMER_SERVICES,
     +  acq_SALES_EXPENSE,
     +  acq_AG_OPERATIONS,
     +  acq_AG_MAINTENANCE,
     +  acq_UNBILLED_REVENUES,
     +  acq_ATL_DEFERRED_REVENUES,
     +  acq_RELATIONSHIP_REVENUES,
     +  acq_RESIDENTIAL_REVENUES,
     +  acq_COMMERCIAL_REVENUES,
     +  acq_INDUSTRIAL_REVENUES,
     +  acq_LIGHTING_REVENUES,
     +  acq_BULK_POWER_REVENUES,
     +  ns_class_parameters%PARM_AMORTIZATION_ADJUSTMENT,
     +  ns_class_parameters%AMORT_DEF_REVENUES,
     +  acq_ATL_LEASE_AMORTIZATION,
     +  acq_BTL_LEASE_AMORTIZATION,
     +  EXP_BOOK_DEPRECIATION,
     +  acq_OTHER_INCOME_NET_OF_TAX,
     +  acq_CAPACITY_SALES_REVENUE,
     +  acq_GOVERNMENT_SALES_REVENUE,
     +  BTL_AMORTIZATION_EXP,
     +  acq_CHANGE_IN_ACCOUNTS_RECEIVABLE,
     +  acq_EXP_CHANGE_IN_ACCOUNTS_PAYABLE,
     +  acq_ATL_LEASE_INTEREST,
     +  acq_BTL_LEASE_INTEREST,
     +  BTL_NUC_FUEL_DECOM_LIABILITY,
     +  EXP_DEFERRED_FUEL_EXPENSE,
     +  ACQ_VACATION_PAY_NON_CASH,
     +  PENSION_EXPENSE_NON_CASH,
     +  STORM_EXPENSE_NON_CASH,
     +  acq_CLASS_GAS_ADJ_CLAUSE_REVENUE,
     +  STD_INTEREST_ADDEN,
     +  LTD_INTEREST_ADDEN,
     +  acq_WVPA_MEMBER_ACCRUED_REVENUES,
     +  EXP_WVPA_NON_MEMBER_COST_OF_POWER,
     +  EXP_WVPA_MEMBER_COST_OF_POWER,
     +  acq_WVPA_MEMBER_COST_OF_SERVICES,
     +  acq_WVPA_NON_MEMBER_COST_OF_SERVICES,
     +  acq_REGULATED_REVENUES_13,
     +  acq_NON_REG_REVENUES_10,
! 
! Merge2issue - John dropped PENSION_EXPENSE_CASH argument
! because too many arguments were being passed in the call
! and Exp_preferred_dividends looked like more of a match
! for this position. This means that a different value is
! being passed for the Exp_preferredDividends, Exp_AFDCBorrowed, 
! and the Exp_AFDCEquity positions.
! TODO: Add tracing
     +  Exp_PreferredDividends,
     +  Exp_AFDCBorrowed,
     +  Exp_AFDCEquity)
!
! Merge2issue - John dropped exp_interest_income and exp_dividends
! arguments because they're not defined in the routine being
! called. These are not expect to affect results.
! TODO: Make sure.
! TODO: Add tracing
            Mark_To_Market = acq_VARIABLE(786)
            Payroll_Taxes = acq_VARIABLE(787)
            FE_NonCashPension = acq_VARIABLE(791)
            FE_NonCashEarningsNonCorp =  acq_VARIABLE(790)

            DIVIDEND_70_NONTAXABLE = DIVIDEND_70_NONTAXABLE
     +                       + Exp_Dividends
            PSDIV(YR,CLASS_POS) = PSDIV(YR,CLASS_POS)
     +                    + Exp_PreferredDividends
            acq_WVPA_NON_MEMBER_COST_OF_POWER =
     +                         EXP_WVPA_NON_MEMBER_COST_OF_POWER
            acq_WVPA_MEMBER_COST_OF_POWER = 
     + EXP_WVPA_MEMBER_COST_OF_POWER
            !INTEREST_ON_EXISTING_LTD
            LTDINT(YR,CLASS_POS) = LTDINT(YR,CLASS_POS)
     +                     + LTD_INTEREST_ADDEN

            CALL FE_EXPENSE_SUB_CLASSES(ASSET_YR,CLASS,acq_VARIABLE)

C RECEIVABLES AND PAYABLES

            IF(globecom_YEAR <= LAST_AVAILABLE_MONTHLY_YEAR .AND.
     +                                MONTHLY_MIDAS_ACTIVE) THEN
               CALL CHANGE_IN_RECD_PAYS_4_REV_FORC(CLASS,
     +                           acq_CHANGE_IN_ACCOUNTS_RECEIVABLE,
     +                           acq_EXP_CHANGE_IN_ACCOUNTS_PAYABLE)
               acq_WVPA_CHANGE_IN_ACCOUNTS_PAYABLE = 0.

               acq_CHANGE_IN_ACCOUNTS_PAYABLE =
     +                        acq_EXP_CHANGE_IN_ACCOUNTS_PAYABLE
     +                        + acq_WVPA_CHANGE_IN_ACCOUNTS_PAYABLE
       acq_CASH_TIMING_ADJUSTMENTS = acq_CHANGE_IN_ACCOUNTS_PAYABLE
     +                           - acq_CHANGE_IN_ACCOUNTS_RECEIVABLE
            ELSE
               acq_CHANGE_IN_ACCOUNTS_PAYABLE = 0.
               acq_CHANGE_IN_ACCOUNTS_RECEIVABLE = 0.
               acq_CASH_TIMING_ADJUSTMENTS = 0.
               acq_EXP_CHANGE_IN_ACCOUNTS_PAYABLE = 0.
               acq_WVPA_CHANGE_IN_ACCOUNTS_PAYABLE = 0.
            ENDIF

            CALL CASH_FROM_DEFERRED_EXP_ACCOUNTS(ASSET_YR,CLASS,
     +                                acq_PENSION_EXPENSE_CASH,
     +                                acq_STORM_EXPENSE_CASH,
     +                                acq_VACATION_PAY_CASH,
     +                                acq_ExecBenefitsCash,
     +                                acq_IncentiveCompensationCash)
            CALL RETURN_BAL_SHEET_LIAB_PAYMENTS(YR,CLASS,
     +                                acq_PENSION_EXPENSE_CASH,
     +                                acq_STORM_EXPENSE_CASH,
     +                                acq_VACATION_PAY_CASH)

            ns_class_parameters%DEFERRED_REVENUES = 
     + ns_class_parameters%DEFERRED_REVENUES+
     + acq_ATL_DEFERRED_REVENUES
            BTL_AMORTIZATION = BTL_AMORTIZATION + BTL_AMORTIZATION_EXP
            acq_BTL_AMORTIZATION_IN_EXPENSES = 
     + acq_BTL_AMORTIZATION_IN_EXPENSES
     +  + acq_BTL_LEASE_AMORTIZATION
     +  + BTL_AMORTIZATION
     +  - ns_class_parameters%BTL_AMORT_OF_BOOK

C TAX STUFF

            DEFERRED_TAXES_DR_TAX_FILE = 0.
            CALL RETURN_TAX_INFO(CLASS,ASSET_YR,
     +  ns_class_parameters%CLASS_ADDENDUM_TO_PROPERTY_TAX,
     +  ns_class_parameters%CLASS_ADDENDUM_2_OTHER_TAXES,
     +  ns_class_parameters%ADJUSTMENT_2_OP_REV_TAX,
     +  acq_FED_TAX_CREDIT_PASSED_UP,
     +  acq_STATE_TAX_CREDIT_PASSED_UP,
     +  acq_ADJ_2_FEDERAL_TAXES,
     +  acq_ADJ_2_STATE_TAXES,
     +  acq_M1_FED_ADDITIONS,
     +  acq_M1_FED_DEDUCTIONS,
     +  acq_M1_STATE_ADDITIONS,
     +  acq_M1_STATE_DEDUCTIONS,
     +  ns_class_parameters%DEFERRED_TAX_ADJUSTMENT,
     +    DEFERRED_TAXES_DR_TAX_FILE, 
     +   ns_class_parameters%ADDENDUM_TO_ITC_AMORTIZATED,
     +   acq_SEC_29_CREDITS_PASSED_UP,
     +   acq_SEC_42_CREDITS_PASSED_UP,
     +   ns_class_parameters%ACE_TAX_DEPRECIATION,
     +   ns_class_parameters%TAX_PREFERENCE_DEPRECIATION,
     +   BTL_DEFERRED_TAXES_CR,
     +   BTL_DEFERRED_TAXES_DR,
     +   AMT_INCOME_ADDENDUM,
     +   ns_class_parameters%INCOME_TAX_DEPRECIATION,
     +   ns_class_parameters%BTL_MISC_DEDUCTIONS)

C 1/27/09 added Production Taxes Credits (PTC)

            CLASS_PTCs = 0.
            IF(PARENT_CLASS .AND. .FALSE.)
     +          CALL GET_PTCs_TEST(CLASS,CLASS_PTCs)
            acq_FED_TAX_CREDIT_PASSED_UP = acq_FED_TAX_CREDIT_PASSED_UP
     +                         + CLASS_PTCs(0)

C END PTCs

            CALL EXPENSE_FILE_TAXES(YR,CLASS,
     + EXP_FILE_PROPERTY_TAXES,
     + acq_WVPA_PROPERTY_TAXES_IN_POWER_COSTS,
     + ns_class_parameters%CLASS_ADDENDUM_2_OTHER_TAXES,
     + ns_class_parameters%ADJUSTMENT_2_OP_REV_TAX)
            ns_class_master%FED_INCOME_TAX_DEDUCTIONS = 
     + ns_class_master%FED_INCOME_TAX_DEDUCTIONS
     +   + acq_M1_FED_DEDUCTIONS
     +   - acq_M1_FED_ADDITIONS
     +   + ns_class_parameters%BTL_MISC_DEDUCTIONS
            ns_class_master%STATE_INCOME_TAX_DEDUCTIONS = 
     + ns_class_master%STATE_INCOME_TAX_DEDUCTIONS
     +   + acq_M1_STATE_DEDUCTIONS
     +   - acq_M1_STATE_ADDITIONS
     +   + ns_class_parameters%BTL_MISC_DEDUCTIONS

C TAX RATES

            ns_class_parameters%FEDERAL_TAX_RATE = 
     + FEDERAL_INCOME_TAX_RATE()/100.
            NORMALIZATION_TAX_RATE = 0.
            IF(IOU_UTILITY) THEN
               IF(NORMALIZE_FEDERAL_TAXES .AND.
     +                               NORMALIZE_STATE_TAXES) THEN
                  NORMALIZATION_TAX_RATE = 
     + ns_class_parameters%FEDERAL_TAX_RATE *
     + (1.-ns_class_parameters%STATE_TAX_RATE)+
     + ns_class_parameters%STATE_TAX_RATE
               ELSEIF(NORMALIZE_FEDERAL_TAXES) THEN
                  NORMALIZATION_TAX_RATE = 
     + ns_class_parameters%FEDERAL_TAX_RATE
               ELSEIF(NORMALIZE_STATE_TAXES) THEN
       NORMALIZATION_TAX_RATE = ns_class_parameters%STATE_TAX_RATE
               ENDIF
            ENDIF

            acq_variable_expense = 0.
            ACQ_FIXED_EXPENSE = 0.
            acq_fuel_expense = 0.
            acq_PURCHASE_POWER_EXPENSE = 0.
            acq_OTHER_PURCHASE_POWER_EXPENSE = 0.


               CALL RC_EXPENSE_REVENUE_INFO(CLASS,
     +                           acq_fuel_expense,
     +  RC_OTHER_PURCHASE_POWER_EXPENSE,
     +   acq_variable_expense,
     +   ACQ_FIXED_EXPENSE,
     +   acq_OTHER_EXPENSE_1,
     +   acq_OTHER_EXPENSE_2,
     +   acq_OTHER_EXPENSE_3,
     +   OWNED_NF_BURN_SALES_FILE,
     +   LEASED_NF_BURN_SALES_FILE,
     +   EXPENSE_COLLECT_VIA_ADJ_CLAUSE,
     +   ACQ_DSM_EXPENSE,
     +   ACQ_DSM_REBATE,
!        REVENUES
     +   ns_class_parameters%CLASS_ADJ_CLAUSE_REVENUE,
     +   MARKET_BASE_REVENUES,
     +   ns_class_assets_results_2%SECONDARY_SALES_REVENUES,
     +   ns_class_parameters%CLASS_OTHER_REVENUE,
     +   ns_class_parameters%CLASS_BTL_REVENUES,
     +   ns_class_parameters%CLASS_BTL_EXPENSES,
     +   ns_class_parameters%ATL_LEASE_PAYMENTS,
     +   ns_class_parameters%BTL_LEASE_PAYMENTS,
     +   EXP_SERVICE_TRANSACTIONS,
     +   acq_GAS_REVENUES,
     +   CATAWBA_REVENUES,
     +   acq_RESIDENTIAL_REVENUES,
     +   acq_COMMERCIAL_REVENUES,
     +   acq_INDUSTRIAL_REVENUES,
     +   acq_LIGHTING_REVENUES,
     +   acq_BULK_POWER_REVENUES,
     +   acq_CAPACITY_SALES_REVENUE,
     +   acq_GOVERNMENT_SALES_REVENUE,
     +   acq_CLASS_GAS_ADJ_CLAUSE_REVENUE,
     +   acq_COMPETITIVE_SALES_REVENUE,
     +   acq_FE_Competitive_Unit_Sales,
     +   acq_FE_Intra_Company_Utility_Sales)


            CALL SERVICE_TRANS_INFO(CLASS,acq_fuel_expense,
     +  acq_OTHER_PURCHASE_POWER_EXPENSE,
     +  acq_variable_expense,
     +  ACQ_FIXED_EXPENSE,
     +  acq_OTHER_EXPENSE_1,
     +  acq_OTHER_EXPENSE_2,
     +  acq_OTHER_EXPENSE_3,
     +  OWNED_NF_BURN_EXP_FILE,
     +  LEASED_NF_BURN_EXP_FILE,
     +  EXPENSE_COLLECT_VIA_ADJ_CLAUSE,
     +  NF_BURN_IN_RATEBASE,
     +  ACQ_DSM_EXPENSE,
     +  ACQ_DSM_REBATE,
!       REVENUES
     +  ns_class_parameters%CLASS_ADJ_CLAUSE_REVENUE,
     +  BASE_RATES_REVENUES,
     +  ns_class_assets_results_2%SECONDARY_SALES_REVENUES,
     +  ns_class_parameters%CLASS_OTHER_REVENUE,
     +  ns_class_parameters%CLASS_BTL_REVENUES,
     +  ns_class_parameters%CLASS_BTL_EXPENSES,
     +  ns_class_parameters%ATL_LEASE_PAYMENTS,
     +  ns_class_parameters%BTL_LEASE_PAYMENTS,
     +  EXP_SERVICE_TRANSACTIONS,
     +  CLASS_EXP_EMIS_EXPENSE,
     +  ACQ_DOE_NUC_FUEL_FEE,
     +  ACQ_NUC_DECOMMISSIONING_COST,
     +  CATAWBA_REVENUES,
     +  CATAWBA_EXPENSES,
     +  acq_CAPACITY_SALES_REVENUE)

            VOID_INT2 = RETURN_CONTRACT_CLASS_INFO(CLASS,
     +  ACQ_FIXED_EXPENSE,
     +  acq_variable_expense,
     +  acq_OTHER_PURCHASE_POWER_EXPENSE,
     +  ns_class_parameters%CLASS_BTL_EXPENSES,
     +  EXPENSE_COLLECT_VIA_ADJ_CLAUSE,
     +  ns_class_assets_results_2%SECONDARY_SALES_REVENUES)

            VOID_INT2 = RETURN_ANNUL_CUSTOMER_VARIABLES(CLASS,
     +   TF_OTHER_PURCHASE_POWER_EXPENSE,
     +   ns_class_assets_results_2%SECONDARY_SALES_REVENUES,
     +   acq_CAPACITY_SALES_REVENUE,
     +   acq_REGULATED_REVENUES_11,
     +   acq_RESIDENTIAL_REVENUES,
     +   acq_COMPETITIVE_SALES_REVENUE,
     +   acq_UTILITY_SALES_REVENUE,
     +   acq_COMMERCIAL_REVENUES,
     +   acq_INDUSTRIAL_REVENUES,
     +   acq_LIGHTING_REVENUES,
     +   acq_BULK_POWER_REVENUES,
     +   acq_GOVERNMENT_SALES_REVENUE,
     +   acq_FE_Competitive_Unit_Sales,
     +  CUST_CAP_PURCHASES_TO_LEVEL_RM)  ! 725


            IF(.NOT. ASSET_ANALYST_ONLY()) THEN
               CALL ENRG_LIMITED_INFO(CLASS,ENRG_CLASS_EXISTS,
     +   acq_OTHER_PURCHASE_POWER_EXPENSE, ! acq_PURCHASE_POWER_EXPENSE,
     +  acq_variable_expense,
     +  ACQ_FIXED_EXPENSE,
     +  EXPENSE_COLLECT_VIA_ADJ_CLAUSE,
     +  EXPENSE_COLLECT_VIA_BASE_RATES,
     +  EXPENSE_NOT_COLLECTED_IN_RATES,
     +  ns_class_parameters%CLASS_BTL_REVENUES,
     +  ns_class_assets_results_2%SECONDARY_SALES_REVENUES,
     +  SECONDARY_SALES_NOT_IN_RATES,
     +  ns_class_parameters%CLASS_BTL_EXPENSES,
     +  EL_MARKET_REVENUES,
     +  EL_MARKET_PURCHASES)
            ENDIF

            CALL NUCLEAR_FUEL_INFO(ASSET_YR,CLASS,NF_CLASS_EXISTS,
     +                ACQ_NF_CASH,
     +                NF_IN_PROCESS(2,CLASS_POS),
     +                  ACQ_NF_ENTERING_SERVICE,
     +                NFIS(2,CLASS_POS),
     +                CLASS_NET_NF_VALUE(2,CLASS_POS),
     +                NUC_FUEL_RATE_BASE(2,CLASS_POS),
     +                  acq_NF_AFUDC_ON_CASH,
     +                  NF_AFUDC_CAPITIALIZED,
     +                  NF_CURRENT_TAX_EXPENSE,
     +                  NF_DEFERRED_DEBIT_BALANCE,
     +                DEFERRED_DEBITS_RATE_BASE(2,CLASS_POS),
     +                ACQ_NF_ATL_AMORTIZATION,
     +                  NF_EXTRAORDINARY_EXPENSE,
     +                  NAFEXP,
     +                  NF_CLASS_ADJAFC,
     +                  NWODFT,
     +                  NAFDCB,
     +                  NAFDCD,
     +                acq_CLASS_LEASED_NFCE,
     +                acq_NF_CAPITIALIZED_INTEREST,
     +                acq_NF_TAX_DEPRECIATION,
     +                NF_SL_TAX_DEPRECIATION_loc,
     +                LEASOR_DEFERRED_TAX_BASIS,
     +                LEASOR_NF_AMORTIZATION,
     +                LEASOR_NF_SL_TAX_DEP,
     +                LEASOR_NF_TAX_DEP)
           acq_ATL_AMORTIZATION = acq_ATL_AMORTIZATION + 
     + ACQ_NF_ATL_AMORTIZATION
            ACQ_CAPITIALIZED_INTEREST = ACQ_CAPITIALIZED_INTEREST +
     +                                  acq_NF_CAPITIALIZED_INTEREST
            ACQ_NF_ENTERING_SERVICE = ACQ_NF_ENTERING_SERVICE +
     +                                     NF_AFUDC_CAPITIALIZED

            CALL FUTURE_ASSET_INFO(ASSET_YR,CLASS,FA_CLASS_EXISTS,
     +                CLASS_GPV(2,CLASS_POS),
     +                  FA_CUMULATIVE_BOOK_DEP,
     +                  ACQ_FA_CASH,
     +                  FA_CAPITIALIZED,
     +                ns_class_parameters%INCOME_TAX_DEPRECIATION,
     +                BOOK_DEPRECIATION,
     +                  FA_AFDC_CASH,
     +                  FA_AFDC_CAPITIALIZED,
     +                CLASS_CWIP(2,CLASS_POS),
     +                CWIP_IN_RATE_BASE(2,CLASS_POS),
     +                  FA_CURRENT_TAX_EXPENSES,
     +                ACQ_CAPITIALIZED_INTEREST,
     +                  FA_PROPERTY_TAX_GPV,
     +                  FA_PROPERTY_TAX_NPV,
     +                acq_ATL_AMORTIZATION,
     +                  FA_EXTRAORDINARY_EXPENSE,
     +                  FA_NET_DEFERRED_DEBIT_BAL,
     +                DEFERRED_DEBITS_RATE_BASE(2,CLASS_POS),
     +                DEFERRED_TAX_BASIS, ! TTXDEF
     +                  FA_SL_TAX_DEP, ! TBKDPT(I)
     +              ns_class_parameters%TAX_PREFERENCE_DEPRECIATION, 
     +             ns_class_parameters%ACE_TAX_DEPRECIATION, 
     + ! TBKDPA(I) write-off adjustment to cumulative book depreciaton
     +                  FA_WO_ADJUSTMENT_2_CUM_BOOK_DEP,
     + ! TAFDPA(I) write_off adj to cumulative afdc dep.
     +                  FA_WO_ADJUSTMENT_2_CUM_AFDC_DEP,
     +                  FA_AFDC_BORROWED, ! TAFDCB(I)
     +                 FA_WO_ADJUSTMENT_2_CUM_AFDC, ! TAFCAJ(I)
     +               FA_WO_ADJUSTMENT_2_CUM_AFEXP,  ! TAFEXP(I)
     +               FA_WO_ADJUSTMENT_2_CUM_DEF_TAX, ! TWODFT(I)
     +               FA_WO_ADJUSTMENT_2_CUM_AFDCF,   ! TAFDCF(I)
     +                  FA_ITC_CREDIT)
            acq_FED_TAX_CREDIT_PASSED_UP = acq_FED_TAX_CREDIT_PASSED_UP
     +                         + FA_ITC_CREDIT

C ASSETS ADDED BY MIDAS

            CALL MODEL_ASSET_INFO(ASSET_YR,CLASS,
     +                    MODEL_ASSET_CLASS_EXISTS,
     +                CLASS_GPV(2,CLASS_POS),
     +                  FA_CUMULATIVE_BOOK_DEP,
     +                  ACQ_FA_CASH,FA_CAPITIALIZED,
     +                ns_class_parameters%INCOME_TAX_DEPRECIATION,
     +                BOOK_DEPRECIATION,
     +                  FA_AFDC_CASH,
     +                  FA_AFDC_CAPITIALIZED,
     +                CLASS_CWIP(2,CLASS_POS),
     +                CWIP_IN_RATE_BASE(2,CLASS_POS),
     +                  FA_CURRENT_TAX_EXPENSES,
     +                ACQ_CAPITIALIZED_INTEREST,
     +                  FA_PROPERTY_TAX_GPV,FA_PROPERTY_TAX_NPV,
     +                acq_ATL_AMORTIZATION,
     +                  FA_EXTRAORDINARY_EXPENSE,
     +                  FA_NET_DEFERRED_DEBIT_BAL,
     +                DEFERRED_DEBITS_RATE_BASE(2,CLASS_POS),
     +                DEFERRED_TAX_BASIS, ! TTXDEF
     +                  FA_SL_TAX_DEP, ! TBKDPT(I)
     + ns_class_parameters%TAX_PREFERENCE_DEPRECIATION, ! TTXPREFDEP(I)
     +            ns_class_parameters%ACE_TAX_DEPRECIATION, 
     +                  FA_WO_ADJUSTMENT_2_CUM_BOOK_DEP,
     +                  FA_WO_ADJUSTMENT_2_CUM_AFDC_DEP,
     +                  FA_AFDC_BORROWED, ! TAFDCB(I)
     +               FA_WO_ADJUSTMENT_2_CUM_AFDC, ! TAFCAJ(I)
     +               FA_WO_ADJUSTMENT_2_CUM_AFEXP,  ! TAFEXP(I)
     +               FA_WO_ADJUSTMENT_2_CUM_DEF_TAX, ! TWODFT(I)
     +               FA_WO_ADJUSTMENT_2_CUM_AFDCF)  ! TAFDCF(I)

C DERIVATIVE INFORMATION

            acq_PHYS_DERIVATIVES_VAR_REVENUE = 0.
            acq_PHYS_DERIVATIVES_FIX_REVENUE = 0.
            acq_FIN_DERIVATIVES_VAR_REVENUE = 0.
            acq_FIN_DERIVATIVES_FIX_REVENUE = 0.
            acq_PHYS_DERIVATIVES_VAR_EXPENSE = 0.
            acq_PHYS_DERIVATIVES_FIX_EXPENSE = 0.
            acq_FIN_DERIVATIVES_VAR_EXPENSE = 0.
            acq_FIN_DERIVATIVES_FIX_EXPENSE = 0.


C DSM INFORMATION

            CALL DSM_EXPENSE_INFO(CLASS,DSM_EXPENSE_CLASS_EXISTS,
     +  ACQ_DSM_EXPENSE,
     +  ACQ_DSM_REBATE,
     +         acq_OTHER_PURCHASE_POWER_EXPENSE,
     +  ns_class_assets_results_2%SECONDARY_SALES_REVENUES,
     +  ns_class_parameters%CLASS_BTL_EXPENSES,
     +  ns_class_parameters%CLASS_BTL_REVENUES,
     +  DSM_ADJ_CLAUSE_COLLECTIONS,
     +  DSM_CAPITIAL,
     +  DSM_CAPACITY,
     +  DSM_ENERGY,
     +  DSM_PARTICIPANT_COSTS,
     +  DSM_UTIL_NON_ELEC_COSTS,
     +  DSM_THIRD_PARTY_COSTS,
     +  DSM_OTH_PARTICIPANT_COSTS)

            CALL DSM_ASSET_INFO(YR,CLASS,DSM_ASSET_CLASS_EXISTS,
     +             BOOK_DEPRECIATION,
     +               DSM_CUM_BOOK_DEP,
     +               CLASS_GPV(2,CLASS_POS),
     +               DSM_AFUDC,
     +               ns_class_parameters%INCOME_TAX_DEPRECIATION,
     +               DSM_TAX_EXPENSE,
     +             acq_ATL_AMORTIZATION,
     +               DSM_DEFERRED_DEBIT,
     +               DEFERRED_TAX_BASIS,
     +               DSM_TAX_PREF_DEP_ord,
     +               RB_DSM_AMRT_ord,
     +               RB_DSM_DFRD_TAX_BASIS,
     +               RB_DSM_AFUDC,
     +               RB_DSM_TAX_EXPENSE,
     +               DSM_REGLTD_BOOK_DEP,
     +               DSM_REGLTD_TAX_DEP,
     +               DSM_RGLTD_DEFERRED_DEBIT,
     +               DSM_REGULATED_NPV,
     +               DSM_GPV_PROP_TAX_loc,
     +               DSM_NPV_PROP_TAX_loc,
     +               DSM_SL_TAX_DEP_loc)

            CL_MARKET_PURCHASES = 0.
            CL_MARKET_REVENUES = 0.
            CL_VAR_MARKET_PURCHASES = 0.
            CL_FIXED_MARKET_PURCHASES = 0.
            CLASS_INC_EMIS_EXPENSE = 0.
            CLASS_INC_EMIS_REVENUE = 0.
            WVPA_EMISSIONS_EXPENSE = 0.
            call write_trace_real(file_trace_aca, "1. ICS_T/L/RM",
     + acq_INC_CAPACITY_SALES_TO_LEVEL_RM)
            IF(.NOT. ASSET_ANALYST_ONLY()) THEN
               VOID_INT2 = RETURN_CL_ASSET_CLASS_EXPENSES(CLASS,
     +                       CL_CLASS_EXISTS,
     +                       acq_fuel_expense,
     +     CL_MARKET_PURCHASES, ! acq_PURCHASE_POWER_EXPENSE,
     +                acq_variable_expense,
     +                ACQ_FIXED_EXPENSE,
     +                EXPENSE_COLLECT_VIA_ADJ_CLAUSE,
     +                EXPENSE_COLLECT_VIA_BASE_RATES,
     +                EXPENSE_NOT_COLLECTED_IN_RATES,
     +                ns_class_parameters%CLASS_BTL_REVENUES,
     +    CL_MARKET_REVENUES, 
     +                ns_class_parameters%CLASS_BTL_EXPENSES,
     +                acq_WHOLESALE_FUEL_EXPENSE,
     +                acq_WHOLESALE_VOM_EXPENSE,
     +                acq_ICAP_REVENUES,
     +                WVPA_EMISSIONS_EXPENSE,
     +        acq_INC_CAPACITY_SALES_TO_LEVEL_RM,    ! 726
     +      acq_INC_CAPACITY_PURCHASES_TO_LEVEL_RM)  ! 725
            call write_trace_real(file_trace_aca, "2. ICS_T/L/RM",
     + acq_INC_CAPACITY_SALES_TO_LEVEL_RM)
! 092607. VERIFY
               acq_INC_CAPACITY_PURCHASES_TO_LEVEL_RM =
     +       acq_INC_CAPACITY_PURCHASES_TO_LEVEL_RM +
     +                            CUST_CAP_PURCHASES_TO_LEVEL_RM
               IF(ADD_2_INCOME_STATEMENT == 'T') THEN
                  acq_INC_CAPACITY_SALES_TO_LEVEL_RM =
     +       acq_INC_CAPACITY_SALES_TO_LEVEL_RM +
     +                                acq_CAPACITY_SALES_TO_LEVEL_RM
     

                  acq_INC_CAPACITY_PURCHASES_TO_LEVEL_RM =
     +       acq_INC_CAPACITY_PURCHASES_TO_LEVEL_RM +
     +                            acq_CAPACITY_PURCHASES_TO_LEVEL_RM
                 call write_trace_real(file_trace_aca, "3. ICS_T/L/RM",
     + acq_INC_CAPACITY_SALES_TO_LEVEL_RM)
               ENDIF

               VOID_INT2 = RETURN_ANNUL_DERIV_VARIABLES(CLASS,
     +  INT2(0),
     +  acq_PHYS_DERIVATIVES_VAR_REVENUE,
     +  acq_PHYS_DERIVATIVES_FIX_REVENUE,
     +  acq_PHYS_DERIVATIVES_VAR_EXPENSE,
     +  acq_PHYS_DERIVATIVES_FIX_EXPENSE,
     +  acq_FIN_DERIVATIVES_VAR_REVENUE,
     +  acq_FIN_DERIVATIVES_FIX_REVENUE,
     +  acq_FIN_DERIVATIVES_VAR_EXPENSE,
     +  acq_FIN_DERIVATIVES_FIX_EXPENSE,
     +  acq_PHY_DERIV_REVENUE_ENERGY,
     +  acq_PHY_DERIV_EXPENSE_ENERGY,
     +  acq_FIN_DERIV_REVENUE_ENERGY,
     +  acq_FIN_DERIV_EXPENSE_ENERGY)

               VOID_LOGICAL = RETURN_FUEL_DERIV_VARIABLES(CLASS,
     +    INT2(0),
     +    acq_PHY_FUEL_DERIV_VAR_REVENUE,
     +    acq_PHY_FUEL_DERIV_FIX_REVENUE,
     +    acq_PHY_FUEL_DERIV_VAR_EXPENSE,
     +    acq_PHY_FUEL_DERIV_FIX_EXPENSE,
     +    acq_FIN_FUEL_DERIV_VAR_REVENUE,
     +    acq_FIN_FUEL_DERIV_FIX_REVENUE,
     +    acq_FIN_FUEL_DERIV_VAR_EXPENSE,
     +    acq_FIN_FUEL_DERIV_FIX_EXPENSE,
     +    acq_PHY_FUEL_DERIV_REVENUE_ENERGY,
     +    acq_PHY_FUEL_DERIV_EXPENSE_ENERGY,
     +    acq_FIN_FUEL_DERIV_REVENUE_ENERGY,
     +    acq_FIN_FUEL_DERIV_EXPENSE_ENERGY)





               VOID_LOGICAL = RETURN_CL_ASSET_CLASS_PROD(CLASS,
     +                                    CL_ANN_CLASS_CAPACITY,
     +                                    CL_ANN_CLASS_ENERGY)

               VOID_LOGICAL = CLASS_EMISSIONS_CREDITS(CLASS,
     +                                   CLASS_INC_EMIS_EXPENSE,
     +                                   CLASS_INC_EMIS_REVENUE,
     +                            LEVEL_SUMATION(0,CLASS_LEVEL))
               IF(WVPA()) CLASS_INC_EMIS_EXPENSE =
     +                                    WVPA_EMISSIONS_EXPENSE

               CL_INTRA_EXISTS = RETURN_CL_INTRA_CLASS_REVENUES(CLASS,
     +   BASE_RATES_REVENUES,
     +   ns_class_parameters%CLASS_ADJ_CLAUSE_REVENUE,
     +   ns_class_assets_results_2%SECONDARY_SALES_REVENUES,
     +   ns_class_parameters%CLASS_OTHER_REVENUE,
     +  ACQ_INTRA_COMPANY_NF_BURN)

               CALL RETURN_AI_ASSET_CLASS_EXPENSES(CLASS,YR,
     +                             AI_ANNUAL_CLASS_DEP,
     +                             AI_ANNUAL_CLASS_TAX_DEP,
     +                             AI_ANNUAL_CLASS_DEFERRED_TAX,
     +                             AI_ANNUAL_CLASS_PREF_ITEMS,
     +                             AI_CLASS_CASH,
     +                             AI_CLASS_EXPENSE,
     +                             AI_AFUDC_ON_CASH,
     +                             AI_LAGGED_GPV)
               ACQ_FA_CASH = ACQ_FA_CASH + AI_CLASS_CASH
               ACQ_FIXED_EXPENSE = ACQ_FIXED_EXPENSE + AI_CLASS_EXPENSE
               AI_CLASS_CWIP(CLASS_POS) = AI_CLASS_CWIP(CLASS_POS) +
     +                            AI_CLASS_CASH +
     +                            AI_AFUDC_ON_CASH -
     +                            AI_LAGGED_GPV
C NUCLEAR FUEL
               VOID_INT2 = RETURN_NUC_CL_ASSET_CLASS_EXPENSES(CLASS,
     +                           CL_CLASS_EXISTS,
     +                           OWNED_NF_BURN_CL_RESOURCES,
     +                           LEASED_NF_BURN_CL_RESOURCES,
     +                           NF_BURN_IN_RATEBASE,
     +                           ACQ_NUC_FUEL_OWNED_BURN,
     +                           ACQ_NUC_FUEL_LEASED_BURN,
     +                           ACQ_DOE_NUC_FUEL_FEE,
     +                           ACQ_NUC_DECOMMISSIONING_COST,
     +                           DOE_R300_DISPOSAL_COST)
               ACQ_DOE_NUC_FUEL_FEE = ACQ_DOE_NUC_FUEL_FEE
     +                    + DOE_R300_DISPOSAL_COST
               IF(USE_BURN_4_NUC_FUEL_TAX_EXP) THEN
                  LEASOR_NF_TAX_DEP = ACQ_INTRA_COMPANY_NF_BURN
                  LEASOR_DEFERRED_TAX_BASIS = LEASOR_NF_TAX_DEP -
     +                                      LEASOR_NF_SL_TAX_DEP
               ENDIF
               IF(USE_NF_BURN_4_EXPENSE) THEN
                  LEASOR_DEFERRED_TAX_BASIS = LEASOR_NF_TAX_DEP -
     +                              ACQ_INTRA_COMPANY_NF_BURN
                  LEASOR_NF_AMORTIZATION = ACQ_INTRA_COMPANY_NF_BURN
                  LEASOR_NF_SL_TAX_DEP = ACQ_INTRA_COMPANY_NF_BURN
               ENDIF
            ENDIF

C BEGINNING NUCLEAR FUEL SECTION

            ACQ_OWNED_NF_BURN = OWNED_NF_BURN_EXP_FILE +
     +              OWNED_NF_BURN_SALES_FILE +
     +              OWNED_NF_BURN_CL_RESOURCES
            ACQ_LEASED_NF_BURN = LEASED_NF_BURN_EXP_FILE +
     +               LEASED_NF_BURN_SALES_FILE +
     +               LEASED_NF_BURN_CL_RESOURCES
            acq_NUCLEAR_FUEL_LEASE_PAYMENTS = LEASED_NF_BURN_EXP_FILE
     +                            + LEASED_NF_BURN_SALES_FILE
     +                            + ACQ_NUC_FUEL_LEASED_BURN

            acq_NF_SL_DEF_TAX_DEP = ACQ_NUC_FUEL_OWNED_BURN
     +                  + OWNED_NF_BURN_EXP_FILE
     +                  + OWNED_NF_BURN_SALES_FILE
     +                  - CATAWBA_BURN_ADJUSTMENT
            IF(USE_BURN_4_NUC_FUEL_TAX_EXP) THEN
               acq_NF_TAX_EXPENSE = ACQ_LEASED_NF_BURN
     +                  + ACQ_OWNED_NF_BURN
     +      - CATAWBA_BURN_ADJUSTMENT ! THIS IS A DUKE PARAMETER
               IF(DOE_FEES_IN_NUC_FUEL_COST) THEN
                  acq_NF_SL_DEF_TAX_DEP = acq_NF_SL_DEF_TAX_DEP
     +                        - ACQ_DOE_NUC_FUEL_FEE
               ELSE
                  acq_NF_TAX_EXPENSE = acq_NF_TAX_EXPENSE
     +                     + ACQ_DOE_NUC_FUEL_FEE
               ENDIF
               acq_NF_TAX_DEPRECIATION = LEASOR_NF_TAX_DEP
               ACQ_NF_DEFERRED_TAX_BASIS = LEASOR_DEFERRED_TAX_BASIS
            ELSE
               IF(DOE_FEES_IN_NUC_FUEL_COST) THEN
                  acq_NF_TAX_EXPENSE = ACQ_LEASED_NF_BURN
     +                     + ACQ_OWNED_NF_BURN
     +                     - ACQ_NUC_FUEL_OWNED_BURN
                  acq_NF_SL_DEF_TAX_DEP = acq_NF_SL_DEF_TAX_DEP
     +                        - ACQ_DOE_NUC_FUEL_FEE
               ELSE
                  acq_NF_TAX_EXPENSE = ACQ_LEASED_NF_BURN
     +                     + ACQ_DOE_NUC_FUEL_FEE
               ENDIF
               ACQ_NF_DEFERRED_TAX_BASIS = acq_NF_TAX_DEPRECIATION
     +                         - acq_NF_SL_DEF_TAX_DEP
     +                         + LEASOR_DEFERRED_TAX_BASIS
               acq_NF_TAX_DEPRECIATION = acq_NF_TAX_DEPRECIATION
     +                       + LEASOR_NF_TAX_DEP
            ENDIF
            IF(MONTHLY_MIDAS_ACTIVE .AND.
     +        globecom_YEAR <= LAST_AVAILABLE_MONTHLY_YEAR) THEN
               acq_NF_DEFERRED_TAXES_CR =
     +      MONTHLY_NF_DEFERRED_TAXES_CR(CLASS,globecom_YEAR,
     +                                NORMALIZATION_TAX_RATE,
     +                                ACQ_NF_DEFERRED_TAX_BASIS,
     +                                acq_NF_TAX_DEPRECIATION,
     +                                LEASOR_NF_TAX_DEP,
     +                                LEASOR_DEFERRED_TAX_BASIS)
            ELSE
               acq_NF_DEFERRED_TAXES_CR = NORMALIZATION_TAX_RATE *
     +                                ACQ_NF_DEFERRED_TAX_BASIS
            ENDIF

C END NUC FUEL SECTION

            CALL RETURN_ANNUL_EXP_DERIV_VARS(ASSET_YR,CLASS,
     +                             acq_PHYS_DERIVATIVES_VAR_REVENUE,
     +                             acq_PHYS_DERIVATIVES_FIX_REVENUE,
     +                             acq_PHYS_DERIVATIVES_VAR_EXPENSE,
     +                             acq_PHYS_DERIVATIVES_FIX_EXPENSE,
     +                             acq_FIN_DERIVATIVES_VAR_REVENUE,
     +                             acq_FIN_DERIVATIVES_FIX_REVENUE,
     +                             acq_FIN_DERIVATIVES_VAR_EXPENSE,
     +                             acq_FIN_DERIVATIVES_FIX_EXPENSE)

            CLASS_CWIP(2,CLASS_POS) = CLASS_CWIP(2,CLASS_POS)
     +                        + AI_CLASS_CWIP(CLASS_POS)
     +                        + CWIP_BALANCE_ADJ
            CUMULATIVE_GPV_ADJUSTMENTS(CLASS_POS) =
     +  CUMULATIVE_GPV_ADJUSTMENTS(CLASS_POS)
     +  - ns_class_parameters%GROSS_VALUE_OF_SOLD_ASSETS
     +  + AI_LAGGED_GPV
     +  + Exp_AFDCEquity
     +  + Exp_AFDCBorrowed
            IF(WVPA()) THEN
               CALL WVPA_SPECIAL_ADDENDUMS(CLASS,YR,
     +                             EXP_BOOK_DEPRECIATION)
               IF(PARENT_CLASS) THEN
                  VOID_LOGICAL = WVPA_MEMBER_ACCRUED_REVS(
     +                             acq_WVPA_MEMBER_ACCRUED_REVENUES)
                  CALL WVPA_NON_MEMBER_SALES(YR,
     +  ns_class_assets_results_2%SECONDARY_SALES_REVENUES,
     +  acq_WVPA_NON_MEMBER_COST_OF_POWER,
     +  acq_WVPA_MEMBER_COST_OF_POWER,
     +  WVPA_PURCHASE_POWER_EXPENSE_ADJ,
     +  acq_WVPA_MEMBER_COST_OF_SERVICES,
     +  acq_WVPA_NON_MEMBER_COST_OF_SERVICES)
               ENDIF
            ENDIF
            BOOK_DEPRECIATION = BOOK_DEPRECIATION
     +                  + AI_ANNUAL_CLASS_DEP
     +                  + EXP_BOOK_DEPRECIATION
            ns_class_parameters%INCOME_TAX_DEPRECIATION = 
     + ns_class_parameters%INCOME_TAX_DEPRECIATION
     +                        + AI_ANNUAL_CLASS_TAX_DEP
            DEFERRED_TAX_BASIS = DEFERRED_TAX_BASIS
     +                   + AI_ANNUAL_CLASS_DEFERRED_TAX
            ns_class_parameters%TAX_PREFERENCE_DEPRECIATION = 
     + ns_class_parameters%TAX_PREFERENCE_DEPRECIATION
     +                            + AI_ANNUAL_CLASS_PREF_ITEMS

C REPLACE MODEL acq_VARIABLE AND FIXED O&M WITH EXPENSE FILE O&M FOR
C  DUKE 8/8/96 M.S.G.

            IF(USE_BUDGET_VARIABLE_OM .AND.
     +                         .NOT. FirstEnergy_Is_Active) THEN
               acq_variable_expense = EXP_FILE_VARIABLE_EXPENSE
               ACQ_FIXED_EXPENSE = EXP_FILE_FIXED_EXPENSE
               IF(USE_BUDGET_FUEL_PURCHASE) THEN
                  acq_fuel_expense = EXP_FUEL_EXPENSE
                  acq_OTHER_PURCHASE_POWER_EXPENSE =
     +                         EXP_PURCHASE_POWER_EXPENSE
     +                         + TF_OTHER_PURCHASE_POWER_EXPENSE
     +        + RC_OTHER_PURCHASE_POWER_EXPENSE 

                  CL_MARKET_PURCHASES = 0.
                  EL_MARKET_PURCHASES = 0.
                  CL_VAR_MARKET_PURCHASES = 0.
                  CL_FIXED_MARKET_PURCHASES = 0.
               ELSE
                  acq_fuel_expense = acq_fuel_expense + EXP_FUEL_EXPENSE

                  acq_OTHER_PURCHASE_POWER_EXPENSE =
     +                         acq_OTHER_PURCHASE_POWER_EXPENSE
     +                         + EXP_PURCHASE_POWER_EXPENSE
     +                         + TF_OTHER_PURCHASE_POWER_EXPENSE
     +      + RC_OTHER_PURCHASE_POWER_EXPENSE 
               ENDIF
            ELSE
               IF(.NOT. USE_PRODUCTION_MODULE_EXPENSE) THEN
                  acq_variable_expense = acq_variable_expense +
     +                                 EXP_FILE_VARIABLE_EXPENSE
          ACQ_FIXED_EXPENSE = ACQ_FIXED_EXPENSE + EXP_FILE_FIXED_EXPENSE
                  acq_fuel_expense = acq_fuel_expense + EXP_FUEL_EXPENSE

                  acq_OTHER_PURCHASE_POWER_EXPENSE =
     +                         acq_OTHER_PURCHASE_POWER_EXPENSE
     +                         + EXP_PURCHASE_POWER_EXPENSE
     +                         + TF_OTHER_PURCHASE_POWER_EXPENSE
     + + RC_OTHER_PURCHASE_POWER_EXPENSE !acq_PURCHASE_POWER_EXPENSE,
               ENDIF
            ENDIF

            acq_VAR_MARKET_PURCHASES = CL_VAR_MARKET_PURCHASES
            acq_FIXED_MARKET_PURCHASES = CL_FIXED_MARKET_PURCHASES
     +                       + EL_MARKET_PURCHASES
            acq_TRANSACT_MARKET_PURCHASES = CL_MARKET_PURCHASES
     +                          + EL_MARKET_PURCHASES
            acq_TRANSACT_MARKET_REVENUES = CL_MARKET_REVENUES
     +                         + EL_MARKET_REVENUES

C CLASS EMISSIONS

       ns_class_parameters%BTL_EMISSION_CREDIT_EXPENSE = 
     + CLASS_INC_EMIS_EXPENSE *
     +  ns_class_parameters%BTL_EMISSION_CREDIT_EXPENSE/100.
            CLASS_INC_EMIS_EXPENSE = CLASS_INC_EMIS_EXPENSE
     +                       + CLASS_EXP_EMIS_EXPENSE

            ATL_EMISSION_CREDIT_EXPENSE = CLASS_INC_EMIS_EXPENSE -
     +  ns_class_parameters%BTL_EMISSION_CREDIT_EXPENSE
       ns_class_parameters%ADJ_CLAUSE_EXPENSE_ALLOCATION = 
     + ATL_EMISSION_CREDIT_EXPENSE*
     +  ns_class_parameters%ADJ_CLAUSE_EXPENSE_ALLOCATION/100.
            ns_class_parameters%BTL_EMISSION_CREDIT_REVENUE = 
     + CLASS_INC_EMIS_REVENUE *
     +  ns_class_parameters%BTL_EMISSION_CREDIT_REVENUE/100.
            ATL_EMISSION_CREDIT_REVENUE = CLASS_INC_EMIS_REVENUE -
     +  ns_class_parameters%BTL_EMISSION_CREDIT_REVENUE
            ns_class_parameters%ADJ_CLAUSE_REVENUE_ALLOCATION = 
     + ATL_EMISSION_CREDIT_REVENUE*
     +  ns_class_parameters%ADJ_CLAUSE_REVENUE_ALLOCATION/100.
            ACQ_EMISSION_CREDIT_EXPENSE = ATL_EMISSION_CREDIT_EXPENSE -
     +                               ATL_EMISSION_CREDIT_REVENUE
            ns_class_parameters%NET_ADJ_CLAUS_EMIS_AMT = 
     + ns_class_parameters%ADJ_CLAUSE_EXPENSE_ALLOCATION -
     +  ns_class_parameters%ADJ_CLAUSE_REVENUE_ALLOCATION
            ns_class_parameters%CLASS_BTL_REVENUES = 
     + ns_class_parameters%CLASS_BTL_REVENUES +
     + ns_class_parameters%BTL_EMISSION_CREDIT_REVENUE  +
C ADD THEN SUBSTRACTED FOR TAXES AND AT THE END OF THE FINANCING LOOP
     +                        acq_CATAWBA_OTHER_NET_REVENUES +
     +                        OTHER_INCOME_AFILLIATES +
     +                        acq_OTHER_INCOME_NET_OF_TAX
            ns_class_parameters%CLASS_BTL_EXPENSES = 
     + ns_class_parameters%CLASS_BTL_EXPENSES +
     + ns_class_parameters%BTL_EMISSION_CREDIT_EXPENSE +
     +                   acq_BTL_LEASE_INTEREST
       ns_class_parameters%CASH_OTH_ASSET = 
     + ns_class_parameters%CASH_OTH_ASSET +
     +               INVESTMENT_IN_AFILLIATES +
     +               LOANS_TO_AFILLIATES

           STD_RATE(2,CLASS_POS) = ns_class_parameters%STD_INTEREST_RATE
            SALES(2,CLASS_POS) = ns_class_parameters%CLASS_SALES
            IF(LAST_CLASS_LEVEL /= CLASS_LEVEL) THEN
               PIOR_LEVEL_ATL_TAX_DEDUCTIONS =
     +                          SBU_ATL_TAX_EXPENSE(CLASS_LEVEL)
               PIOR_LEVEL_BTL_TAX_DEDUCTIONS =
     +                          SBU_BTL_TAX_EXPENSE(CLASS_LEVEL)
               SBU_ATL_TAX_EXPENSE(CLASS_LEVEL) = 0.
               SBU_BTL_TAX_EXPENSE(CLASS_LEVEL) = 0.
            ELSE
               PIOR_LEVEL_BTL_TAX_DEDUCTIONS = 0.
               PIOR_LEVEL_ATL_TAX_DEDUCTIONS = 0.
            ENDIF
            ns_class_master%FED_INCOME_TAX_DEDUCTIONS = 
     + ns_class_master%FED_INCOME_TAX_DEDUCTIONS
     + ! FROM THE ADDENDUM FILE
     + + ns_class_parameters%DEFERRED_EXPENSE_CASH 
     + + DD_ATL_CURRENT_TAX_EXPENSE
     + + DD_BTL_CURRENT_TAX_EXPENSE
     + + PIOR_LEVEL_ATL_TAX_DEDUCTIONS
     + + PIOR_LEVEL_BTL_TAX_DEDUCTIONS

       ns_class_master%STATE_INCOME_TAX_DEDUCTIONS = 
     + ns_class_master%STATE_INCOME_TAX_DEDUCTIONS
     + + ns_class_parameters%DEFERRED_EXPENSE_CASH
     + + DD_ATL_CURRENT_TAX_EXPENSE
     + + DD_BTL_CURRENT_TAX_EXPENSE
     + + PIOR_LEVEL_ATL_TAX_DEDUCTIONS
     + + PIOR_LEVEL_BTL_TAX_DEDUCTIONS


            NET_DEFERRED_CASH_ADJ = 0.

            CUM_AMORT_ADJUSTMENT(CLASS_POS) =
     +     CUM_AMORT_ADJUSTMENT(CLASS_POS)
     +     + ns_class_parameters%PARM_AMORTIZATION_ADJUSTMENT
     +    -(ACQ_CATAWBA_LEVEL_CAP_PAYMENTS +
     +       acq_CATAWBA_OTHER_NET_REVENUES)
     +     + KEPCO_WC_DEF_MAINT_ENRG_AMORT
     +     - NET_DEFERRED_DEBIT_ADJUSTMENT
     +     + BTL_AMORTIZATION_EXP

            GOODWILL(2,CLASS_POS) = GOODWILL(2,CLASS_POS)
     +                      + CUM_GOODWILL_AT(CLASS_POS)

            acq_CLASS_REGULATORY_ASSETS = acq_CLASS_REGULATORY_ASSETS
     +                        + CUM_REG_ASSET_ADJ_AT(CLASS_POS)
            acq_FASB_133 = acq_FASB_133 + CUM_FASB133_ADJ_AT(CLASS_POS)
            acq_FASB_109 = acq_FASB_109 + CUM_FASB109_ADJ_AT(CLASS_POS)

            NET_DD_WRITE_OFF_BALANCE = FA_NET_DEFERRED_DEBIT_BAL +
     +                         NF_DEFERRED_DEBIT_BALANCE
            UNAMORTIZED_INTEREST_BALANCE(2,CLASS_POS) =
     +                 UNAMORTIZED_INTEREST_BALANCE(2,CLASS_POS)
     +                 + CUM_DD_UNAMORT_INTR_ADJ_AT(CLASS_POS)
            UNAMORTIZED_ISSUE_EXP_BALANCE(2,CLASS_POS) =
     +              UNAMORTIZED_ISSUE_EXP_BALANCE(2,CLASS_POS)
     +              + CUM_DD_UNAMORT_ISSUE_EXP_ADJ_AT(CLASS_POS)
           OTHER_DD_BALANCE(2,CLASS_POS) = OTHER_DD_BALANCE(2,CLASS_POS)
     +                   + DSM_DEFERRED_DEBIT
     +                   - CUM_AMORT_ADJUSTMENT(CLASS_POS)
     +                   + NET_DD_WRITE_OFF_BALANCE
     +                   + NET_DEFERRED_CASH_ADJ
            NET_DD_BALANCE(2,CLASS_POS) = NET_DD_BALANCE(2,CLASS_POS)

     +  + GOODWILL(2,CLASS_POS) ! + CUM_GOODWILL_AT(CLASS_POS)
     +     + acq_CLASS_REGULATORY_ASSETS 
     +        + acq_FASB_133 ! + CUM_FASB133_ADJ_AT(CLASS_POS)
     +             + acq_FASB_109 ! + CUM_FASB109_ADJ_AT(CLASS_POS)
     +              + UNAMORTIZED_INTEREST_BALANCE(2,CLASS_POS)
     +              + UNAMORTIZED_ISSUE_EXP_BALANCE(2,CLASS_POS)
     +              + OTHER_DD_BALANCE(2,CLASS_POS)

            CUM_DD_RATEBASE_ADJUST(CLASS_POS) =
     +                       CUM_DD_RATEBASE_ADJUST(CLASS_POS) +
     +                       NET_DEFERRED_DEBIT_ADJUSTMENT
            DEFERRED_DEBITS_RATE_BASE(2,CLASS_POS) =
     +                  DEFERRED_DEBITS_RATE_BASE(2,CLASS_POS) +
     +                  CUM_DD_RATEBASE_ADJUST(CLASS_POS)

            ACQ_PREFERRED_STOCK_RETIREMENTS = PSRED(YR,CLASS_POS)
            DEBT_FILE_PREFERRED_DIVIDENDS = PSDIV(YR,CLASS_POS)
            ACQ_LONG_TERM_DEBT_RETIREMENTS = LTDRET(YR,CLASS_POS)

            ACQ_ADJUSTMENT_CLAUSE_REVENUES = 
     + ns_class_parameters%CLASS_ADJ_CLAUSE_REVENUE +
     +  (EXPENSE_COLLECT_VIA_ADJ_CLAUSE +
     +    DSM_ADJ_CLAUSE_COLLECTIONS)/
     +     (1.- ns_class_parameters%OPREV_TAX_RATE)

C ASSET SECTION

            CUMULATIVE_BOOK_DEP_ADJUSTMENTS(CLASS_POS) =
     +              CUMULATIVE_BOOK_DEP_ADJUSTMENTS(CLASS_POS)
     +              - acq_SALVAGE_TRANSACTIONS
     +              - ns_class_parameters%CUMULATIVE_DEP_ON_SOLD_ASSETS
     +              + AI_ANNUAL_CLASS_DEP
     +              + FA_WO_ADJUSTMENT_2_CUM_BOOK_DEP
     +              + EXP_BOOK_DEPRECIATION
            CLASS_CUMULATIVE_DEPRECIATION(2,CLASS_POS) =
     +              CLASS_CUMULATIVE_DEPRECIATION(2,CLASS_POS)
     +              + FA_CUMULATIVE_BOOK_DEP + DSM_CUM_BOOK_DEP
     +              + CUMULATIVE_BOOK_DEP_ADJUSTMENTS(CLASS_POS)

            ns_class_parameters%INCOME_TAX_DEPRECIATION = 
     + ns_class_parameters%INCOME_TAX_DEPRECIATION
     +                        + acq_NF_TAX_DEPRECIATION
     +                        + acq_ATL_LEASE_AMORTIZATION
     +                        + acq_BTL_LEASE_AMORTIZATION
           ACQ_SL_TAX_DEPRECIATION = EA_TAX_BOOK_DEP
     +                    + FA_SL_TAX_DEP
     +                    + LEASOR_NF_SL_TAX_DEP
     +                    + DSM_SL_TAX_DEP_loc
     +                    + acq_ATL_LEASE_AMORTIZATION
     +                    + acq_BTL_LEASE_AMORTIZATION


            ACQ_CLASS_NUCLEAR_FUEL_EXPENSE = ACQ_OWNED_NF_BURN
     +                           + ACQ_LEASED_NF_BURN
     +                           + LEASOR_NF_AMORTIZATION
     +                           + ACQ_NUC_DECOMMISSIONING_COST
     +                           - CATAWBA_ADJUSTMENT
            ACQ_NUC_FUEL_TOTAL_BURN = ACQ_NUC_FUEL_OWNED_BURN
     +                    + OWNED_NF_BURN_EXP_FILE
     +                    + ACQ_NUC_FUEL_LEASED_BURN
     +                    + LEASED_NF_BURN_EXP_FILE
     +                    + LEASOR_NF_AMORTIZATION
     +                    - CATAWBA_BURN_ADJUSTMENT
            ACQ_NF_CASH_EXPENSE = ACQ_LEASED_NF_BURN
     +                + OWNED_NF_BURN_SALES_FILE
     +                + OWNED_NF_BURN_CL_RESOURCES
     +                - ACQ_NUC_FUEL_OWNED_BURN
     +                + ACQ_DOE_NUC_FUEL_FEE
            ACQ_NF_NON_CASH_EXPENSE = ACQ_NUC_FUEL_OWNED_BURN
     +                    + OWNED_NF_BURN_EXP_FILE
     +                    + LEASOR_NF_AMORTIZATION
     +                    + BTL_NUC_FUEL_DECOM_LIABILITY
     +                    + ACQ_NUC_DECOMMISSIONING_COST
     +                    - CATAWBA_ADJUSTMENT
            ACQ_OWNED_NF_BURN = LEASOR_NF_AMORTIZATION
     +              + ACQ_OWNED_NF_BURN
            IF(DOE_FEES_IN_NUC_FUEL_COST) THEN
               ACQ_NUC_FUEL_TOTAL_BURN = ACQ_NUC_FUEL_TOTAL_BURN
     +                       - ACQ_DOE_NUC_FUEL_FEE
               ACQ_NF_NON_CASH_EXPENSE = ACQ_NF_NON_CASH_EXPENSE
     +                       - ACQ_DOE_NUC_FUEL_FEE
               ACQ_OWNED_NF_BURN = ACQ_OWNED_NF_BURN
     +                 - ACQ_DOE_NUC_FUEL_FEE

            ELSE
       ACQ_CLASS_NUCLEAR_FUEL_EXPENSE = ACQ_CLASS_NUCLEAR_FUEL_EXPENSE
     +                              + ACQ_DOE_NUC_FUEL_FEE
            ENDIF

C MOVED BELOW 12/10/96 TO GET NUC FUEL RATE BASE CORRECT

            CUMULATIVE_NUCLEAR_BURN(CLASS_POS) =
     +                      CUMULATIVE_NUCLEAR_BURN(CLASS_POS) +
     +                      ACQ_NUC_FUEL_TOTAL_BURN
            CUM_RATE_BASE_NUCLEAR_BURN(CLASS_POS) =
     +                   CUM_RATE_BASE_NUCLEAR_BURN(CLASS_POS) +
     +                       ACQ_NUC_FUEL_OWNED_BURN +
     +                       OWNED_NF_BURN_EXP_FILE -
     +                       CATAWBA_ADJUSTMENT
            CLASS_NET_NF_VALUE(2,CLASS_POS) =
     +                      CLASS_NET_NF_VALUE(2,CLASS_POS)
     +                      - CUMULATIVE_NUCLEAR_BURN(CLASS_POS)
     +                      + NET_NUCLEAR_FUEL_ADJ(CLASS_POS)
            acq_TRANS_NUKE_FUEL_BAL = NET_NUCLEAR_FUEL_ADJ(CLASS_POS)
            NUC_FUEL_RATE_BASE(2,CLASS_POS) =
     +                   NUC_FUEL_RATE_BASE(2,CLASS_POS)
     +                   - CUM_RATE_BASE_NUCLEAR_BURN(CLASS_POS)

            CLASS_GPV(2,CLASS_POS) = CLASS_GPV(2,CLASS_POS) +
     +                     CUMULATIVE_GPV_ADJUSTMENTS(CLASS_POS)

C AMEREN ADJUSTMENT TO MARKET SALES AND PURCHASES

            CALL RETURN_CLASS_TRANSFR_AMOUNTS(CLASS,
     +                           R_REV_TRANSFERS_ARE_ACTIVE,
     +                           R_EXP_TRANSFERS_ARE_ACTIVE,
     +                           TRANSFR_SECONDAY_REVENUES,
     +                           TRANSFER_SEC_REV_QUANITIES_MWH,
     +                           TRANSFR_PURCHASE_FUEL_EXPENSES,
     +                           TRANSFR_PURCHASE_VOM_EXPENSES,
     +                           TRANSFR_PUR_EXP_QUANITIES)

C DEFERRED FUEL MUST BE CALCUALTED ON THE CLASSES CONTRIBUTION ONLY

            PURCHASE_POWER_IN_DEFERRED_FUEL = 0.
            IF(USE_PURCHASE_POWER_ACCOUNTING)
     +                      PURCHASE_POWER_IN_DEFERRED_FUEL = 1.
            IF(USE_DEFERRED_FUEL_ACCOUNTING) THEN
               IF(CPL_IS_ACTIVE) THEN
                  CALL CPL_ACCOUNTING_4_DEFERRED_FUEL(CLASS,
     +                                    CPL_FUEL_REVENUES,
     +                                    acq_DEFERRED_FUEL_EXPENSE)
         ACQ_ADJUSTMENT_CLAUSE_REVENUES=ACQ_ADJUSTMENT_CLAUSE_REVENUES
     +                               + CPL_FUEL_REVENUES
                  acq_DEFERRED_FUEL_EXPENSE = acq_DEFERRED_FUEL_EXPENSE
     +                            + EXP_DEFERRED_FUEL_EXPENSE
               ELSE
       acq_DEFERRED_FUEL_EXPENSE = ACQ_ADJUSTMENT_CLAUSE_REVENUES
     +   - (acq_fuel_expense
     +    + ACQ_NUC_FUEL_TOTAL_BURN
     +    + (acq_TRANSACT_MARKET_PURCHASES
     +       + acq_OTHER_PURCHASE_POWER_EXPENSE)
     +        * PURCHASE_POWER_IN_DEFERRED_FUEL)
     +  + EXP_DEFERRED_FUEL_EXPENSE
               ENDIF
            ELSE
               acq_DEFERRED_FUEL_EXPENSE = EXP_DEFERRED_FUEL_EXPENSE
            ENDIF
            IF(USE_PGA_ACCOUNTING) THEN
            acq_DEFERRED_PGA_EXPENSE = acq_CLASS_GAS_ADJ_CLAUSE_REVENUE
     +                        - acq_OTHER_EXPENSE_2
            ELSE
               acq_DEFERRED_PGA_EXPENSE = 0.
            ENDIF
            IF(LAST_CLASS_LEVEL /= CLASS_LEVEL) THEN

            ELSE
               DEFERRED_FUEL_BALANCE(CLASS_POS) =
     +                          DEFERRED_FUEL_BALANCE(CLASS_POS)
     +                          - acq_DEFERRED_FUEL_EXPENSE
               CLASS_DEFERRED_PURCHASE_GAS(CLASS_POS) =
     +                    CLASS_DEFERRED_PURCHASE_GAS(CLASS_POS)
     +                    - acq_DEFERRED_PGA_EXPENSE
            ENDIF
            acq_CLASS_DEFERRED_FUEL_BALANCE =
     +                          DEFERRED_FUEL_BALANCE(CLASS_POS)

            IF(PARENT_CLASS) THEN
               UNMODELLED_SUBS_OWNED_BY_PARENT =
     +                           UNMODELLED_SUBS_OWNED_BY_PARENT
     +                           + ns_class_parameters%SUBSIDIARY_INCOME
     +  - ns_class_parameters%SUBSIDIARY_DIVIDEND
               UNMODELED_SUB_DIVIDEND_2_PARENT =
     +                           UNMODELED_SUB_DIVIDEND_2_PARENT
     + + ns_class_parameters%SUBSIDIARY_DIVIDEND
               IF(NUM_OF_SUBSIDIARIES > 0) THEN
       ns_class_parameters%NEW_SUBSIDIARY_INVESTMENT = 
     + ns_class_parameters%NEW_SUBSIDIARY_INVESTMENT+
     +                 SUB_EQUITY_NEEDS_FROM_PARENT(CLASS_LEVEL)
       ns_class_parameters%SUBSIDIARY_DIVIDEND = 
     + ns_class_parameters%SUBSIDIARY_DIVIDEND +
     +               SUB_DIVIDEND_PAYMENTS_2_PARENT(CLASS_LEVEL)

                  SUB_EARNINGS_2_EXCLUDE(CLASS_LEVEL) =
     +                        SUB_EARNINGS_2_COMMON(CLASS_LEVEL)
       ns_class_parameters%SUBSIDIARY_INCOME = 
     + ns_class_parameters%SUBSIDIARY_INCOME +
     +  SUB_EARNINGS_2_EXCLUDE(CLASS_LEVEL)
               ELSE
                  SUB_EARNINGS_2_EXCLUDE(CLASS_LEVEL) = 0.
               ENDIF

            ELSEIF(SUBSIDIARY_CLASS .and.
     +                .not. CONSOLIDATING_CLASS(CLASS_POS)) THEN
       ns_class_parameters%NEW_SUBSIDIARY_INVESTMENT = 
     + ns_class_parameters%NEW_SUBSIDIARY_INVESTMENT+
     +                 SUB_EQUITY_NEEDS_FROM_PARENT(CLASS_LEVEL)
      ns_class_parameters%SUBSIDIARY_DIVIDEND = 
     + ns_class_parameters%SUBSIDIARY_DIVIDEND +
     + SUB_DIVIDEND_PAYMENTS_2_PARENT(CLASS_LEVEL)
     
       SUB_EARNINGS_2_EXCLUDE(CLASS_LEVEL) =
     +  SUB_EARNINGS_2_COMMON(CLASS_LEVEL)
       ns_class_parameters%SUBSIDIARY_INCOME = 
     + ns_class_parameters%SUBSIDIARY_INCOME +
     +  SUB_EARNINGS_2_EXCLUDE(CLASS_LEVEL)
      IF(APS_ACTIVE) THEN
               IF(CLASS == 41) THEN ! WP
        ns_class_parameters%SUBSIDIARY_INCOME = 
     + ns_class_parameters%SUBSIDIARY_INCOME +
     +  AGC_2_WP * AGC_EARNINGS_AVAILABLE_2_COMMON
     +
                  SUB_EARNINGS_2_EXCLUDE(CLASS_LEVEL) =
     +                     SUB_EARNINGS_2_EXCLUDE(CLASS_LEVEL) +
     +                AGC_2_WP * AGC_EARNINGS_AVAILABLE_2_COMMON
       ns_class_parameters%SUBSIDIARY_DIVIDEND = 
     + ns_class_parameters%SUBSIDIARY_DIVIDEND +
     +                           AGC_2_WP * AGC_COMMON_DIVIDENDS
       ns_class_parameters%NEW_SUBSIDIARY_INVESTMENT = 
     + ns_class_parameters%NEW_SUBSIDIARY_INVESTMENT+
     +                        AGC_2_WP * AGC_COMMON_STOCK_ISSUED
               ELSEIF(CLASS == 31) THEN ! PE
       ns_class_parameters%SUBSIDIARY_INCOME = 
     + ns_class_parameters%SUBSIDIARY_INCOME +
     +                AGC_2_PE * AGC_EARNINGS_AVAILABLE_2_COMMON
                  SUB_EARNINGS_2_EXCLUDE(CLASS_LEVEL) =
     +                     SUB_EARNINGS_2_EXCLUDE(CLASS_LEVEL) +
     +                AGC_2_PE * AGC_EARNINGS_AVAILABLE_2_COMMON
       ns_class_parameters%SUBSIDIARY_DIVIDEND = 
     + ns_class_parameters%SUBSIDIARY_DIVIDEND +
     +                           AGC_2_PE * AGC_COMMON_DIVIDENDS
      ns_class_parameters%NEW_SUBSIDIARY_INVESTMENT = 
     + ns_class_parameters%NEW_SUBSIDIARY_INVESTMENT+
     +                        AGC_2_PE * AGC_COMMON_STOCK_ISSUED
               ELSEIF(CLASS == 21) THEN ! MP
                  ns_class_parameters%SUBSIDIARY_INCOME = 
     + ns_class_parameters%SUBSIDIARY_INCOME +
     +                AGC_2_MP * AGC_EARNINGS_AVAILABLE_2_COMMON
                  SUB_EARNINGS_2_EXCLUDE(CLASS_LEVEL) =
     +                     SUB_EARNINGS_2_EXCLUDE(CLASS_LEVEL) +
     +                AGC_2_MP * AGC_EARNINGS_AVAILABLE_2_COMMON
       ns_class_parameters%SUBSIDIARY_DIVIDEND = 
     + ns_class_parameters%SUBSIDIARY_DIVIDEND +
     +                           AGC_2_MP * AGC_COMMON_DIVIDENDS
       ns_class_parameters%NEW_SUBSIDIARY_INVESTMENT = 
     + ns_class_parameters%NEW_SUBSIDIARY_INVESTMENT+
     + AGC_2_MP * AGC_COMMON_STOCK_ISSUED
               ENDIF
      ENDIF
            ELSEIF(CONSOLIDATING_CLASS(CLASS_POS)) THEN
               SUB_EARNINGS_2_EXCLUDE(CLASS_LEVEL) = 0.
            ENDIF
            SUB_EARNINGS_2_COMMON(CLASS_LEVEL) = 0.
            SUB_DIVIDEND_PAYMENTS_2_PARENT(CLASS_LEVEL) = 0.
            SUB_EQUITY_NEEDS_FROM_PARENT(CLASS_LEVEL) = 0.

            INVESTMENT_IN_SUBSIDIARIES(2,CLASS_POS) =
     +           INVESTMENT_IN_SUBSIDIARIES(1,CLASS_POS)
     + !EQUITY NEEDS FROM PARENT
     +     + ns_class_parameters%NEW_SUBSIDIARY_INVESTMENT 
     +           + ns_class_parameters%SUBSIDIARY_INCOME
     +           - ns_class_parameters%SUBSIDIARY_DIVIDEND
     +          + acq_NEW_SUB_INVESTMENT ! AQUISTION COST OF NEW SUB
     +           + SUBSIDIARY_INVESTMENT_ADJ

C TAX SECTION

            construction_tax_expense = NF_CURRENT_TAX_EXPENSE +
     +                         FA_CURRENT_TAX_EXPENSES +
     +                         DSM_TAX_EXPENSE

            ns_class_master%DEF_TAX_RATEBASE = NORMALIZATION_TAX_RATE *
     +       (ns_class_master%DEF_TAX_RATEBASE
     +        + ns_class_parameters%DEFERRED_EXPENSE_CASH
     +        - ns_class_parameters%DEFERRED_EXPENSE_AMORT)
     +  + ns_class_parameters%DEFERRED_TAX_ADJUSTMENT
            AFUDC = FA_AFDC_CASH + acq_NF_AFUDC_ON_CASH
     +      + AI_AFUDC_ON_CASH + DSM_AFUDC

            ACQ_AFUDC_EQUITY = (1.-CLASS_BORROWED_AFUDC_RATE) *
     +                   (AFUDC - FA_AFDC_CASH)
     +              + FA_AFDC_CASH - FA_AFDC_BORROWED
            ACQ_AFUDC_BORROWED = AFUDC - ACQ_AFUDC_EQUITY
     +               + Exp_AFDCBorrowed
            ACQ_AFUDC_EQUITY = ACQ_AFUDC_EQUITY
     +             + Exp_AFDCEquity

            IF(ns_class_parameters%STD_MAX <= 1.) then
      ns_class_parameters%STD_MAX = ns_class_parameters%STD_MAX *
     +  (COMMON_STOCK(2,CLASS_POS) +
     +   PREFERRED_STOCK(2,CLASS_POS)+
     +   LONG_TERM_DEBT(2,CLASS_POS))
            endif


C OTHER TAXES IS OLD TXSS

            EXTRAORDINARY_EXPENSE = FA_EXTRAORDINARY_EXPENSE
     +                      + NF_EXTRAORDINARY_EXPENSE

            NET_OF_TAX_EXEXP = FA_WO_ADJUSTMENT_2_CUM_AFEXP
     +                 + EXTRA_ORDINARY_EXPENSE
            IF(EXTRAORDINARY_EXPENSE /= 0. .OR.
     + ns_class_parameters%BTL_AMORT_OF_BOOK /= 0.) THEN
               NET_OF_TAX_EXEXP  = NET_OF_TAX_EXEXP
     +                     + EXTRAORDINARY_EXPENSE
     +                     - EXTRAORDINARY_EXPENSE *
     +                   (ns_class_parameters%STATE_TAX_RATE +
     + ns_class_parameters%FEDERAL_TAX_RATE*
     + (1.-ns_class_parameters%STATE_TAX_RATE))
            ENDIF
            TOTAL_CAPITIAL(1,CLASS_POS) = COMMON_EQUITY(1,CLASS_POS) +
     +                            PREFERRED_STOCK(1,CLASS_POS) +
     +                            LONG_TERM_DEBT(1,CLASS_POS)
            CONVERGED = .FALSE.
            FUNDS_BALANCE = .TRUE.
            INTEREST = LTDINT(YR,CLASS_POS) +
     +            1.05* INTEREST_ON_SHORT_TERM_DEBT(1,CLASS_POS)

C CALCULATION LOOP STARTS HERE

            IF(globecom_YEAR <= LAST_AVAILABLE_MONTHLY_YEAR .AND.
     +                                MONTHLY_MIDAS_ACTIVE) THEN
               IF(PARENT_CLASS .OR. SUBSIDIARY_CLASS) THEN
         CALL CIAC_MONTHLY_AMORTIZATION_CAL(globecom_YEAR,CLASS,
     +              CIAC_CLASS_BALANCE(CLASS_POS),
     +              CIAC_AMORTIZATION,
     +              CLASS_LEVEL)
               ELSE
             CALL CIAC_MONTHLY_AMORTIZATION_CAL(globecom_YEAR,CLASS,
     +                       CIAC_CLASS_BALANCE(CLASS_POS),
     +                       CIAC_AMORTIZATION,
     +                       CLASS_LEVEL)
               ENDIF
            ELSE
               IF(PARENT_CLASS .OR. SUBSIDIARY_CLASS) THEN
                  CIAC_AMORTIZATION =(CIAC_CLASS_BALANCE(CLASS_POS)
     +  + ns_class_parameters%CIAC_CASH/2.)*
     + ns_class_parameters%CIAC_AMORTIZATION_RATE/100.
     +  + ns_class_parameters%CIAC_AMORTIZATION_ADDENDUM
               ELSE
                  ! THIS IS THE BALANCE CAUSED BY ACTIVITY ONLY
                  ! AT THE CLASS LEVEL
                  CIAC_AMORTIZATION = (CIAC_CLASS_BALANCE(CLASS_POS)
     +  + ns_class_parameters%CIAC_CASH/2.)*
     + ns_class_parameters%CIAC_AMORTIZATION_RATE/100.
     +  + ns_class_parameters%CIAC_AMORTIZATION_ADDENDUM
               ENDIF
            ENDIF
            PARENT_SUB_CIAC_BALANCE(CLASS_POS) =
     +  PARENT_SUB_CIAC_BALANCE(CLASS_POS)
     +  + ns_class_parameters%CIAC_CASH - CIAC_AMORTIZATION
            CIAC_CLASS_BALANCE(CLASS_POS) =
     +  CIAC_CLASS_BALANCE(CLASS_POS)
     +  + ns_class_parameters%CIAC_CASH - CIAC_AMORTIZATION
            IF(MPS()) THEN
               DEFERRED_TAXES_CR = NORMALIZATION_TAX_RATE *
     + (DEFERRED_TAX_BASIS
     +  - acq_pension_expense_non_cash
     +  + acq_PENSION_EXPENSE_CASH
     +  + ns_class_parameters%DEFERRED_EXPENSE_CASH
     +  - ns_class_parameters%DEFERRED_EXPENSE_AMORT
     +  + ATL_DEF_TAXES)
     +  + ns_class_parameters%DEFERRED_TAX_ADJUSTMENT
     +  - ns_class_parameters%ADJUSTMENT_TO_DEFERRED_TAXES
     +  - CATAWBA_DEFERRED_TAXES_CR
     +  + EA_DEFERRED_TAXES
            ELSEIF(FirstEnergy_Is_Active) THEN
               DEFERRED_TAXES_CR = NORMALIZATION_TAX_RATE *
     +  (DEFERRED_TAX_BASIS
     +   - acq_pension_expense_non_cash
     +   + acq_PENSION_EXPENSE_CASH
     +   - ACQ_storm_expense_non_cash
     +   + acq_STORM_EXPENSE_CASH
     +   - ACQ_VACATION_PAY_NON_CASH
     +   + acq_VACATION_PAY_CASH
     +   - acq_ExecBenefitsNonCash
     +   + acq_ExecBenefitsCash
     +   - acq_IncentiveCompensationNonCash
     +   + acq_IncentiveCompensationCash
     +   + ns_class_parameters%DEFERRED_EXPENSE_CASH
     +   - ns_class_parameters%DEFERRED_EXPENSE_AMORT
     +   + ATL_DEF_TAXES)
     +   + ns_class_parameters%DEFERRED_TAX_ADJUSTMENT
     +   - ns_class_parameters%ADJUSTMENT_TO_DEFERRED_TAXES
     +   - CATAWBA_DEFERRED_TAXES_CR
     +   + EA_DEFERRED_TAXES
            ELSE
               DEFERRED_TAXES_CR = NORMALIZATION_TAX_RATE *
     +  (DEFERRED_TAX_BASIS
     +   - acq_pension_expense_non_cash
     +   + acq_PENSION_EXPENSE_CASH
     +   + ns_class_parameters%DEFERRED_EXPENSE_CASH
     +   - ns_class_parameters%DEFERRED_EXPENSE_AMORT
     +   + ATL_DEF_TAXES)
     +   + ns_class_parameters%DEFERRED_TAX_ADJUSTMENT
     +   - ns_class_parameters%ADJUSTMENT_TO_DEFERRED_TAXES
     +   - CATAWBA_DEFERRED_TAXES_CR
     +   + EA_DEFERRED_TAXES
            ENDIF
            acq_LTD_PS_DEFERRED_TAX_CR = NORMALIZATION_TAX_RATE
     +                       * LTD_PS_DEFERRED_TAX_BASIS
            BTL_DEFERRED_TAXES_DR = BTL_DEFERRED_TAXES_DR
     +                      + NORMALIZATION_TAX_RATE *
     +                              (FE_NonCashEarningsNonCorp
     +                               + Mark_to_Market)
            BTL_DEF_TAXES_CR = NORMALIZATION_TAX_RATE *
     +                   BTL_DEF_TAXES_CR
     +                 + BTL_DEFERRED_TAXES_CR

C FASB 143 AND CAP X ITEMS

            CALL MONTHLY_CAP_X_ADJUSTMENTS(CLASS,YR,
     +                             acq_CAPX_PENSION_ADJUSTMENT)
            IF(SALT_RIVER_PROJECT()) THEN
               IF(globecom_YEAR <= LAST_AVAILABLE_MONTHLY_YEAR .AND.
     +                                MONTHLY_MIDAS_ACTIVE) THEN
                  CALL MONTHLY_FASB143_CALCULATIONS(CLASS,YR,
     +                  acq_FASB143_ARO_INTEREST_ACCREATION,
     +                  FASB143_LT_LIABILITY_VALUE(1,CLASS_POS),
     +                  FASB143_NET_ASSET_VALUE(1,CLASS_POS),
     +                  acq_FASB143_ARO_CASH_PAYMENTS,
     +                  acq_FASB143_ARO_TRUST_CASH_PAYMENTS)
               ELSE
                  CALL RETURN_FASB_ADDENDUMS(YR,CLASS,
     +                          NucDecom_Discount_Rate,
     +                          acq_FASB143_ARO_INTEREST_ACCREATION,
     +                          acq_FASB143_ARO_CASH_PAYMENTS,
     +                          acq_FASB143_ARO_TRUST_CASH_PAYMENTS)
                  acq_FASB143_ARO_INTEREST_ACCREATION =
     +              NucDecom_Discount_Rate/100. *
     +                   FASB143_LT_LIABILITY_VALUE(1,CLASS_POS)
     +              + acq_FASB143_ARO_INTEREST_ACCREATION
                  FASB143_LT_LIABILITY_VALUE(2,CLASS_POS) =
     +                   FASB143_LT_LIABILITY_VALUE(1,CLASS_POS)
     +                   + acq_FASB143_ARO_INTEREST_ACCREATION
     +                   + ARO_LIABILITY_BAL_ADJ
     +                   - acq_FASB143_ARO_CASH_PAYMENTS
     +                   - acq_FASB143_ARO_TRUST_CASH_PAYMENTS
                  FASB143_NET_ASSET_VALUE(2,CLASS_POS) =
     +                      FASB143_NET_ASSET_VALUE(1,CLASS_POS)
     +                      - ACQ_NUC_DECOMMISSIONING_COST
     +                      + ARO_NET_ASSETS_BAL_ADJ
               ENDIF
            ELSE
               IF(globecom_YEAR <= LAST_AVAILABLE_MONTHLY_YEAR .AND.
     +                                MONTHLY_MIDAS_ACTIVE) THEN
                  CALL MONTHLY_FASB143_CALCULATIONS(CLASS,YR,
     +                  acq_FASB143_ARO_INTEREST_ACCREATION,
     +                  FASB143_LT_LIABILITY_VALUE(1,CLASS_POS),
     +                  FASB143_NET_ASSET_VALUE(1,CLASS_POS),
     +                  acq_FASB143_ARO_CASH_PAYMENTS,
     +                  acq_FASB143_ARO_TRUST_CASH_PAYMENTS)
               ELSE
                  CALL RETURN_FASB_ADDENDUMS(YR,CLASS,
     +                          NucDecom_Discount_Rate,
     +                          acq_FASB143_ARO_INTEREST_ACCREATION,
     +                          acq_FASB143_ARO_CASH_PAYMENTS,
     +                          acq_FASB143_ARO_TRUST_CASH_PAYMENTS)
                  acq_FASB143_ARO_INTEREST_ACCREATION =
     +              NucDecom_Discount_Rate/100. *
     +                   FASB143_LT_LIABILITY_VALUE(1,CLASS_POS)
     +              + acq_FASB143_ARO_INTEREST_ACCREATION
                  FASB143_LT_LIABILITY_VALUE(2,CLASS_POS) =
     +                   FASB143_LT_LIABILITY_VALUE(1,CLASS_POS)
     +                   + acq_FASB143_ARO_INTEREST_ACCREATION
     +                   + ARO_LIABILITY_BAL_ADJ
     +                   - acq_FASB143_ARO_CASH_PAYMENTS
     +                   - acq_FASB143_ARO_TRUST_CASH_PAYMENTS
                  FASB143_NET_ASSET_VALUE(2,CLASS_POS) =
     +                      FASB143_NET_ASSET_VALUE(1,CLASS_POS)
     +                      + ARO_NET_ASSETS_BAL_ADJ
               ENDIF
            ENDIF

            ! !THIS IS AMORT BY THIS CLASS LOWER CLASS AMORT IS
            ! ADDED BELOW.
            acq_ATL_AMORTIZATION = acq_ATL_AMORTIZATION
     +  + ns_class_parameters%PARM_AMORTIZATION_ADJUSTMENT
     +  + ns_class_parameters%DEFERRED_EXPENSE_AMORT
     +  + ns_class_parameters%AMORT_DEF_REVENUES
     +  + acq_FASB143_ARO_INTEREST_ACCREATION
     +  - CIAC_AMORTIZATION
     +  - ns_class_parameters%ATL_AMORT_OF_BOOK

            IF(AMEREN_IS_ACTIVE .OR. PACIFICORP_IS_ACTIVE) THEN
               IF(R_EXP_TRANSFERS_ARE_ACTIVE) THEN
                  IF(.NOT. USE_BUDGET_FUEL_PURCHASE) THEN

                     acq_FUEL_EXPENSE_AFTER_TRANSFR = acq_fuel_expense
                     acq_FUEL_EXP_TRANSFR_4_POWER_SOLD =
     +                            TRANSFR_PURCHASE_FUEL_EXPENSES
     +                            - acq_WHOLESALE_FUEL_EXPENSE
                     acq_REALLOC_PURCHASE_POWER_EXP =
     +                            TRANSFR_PURCHASE_FUEL_EXPENSES
                     acq_fuel_expense = acq_FUEL_EXPENSE_AFTER_TRANSFR
     +                      - acq_WHOLESALE_FUEL_EXPENSE
     +                      + TRANSFR_PURCHASE_FUEL_EXPENSES
                  ELSE
                     acq_REALLOC_PURCHASE_POWER_EXP = 0.
                     acq_FUEL_EXPENSE_AFTER_TRANSFR = acq_fuel_expense
                     acq_FUEL_EXP_TRANSFR_4_POWER_SOLD = 0.
                     acq_WHOLESALE_FUEL_EXPENSE = 0.
                     TRANSFR_PURCHASE_FUEL_EXPENSES = 0.
                  ENDIF
         IF(.NOT.USE_BUDGET_VARIABLE_OM) THEN
          acq_VARIABLE_EXPENSE_AFTER_TRANSFR = acq_variable_expense
         acq_variable_expense = acq_VARIABLE_EXPENSE_AFTER_TRANSFR
     +                 - acq_WHOLESALE_VOM_EXPENSE
     +                 + TRANSFR_PURCHASE_VOM_EXPENSES
            acq_VAR_OM_TRANSFR_AMOUNTS =
     +                    TRANSFR_PURCHASE_VOM_EXPENSES
     +                    - acq_WHOLESALE_VOM_EXPENSE
            acq_AMEREN_VAR_OM_AMOUNTS =
     +                    TRANSFR_PURCHASE_VOM_EXPENSES
         ELSE
          acq_VARIABLE_EXPENSE_AFTER_TRANSFR = acq_variable_expense
                     acq_VAR_OM_TRANSFR_AMOUNTS = 0.
                     acq_AMEREN_VAR_OM_AMOUNTS = 0.
                     acq_WHOLESALE_VOM_EXPENSE = 0.
                     TRANSFR_PURCHASE_VOM_EXPENSES = 0.
                  ENDIF
               ENDIF
               IF(R_REV_TRANSFERS_ARE_ACTIVE) THEN
       acq_SECONDARY_SALES_REV_TRANSFR=TRANSFR_SECONDAY_REVENUES
     +                               - acq_TRANSACT_MARKET_REVENUES
       acq_REALLOC_SECONDARY_SALES_REV= TRANSFR_SECONDAY_REVENUES
               ELSE
                  acq_REALLOC_SECONDARY_SALES_REV= 0.
                  acq_SECONDARY_SALES_REV_TRANSFR = 0.
               ENDIF
             acq_OTHER_SECONDARY_ENRGY_SALES_REV=
     + ns_class_assets_results_2%SECONDARY_SALES_REVENUES
            ELSE
               TRANSFR_SECONDAY_REVENUES = 0.
               TRANSFER_SEC_REV_QUANITIES_MWH = 0.
               TRANSFR_PURCHASE_FUEL_EXPENSES = 0.
               TRANSFR_PURCHASE_VOM_EXPENSES = 0.
               TRANSFR_PUR_EXP_QUANITIES = 0.
               acq_REALLOC_SECONDARY_SALES_REV= 0.
               acq_SECONDARY_SALES_REV_TRANSFR = 0.
               acq_REALLOC_PURCHASE_POWER_EXP = 0.
               acq_FUEL_EXP_TRANSFR_4_POWER_SOLD = 0.
               acq_OTHER_SECONDARY_ENRGY_SALES_REV = 0.
               acq_FUEL_EXPENSE_AFTER_TRANSFR = acq_fuel_expense
               acq_VARIABLE_EXPENSE_AFTER_TRANSFR = acq_variable_expense
               acq_VAR_OM_TRANSFR_AMOUNTS = 0.
               acq_WHOLESALE_FUEL_EXPENSE = 0.
               acq_WHOLESALE_VOM_EXPENSE = 0.
            ENDIF
C END OF AMEREN
            ns_class_assets_results_2%SECONDARY_SALES_REVENUES = 
     + ns_class_assets_results_2%SECONDARY_SALES_REVENUES
     +                         + acq_TRANSACT_MARKET_REVENUES
     +                         + acq_SECONDARY_SALES_REV_TRANSFR

            IF(LAST_CLASS_LEVEL /= CLASS_LEVEL) THEN
               CALL PASS_LEVEL_2_VARS(VARS_2_PASS,
     +                           LEVEL_SUMATION(0,CLASS_LEVEL),
     +                           acq_SBU_VARIABLES)
               DEFERRED_FUEL_BALANCE(CLASS_POS) =
     +                          DEFERRED_FUEL_BALANCE(CLASS_POS)
     +                          - acq_DEFERRED_FUEL_EXPENSE
     +                          - acq_SBU_VARIABLES(393)
               PRIOR_LEVEL_DECOM_FUND_PAYMENTS = acq_SBU_VARIABLES(117)
               PRI_LEVEL_NOT_DECOM_FUND_RETURN = acq_SBU_VARIABLES(235)
       ns_class_parameters%ADJUSTMENT_2_ECONOMIC_ASSETS = 
     + acq_SBU_VARIABLES(262) +
     +  ns_class_parameters%ADJUSTMENT_2_ECONOMIC_ASSETS
               acq_OPERATING_METHOD_ROLLUP = acq_OPERATING_METHOD_ROLLUP
     +    + acq_SBU_VARIABLES(253) ! operating method adjustment
     +   + acq_SBU_VARIABLES(496) ! prior year captured revenues

               CALL ADD_SBU_REVENUES_AND_EXPENSES(acq_SBU_VARIABLES,
     +                                             acq_VARIABLE)

C VARIABLES TO CHECK

               CONSOLIDATED_LOCAL_TAX_ADJ = CONSOLIDATED_LOCAL_TAX_ADJ +
     +                                         ADJ_2_LOCAL_TAXES
               ns_class_parameters%CHANGE_2_DECOMMISSIONING_LIAB =
     +              ns_class_parameters%CHANGE_2_DECOMMISSIONING_LIAB +
     +              SBU_CHANGE_DECOMMISSIONING_LIAB(CLASS_LEVEL)
               SBU_CHANGE_DECOMMISSIONING_LIAB(CLASS_LEVEL) = 0.

C VARIABLES USING SPECIFIC SUMMING ARRAYS

       ns_class_parameters%ADDENDUM_2_RATE_BASE = 
     + ns_class_parameters%ADDENDUM_2_RATE_BASE + acq_VARIABLE(145)

       ns_class_parameters%CASH_OTH_ASSET = 
     + ns_class_parameters%CASH_OTH_ASSET +
     +                           SBU_CASH_OTH_ASSET(CLASS_LEVEL)
               SBU_CASH_OTH_ASSET(CLASS_LEVEL) = 0.
               DSM_CAPITIAL = DSM_CAPITIAL+SBU_DSM_CAPITIAL(CLASS_LEVEL)
               SBU_DSM_CAPITIAL(CLASS_LEVEL) = 0.
               ns_class_parameters%RETIREE_MEDICAL_PAYMENTS = 
     + ns_class_parameters%RETIREE_MEDICAL_PAYMENTS +
     +                 SBU_RETIREE_MEDICAL_PAYMENTS(CLASS_LEVEL)
               SBU_RETIREE_MEDICAL_PAYMENTS(CLASS_LEVEL) = 0.
               ns_class_parameters%ACE_TAX_DEPRECIATION = 
     + ns_class_parameters%ACE_TAX_DEPRECIATION +
     +                 SUB_SBU_ACE_TAX_DEPRECIATION(CLASS_LEVEL)
               SUB_SBU_ACE_TAX_DEPRECIATION(CLASS_LEVEL) = 0.
               ns_class_parameters%TAX_PREFERENCE_DEPRECIATION=
     + ns_class_parameters%TAX_PREFERENCE_DEPRECIATION +
     +                 SUB_SBU_TAX_PRE_DEPRECIATION(CLASS_LEVEL)
               SUB_SBU_TAX_PRE_DEPRECIATION(CLASS_LEVEL) = 0.

C VARIABLES USING OUTPUT DATA SET

               UNAMORTIZED_INTEREST_BALANCE(2,CLASS_POS) =
     +                 UNAMORTIZED_INTEREST_BALANCE(2,CLASS_POS)
     +        + acq_SBU_UNAMORT_DEBIT_INTEREST_BAL           ! 339
               UNAMORTIZED_ISSUE_EXP_BALANCE(2,CLASS_POS) =
     +                UNAMORTIZED_ISSUE_EXP_BALANCE(2,CLASS_POS)
     +      + acq_SBU_UNAMORTIZED_ISSUE_EXPENSE_BAL           ! 339
       ns_class_parameters%CLASS_OTHER_REVENUE = 
     +  ns_class_parameters%CLASS_OTHER_REVENUE
     +                       + acq_SBU_OTHER_REVENUES ! 3
         ! 902
         BTL_DEF_TAXES_CR = BTL_DEF_TAXES_CR+acq_SBU_BTL_DEF_TAXES_CR 
               BTL_DEFERRED_TAXES_DR = BTL_DEFERRED_TAXES_DR
     +                         + acq_SBU_BTL_DEF_TAXES_DR ! 903
               acq_NF_DEFERRED_TAXES_CR = acq_NF_DEFERRED_TAXES_CR
     +                        + acq_SBU_VARIABLES(733)

               DEFERRED_TAXES_CR = DEFERRED_TAXES_CR
     +                     + acq_SBU_DEFERRED_TAXES_CR ! 682
      ! roll-up from debits was acq_SBU_VARIABLES(384)
               INTEREST_AMORTIZATION = INTEREST_AMORTIZATION
     +                         + acq_SBU_VARIABLES(630)
       acq_INTEREST_AMORT_FROM_DEBIT_FILE = acq_SBU_VARIABLES(630)
     +                          + acq_INTEREST_AMORT_FROM_DEBIT_FILE
             acq_ATL_AMORTIZATION = acq_ATL_AMORTIZATION + 
     + acq_SBU_VARIABLES(18)
       acq_FASB143_ARO_INTEREST_ACCREATION = acq_SBU_VARIABLES(638)
     +                         + acq_FASB143_ARO_INTEREST_ACCREATION
       acq_VARIABLE_OM_AMORT = 
     + acq_VARIABLE_OM_AMORT+acq_SBU_VARIABLES(362)
       acq_OTHER_OM_AMORT = acq_OTHER_OM_AMORT + acq_SBU_VARIABLES(439)
               acq_PURCHASE_POWER_AMORT = acq_PURCHASE_POWER_AMORT
     +                        + acq_SBU_VARIABLES(460)

               ns_class_parameters%ADDENDUM_TO_ITC_AMORTIZATED = -
     + acq_SBU_VARIABLES(50) +
     +  ns_class_parameters%ADDENDUM_TO_ITC_AMORTIZATED
               acq_PRIOR_CAUSE_OF_ITC_AMORT = acq_SBU_VARIABLES(475)
               AFUDC = ACQ_AFUDC_BORROWED + ACQ_AFUDC_EQUITY
               ns_class_assets_results_2%SECONDARY_SALES_REVENUES = 
     + ns_class_assets_results_2%SECONDARY_SALES_REVENUES +
     +                                      acq_SBU_VARIABLES(2)

               acq_INC_CAPACITY_SALES_TO_LEVEL_RM =
     +                            acq_INC_CAPACITY_SALES_TO_LEVEL_RM
     +                            + acq_SBU_VARIABLES(727)
                 call write_trace_real(file_trace_aca, "4. ICS_T/L/RM",
     + acq_INC_CAPACITY_SALES_TO_LEVEL_RM)
       acq_CAPACITY_SALES_TO_LEVEL_RM =acq_CAPACITY_SALES_TO_LEVEL_RM
     +                             + acq_SBU_VARIABLES(726)
               acq_INC_CAPACITY_PURCHASES_TO_LEVEL_RM =
     +                        acq_INC_CAPACITY_PURCHASES_TO_LEVEL_RM
     +                        + acq_SBU_VARIABLES(728)
               acq_CAPACITY_PURCHASES_TO_LEVEL_RM =
     +                            acq_CAPACITY_PURCHASES_TO_LEVEL_RM
     +                            + acq_SBU_VARIABLES(725)
         BOOK_DEPRECIATION = BOOK_DEPRECIATION + acq_SBU_VARIABLES(17)

            CATAWBA_EXPENSES = CATAWBA_EXPENSES + acq_SBU_VARIABLES(306)
         ACQ_CATAWBA_CAPACITY_PAYMENTS = ACQ_CATAWBA_CAPACITY_PAYMENTS +
     +                                    acq_SBU_VARIABLES(248)
       ACQ_CATAWBA_LEVEL_CAP_PAYMENTS = ACQ_CATAWBA_LEVEL_CAP_PAYMENTS +
     +                                    acq_SBU_VARIABLES(247)
           CIAC_AMORTIZATION = CIAC_AMORTIZATION + acq_SBU_VARIABLES(19)
               ns_class_parameters%DEFERRED_REVENUES = 
     + ns_class_parameters%DEFERRED_REVENUES +
     +                                    acq_SBU_VARIABLES(32)
               ns_class_parameters%CLASS_BTL_REVENUES = 
     + ns_class_parameters%CLASS_BTL_REVENUES +
     +  acq_SBU_VARIABLES(33)
        ns_class_parameters%CLASS_BTL_EXPENSES = 
     + ns_class_parameters%CLASS_BTL_EXPENSES +
     +  acq_SBU_VARIABLES(35)
               ns_class_parameters%SUBSIDIARY_INCOME = 
     + ns_class_parameters%SUBSIDIARY_INCOME +
     +                                     acq_SBU_VARIABLES(43)
            NET_OF_TAX_EXEXP = NET_OF_TAX_EXEXP + acq_SBU_VARIABLES(44)
               CLASS_OTH_LIAB_SALE_ASSETS = CLASS_OTH_LIAB_SALE_ASSETS +
     +               SBU_CLASS_OTH_LIAB_SALE_ASSETS(CLASS_LEVEL)
               SBU_CLASS_OTH_LIAB_SALE_ASSETS(CLASS_LEVEL) = 0.
       ns_class_parameters%CASH_FROM_SALE_OF_ASSETS = 
     + ns_class_parameters%CASH_FROM_SALE_OF_ASSETS +
     + acq_SBU_VARIABLES(106)
        ns_class_parameters%CIAC_CASH = 
     + ns_class_parameters%CIAC_CASH +  acq_SBU_VARIABLES(113)
         acq_CLASS_LEASED_NFCE = 
     + acq_CLASS_LEASED_NFCE+acq_SBU_VARIABLES(358)
         ns_class_parameters%CAPITIALIZED_LEASE_ADDITIONS =
     +  ns_class_parameters%CAPITIALIZED_LEASE_ADDITIONS + 
     + acq_SBU_VARIABLES(114)

C LEASE PAYMENTS

       ns_class_parameters%ATL_LEASE_PAYMENTS = 
     + ns_class_parameters%ATL_LEASE_PAYMENTS +
     +                       SBU_ATL_LEASE_PAYMENTS(CLASS_LEVEL)

               SBU_ATL_LEASE_PAYMENTS(CLASS_LEVEL) = 0.
        ns_class_parameters%BTL_LEASE_PAYMENTS = 
     + ns_class_parameters%BTL_LEASE_PAYMENTS +
     +                       SBU_BTL_LEASE_PAYMENTS(CLASS_LEVEL)
               SBU_BTL_LEASE_PAYMENTS(CLASS_LEVEL) = 0.
               acq_ATL_LEASE_AMORTIZATION = acq_ATL_LEASE_AMORTIZATION +
     +                                    acq_SBU_VARIABLES(352)
               acq_BTL_LEASE_AMORTIZATION = acq_BTL_LEASE_AMORTIZATION +
     +                                    acq_SBU_VARIABLES(353)
               acq_ATL_LEASE_INTEREST = acq_ATL_LEASE_INTEREST
     +                      + acq_SBU_VARIABLES(677)
               acq_BTL_LEASE_INTEREST = acq_BTL_LEASE_INTEREST
     +                      + acq_SBU_VARIABLES(678)
               acq_BTL_AMORTIZATION_IN_EXPENSES =
     +                            acq_BTL_AMORTIZATION_IN_EXPENSES +
     +                                    acq_SBU_VARIABLES(350)
               ns_class_parameters%NEW_SUBSIDIARY_INVESTMENT = 
     + ns_class_parameters%NEW_SUBSIDIARY_INVESTMENT +
     +                                    acq_SBU_VARIABLES(126)
               acq_NEW_SUB_INVESTMENT = acq_NEW_SUB_INVESTMENT +
     +                                    acq_SBU_VARIABLES(399)
       acq_goodwill_of_new_sub_investment = acq_SBU_VARIABLES(486)
     +                          + acq_goodwill_of_new_sub_investment
               acq_TOTAL_ACQUISION_COST = acq_TOTAL_ACQUISION_COST
     +                        + acq_SBU_VARIABLES(487)
               ns_class_parameters%DEFERRED_EXPENSE_CASH = 
     + ns_class_parameters%DEFERRED_EXPENSE_CASH
     +                         + acq_SBU_VARIABLES(127)
               acq_FASB143_ARO_CASH_PAYMENTS = 
     + acq_FASB143_ARO_CASH_PAYMENTS
     +                             + acq_SBU_VARIABLES(746)
               acq_FASB143_ARO_TRUST_CASH_PAYMENTS =
     +                           acq_FASB143_ARO_TRUST_CASH_PAYMENTS
     +                           + acq_SBU_VARIABLES(747)
               ns_class_parameters%INCOME_TAX_DEPRECIATION = 
     + ns_class_parameters%INCOME_TAX_DEPRECIATION
     +                           + acq_SBU_VARIABLES(130)
       acq_CASH_TIMING_ADJUSTMENTS = acq_CASH_TIMING_ADJUSTMENTS +
     +                                    acq_SBU_VARIABLES(759)
        acq_CHANGE_IN_ACCOUNTS_PAYABLE = acq_CHANGE_IN_ACCOUNTS_PAYABLE
     +                                  + acq_SBU_VARIABLES(406)
               acq_CHANGE_IN_ACCOUNTS_RECEIVABLE =
     +                             acq_CHANGE_IN_ACCOUNTS_RECEIVABLE
     +                                  + acq_SBU_VARIABLES(407)

C RATE BASE SECITON

               DEFERRED_DEBITS_RATE_BASE(2,CLASS_POS) =
     +                DEFERRED_DEBITS_RATE_BASE(2,CLASS_POS)
     +                + SBU_DEFERRED_DEBIT_RATEBASE(CLASS_LEVEL)
               SBU_DEFERRED_DEBIT_RATEBASE(CLASS_LEVEL) = 0.
               DEFERRED_CREDITS_IN_RATE_BASE(2,CLASS_POS) =
     +               DEFERRED_CREDITS_IN_RATE_BASE(2,CLASS_POS)
     +               + SBU_DEFERRED_CREDIT_RATEBASE(CLASS_LEVEL)
               SBU_DEFERRED_CREDIT_RATEBASE(CLASS_LEVEL) = 0.

               CALL SBU_2_PARENT_ADJUSTMENTS(CLASS_POS,.FALSE.)
               CAP_LEASES_BAL_ADJ = CAP_LEASES_BAL_ADJ
     +                      + TOTAL_CAP_LEASES_BAL_ADJ
               TOTAL_CAP_LEASES_BAL_ADJ = 0.
            ELSE
               PRIOR_LEVEL_DECOM_FUND_PAYMENTS = 0.
               PRI_LEVEL_NOT_DECOM_FUND_RETURN = 0.
            ENDIF

            acq_CLASS_DEFERRED_FUEL_BALANCE =
     +                          DEFERRED_FUEL_BALANCE(CLASS_POS)

       acq_TOTAL_DERIVATIVE_REVENUE = acq_PHYS_DERIVATIVES_VAR_REVENUE
     +                         + acq_PHYS_DERIVATIVES_FIX_REVENUE
     +                         + acq_FIN_DERIVATIVES_VAR_REVENUE
     +                         + acq_FIN_DERIVATIVES_FIX_REVENUE

      acq_TOTAL_DERIVATIVE_EXPENSE = acq_PHYS_DERIVATIVES_VAR_EXPENSE
     +                         + acq_PHYS_DERIVATIVES_FIX_EXPENSE
     +                         + acq_FIN_DERIVATIVES_VAR_EXPENSE
     +                         + acq_FIN_DERIVATIVES_FIX_EXPENSE

      acq_TOTAL_FUEL_DERIV_REVENUES = acq_PHY_FUEL_DERIV_VAR_REVENUE
     +                          + acq_PHY_FUEL_DERIV_FIX_REVENUE
     +                          + acq_FIN_FUEL_DERIV_VAR_REVENUE
     +                          + acq_FIN_FUEL_DERIV_FIX_REVENUE

       acq_TOTAL_FUEL_DERIV_EXPENSES = acq_FIN_FUEL_DERIV_VAR_EXPENSE
     +  + acq_FIN_FUEL_DERIV_FIX_EXPENSE
     +  + acq_PHY_FUEL_DERIV_VAR_EXPENSE
     +  + acq_PHY_FUEL_DERIV_FIX_EXPENSE
            acq_LEASE_PRINCIPAL_PAYMENTS = 
     + ns_class_parameters%ATL_LEASE_PAYMENTS
     +                         + ns_class_parameters%BTL_LEASE_PAYMENTS
            acq_TAX_LEASE_EXPENSE = acq_ATL_LEASE_INTEREST
     +                  + acq_BTL_LEASE_INTEREST
            CAPITIALZIED_LEASES(2,CLASS_POS) =
     +                        CAPITIALZIED_LEASES(1,CLASS_POS)
     + + ns_class_parameters%CAPITIALIZED_LEASE_ADDITIONS

     +                        - acq_ATL_LEASE_AMORTIZATION
     +                        - acq_BTL_LEASE_AMORTIZATION
     +                        + CAP_LEASES_BAL_ADJ

C AMEREN ADJUSTMENTS

C AMORTIZED O&M FOR DQE 1/25/98

            AMORTIZATION_EXPENSE = acq_ATL_AMORTIZATION
c    +                             + BTL_AMORTIZATION
     +                     + INTEREST_AMORTIZATION
     +                     + acq_ATL_LEASE_AMORTIZATION
     +                     + acq_BTL_AMORTIZATION_IN_EXPENSES
     +                     + acq_PS_PREM_ISSUE_EXP_AMORT
     +                     + acq_VARIABLE_OM_AMORT
     +                     + acq_OTHER_OM_AMORT
     +                     + acq_PURCHASE_POWER_AMORT
     +                     + acq_EXPENSING_MATRIALS_INVENTORY
     +                     + acq_EXPENSING_GAS_INVENTORY
     +                     + acq_EXPENSING_FUEL_INVENTORY
            IF(PARENT_CLASS .AND. ODEC() .AND. ODEC_NA3_ACTIVE)
     +     acq_OTHER_PURCHASE_POWER_EXPENSE =
     +                           acq_OTHER_PURCHASE_POWER_EXPENSE
     +                           + ODEC_NA3_PURCHASE_EXPENSE
            IF(WVPA()) THEN
       acq_PURCHASE_POWER_EXPENSE = acq_TRANSACT_MARKET_PURCHASES
     +  + acq_OTHER_PURCHASE_POWER_EXPENSE
     +  + EXP_WVPA_NON_MEMBER_COST_OF_POWER
     +  + EXP_WVPA_MEMBER_COST_OF_POWER
     +  + WVPA_PURCHASE_POWER_EXPENSE_ADJ
            ELSE
       acq_PURCHASE_POWER_EXPENSE = acq_TRANSACT_MARKET_PURCHASES
     +   + acq_OTHER_PURCHASE_POWER_EXPENSE
     +   + WVPA_PURCHASE_POWER_EXPENSE_ADJ
            ENDIF
            ns_class_parameters%DEFERRED_EXPENSE_CASH = 
     + ns_class_parameters%DEFERRED_EXPENSE_CASH
     +                      + DD_DEFERRED_EXPENSE_CASH
            acq_VARIABLE_EXPENSE_PLUS_AMORT = acq_variable_expense
     +                            + acq_VARIABLE_OM_AMORT
            acq_OTHER_OM_EXPENSE_PLUS_AMORT = acq_OTHER_EXPENSE_1
     +                            + acq_OTHER_OM_AMORT
     +                            + acq_EXPENSING_MATRIALS_INVENTORY
            acq_OTHER_OM_TAX_EXPENSE = acq_OTHER_EXPENSE_1
     +                     + acq_EXPENSING_MATRIALS_INVENTORY
        acq_PUR_POWER_EXPENSE_PLUS_AMORT = acq_PURCHASE_POWER_EXPENSE
     +   + acq_PURCHASE_POWER_AMORT
            acq_FUEL_EXPENSE_PLUS_AMORT = acq_fuel_expense
     +                        + acq_EXPENSING_FUEL_INVENTORY
            acq_PURCHASE_GAS_EXPENSE_PLUS_AMORT = ACQ_purchased_gas
     +                                + acq_EXPENSING_GAS_INVENTORY

            CUM_DEF_REVENUES(2,CLASS_POS)=CUM_DEF_REVENUES(1,CLASS_POS)
     +                + ns_class_parameters%DEFERRED_REVENUES
     +                - ns_class_parameters%AMORT_DEF_REVENUES
     +                + acq_WVPA_MEMBER_ACCRUED_REVENUES
     +                + CASH_TO_ACCRD_MBR_REVENUES_BAL

            CIAC_BALANCE(2,CLASS_POS) = CIAC_BALANCE(1,CLASS_POS) +
     + ns_class_parameters%CIAC_CASH - CIAC_AMORTIZATION
            OTHER_ASSETS(2,CLASS_POS) = OTHER_ASSETS(1,CLASS_POS)
     +                          + ns_class_parameters%CASH_OTH_ASSET
     +                          + Mark_to_Market
     +                          + FE_NonCashEarningsNonCorp
            PENSION_LIABILITY(2,CLASS_POS) =
     +                          PENSION_LIABILITY(1,CLASS_POS)
     +                          + acq_pension_expense_non_cash
     +                          - acq_PENSION_EXPENSE_CASH
     +                          + acq_CAPX_PENSION_ADJUSTMENT
            STORM_RESERVE_BALANCE(2,CLASS_POS) =
     +                      STORM_RESERVE_BALANCE(1,CLASS_POS)
     +                      + ACQ_storm_expense_non_cash
     +                      - acq_STORM_EXPENSE_CASH
            ExecBenefitsBalance(2,CLASS_POS) =
     +                          ExecBenefitsBalance(1,CLASS_POS)
     +                          + acq_ExecBenefitsNonCash
     +                          - acq_ExecBenefitsCash
            IncentiveCompBalance(2,CLASS_POS) =
     +                         IncentiveCompBalance(1,CLASS_POS)
     +                         + acq_IncentiveCompensationNonCash
     +                         - acq_IncentiveCompensationCash
            ACCRUED_VACATION_PAY_BALANCE(2,CLASS_POS) =
     +               ACCRUED_VACATION_PAY_BALANCE(1,CLASS_POS)
     +               + ACQ_VACATION_PAY_NON_CASH
     +               - acq_VACATION_PAY_CASH

            CALL RETURN_FUNDS_EARNINGS_ADDENDUMS(YR,CLASS,
     +                          ADJ_2_EARNINGS_DECOM_FUND,
     +                          ADJ_2_EARNINGS_POST_RETIREMENT,
     +                          ADJ_2_EARNINGS_ST_INVESTMENTS,
     +                          ADJ_2_EARNINGS_LT_INVESTMENTS)
            IF(globecom_YEAR <= LAST_AVAILABLE_MONTHLY_YEAR .AND.
     +                                MONTHLY_MIDAS_ACTIVE) THEN
        CALL MONTHLY_FUNDS_EARNINGS_CALCULATIONS(CLASS,globecom_YEAR,
     + CLASS_NUC_DECOM_TRUST_BAL(CLASS_POS),
     + ns_class_parameters%NUCL_FUND_RETURN,
     + OCI_NUCL_FUND_RETURN,
     + acq_NET_OF_TAX_NUCL_FUND_RETURN,
     + POST_RETIREMENT_MEDICAL_FUND(CLASS_POS),
     + RETIREMENT_MEDICAL_FUND_RETURN,
     + OCI_RETIREMENT_MEDICAL_FUND_RETURN)
            ELSE
               FEDERAL_EPA_92_TAX_RATE = .20


       ns_class_parameters%NUCL_FUND_RETURN = 
     + (DECOM_FUND_FIRST_HALF_RATE *
     + CLASS_NUC_DECOM_TRUST_BAL(CLASS_POS)
     +  + DECOM_FUND_SECOND_HALF_RATE *
     +                     (CLASS_NUC_DECOM_TRUST_BAL(CLASS_POS)
     +                      + ns_class_parameters%NUCL_DECOM_FUND))/2.
               OCI_NUCL_FUND_RETURN = (OCI_DECOM_FUND_FIRST_HALF_RATE *
     +                      CLASS_NUC_DECOM_TRUST_BAL(CLASS_POS)
     +                 + OCI_DECOM_FUND_SECOND_HALF_RATE *
     +                     (CLASS_NUC_DECOM_TRUST_BAL(CLASS_POS)
     +                      + ns_class_parameters%NUCL_DECOM_FUND))/2.
               IF(SALT_RIVER_PROJECT()) FEDERAL_EPA_92_TAX_RATE = 0.
               acq_NET_OF_TAX_NUCL_FUND_RETURN = (1. -
     +            FEDERAL_EPA_92_TAX_RATE*(1.
     + -ns_class_parameters%STATE_TAX_RATE)) *
     + (ns_class_parameters%NUCL_FUND_RETURN + OCI_NUCL_FUND_RETURN)
     +              + ADJ_2_EARNINGS_DECOM_FUND

       RETIREMENT_MEDICAL_FUND_RETURN =
     +     (RETIREMENT_FUND_FIRST_HALF_RATE *
     +           POST_RETIREMENT_MEDICAL_FUND(CLASS_POS)
     +      + RETIREMENT_FUND_SECND_HALF_RATE *
     +          (POST_RETIREMENT_MEDICAL_FUND(CLASS_POS)
     +           + acq_RETIREMENT_MEDICAL_PAYMENTS
     +           + CASH_TO_POST_RETIRE_MEDICAL_BAL
     +           - ns_class_parameters%RETIREE_MEDICAL_PAYMENTS))/2.
     +     + ADJ_2_EARNINGS_POST_RETIREMENT
       OCI_RETIREMENT_MEDICAL_FUND_RETURN =
     +     (OCI_RETIREMENT_FUND_FIRST_HALF_RATE *
     +           POST_RETIREMENT_MEDICAL_FUND(CLASS_POS)
     +      + OCI_RETIREMENT_FUND_SECND_HALF_RATE *
     +          (POST_RETIREMENT_MEDICAL_FUND(CLASS_POS)
     +           + acq_RETIREMENT_MEDICAL_PAYMENTS
     +           + CASH_TO_POST_RETIRE_MEDICAL_BAL
     +           - ns_class_parameters%RETIREE_MEDICAL_PAYMENTS))/2.
            ENDIF

C NUCLEAR DECOMMISSIONING FUNDS BALANCES

            CLASS_NUC_DECOM_TRUST_BAL(CLASS_POS) =
     +                      CLASS_NUC_DECOM_TRUST_BAL(CLASS_POS)
     +                      + ns_class_parameters%NUCL_DECOM_FUND
     +                      + acq_NET_OF_TAX_NUCL_FUND_RETURN
            ns_class_parameters%NUCL_DECOM_FUND = 
     + ns_class_parameters%NUCL_DECOM_FUND +
     +  PRIOR_LEVEL_DECOM_FUND_PAYMENTS
            acq_SBU_VARIABLES(117) = 0.
            acq_NET_OF_TAX_NUCL_FUND_RETURN = 
     + acq_NET_OF_TAX_NUCL_FUND_RETURN
     + + PRI_LEVEL_NOT_DECOM_FUND_RETURN
            acq_SBU_VARIABLES(235) = 0.
            IF(IP_IS_ACTIVE) THEN
               ns_class_master%FED_INCOME_TAX_DEDUCTIONS = 
     + ns_class_master%FED_INCOME_TAX_DEDUCTIONS +
     + ns_class_parameters%NUCL_DECOM_FUND
               ns_class_master%STATE_INCOME_TAX_DEDUCTIONS=
     + ns_class_master%STATE_INCOME_TAX_DEDUCTIONS +
     + ns_class_parameters%NUCL_DECOM_FUND
            ENDIF

            NUC_DECOM_FUND_BAL(2,CLASS_POS) =
     +                           NUC_DECOM_FUND_BAL(1,CLASS_POS)
     +                           + ns_class_parameters%NUCL_DECOM_FUND
     +                           + acq_NET_OF_TAX_NUCL_FUND_RETURN
     +                           + NUCLEAR_DECOM_FUND_BAL_ADJ

C POST RETIREMENT MEDICAL BALANCES

            BOY_POST_RETIRE_MEDICAL_FUND =
     +                   POST_RETIREMENT_MEDICAL_FUND(CLASS_POS)
            POST_RETIREMENT_MEDICAL_FUND(CLASS_POS) =
     +                   POST_RETIREMENT_MEDICAL_FUND(CLASS_POS)
     +                   + acq_RETIREMENT_MEDICAL_PAYMENTS
     +                   - ns_class_parameters%RETIREE_MEDICAL_PAYMENTS
     +                   + CASH_TO_POST_RETIRE_MEDICAL_BAL
     +                   + POST_RETIRE_MEDICAL_BAL_ADJ
     +                   + OCI_RETIREMENT_MEDICAL_FUND_RETURN
            IF(SALT_RIVER_PROJECT() .OR.
     +                   RETAIN_POST_RETIREMENT_EARNINGS()) THEN
                                 ! ADD A RETAIN EARNINGS SWITCH HERE
               POST_RETIREMENT_MEDICAL_FUND(CLASS_POS) =
     +                   POST_RETIREMENT_MEDICAL_FUND(CLASS_POS)
     +                   + RETIREMENT_MEDICAL_FUND_RETURN
            ENDIF
            BOY_POST_RETIRE_MED_PAYABLE =
     +                    POST_RETIREMENT_MED_PAYABLE(CLASS_POS)
            POST_RETIREMENT_MED_PAYABLE(CLASS_POS) =
     +                    POST_RETIREMENT_MED_PAYABLE(CLASS_POS)
     +                    + acq_RETIREMENT_MEDICAL_PAYMENTS
     +                    - ns_class_parameters%RETIREE_MEDICAL_PAYMENTS

            USE_ACTUAL_STATE_TAXES = .FALSE.
            USE_ACTUAL_FEDERAL_TAXES = .FALSE.
            USE_ACTUAL_DEFERRED_TAXES_CR = .FALSE.
            USE_ACTUAL_DEFERRED_TAXES_DR = .FALSE.
            USE_ACTUAL_BTL_DEF_TAXES_DR = .FALSE.
            USE_ACTUAL_BTL_DEF_TAXES_CR = .FALSE.

               CALL RETURN_MONTHLY_ACTUAL_TAXES(YR,CLASS,
     +                             ANNUAL_STATE_INCOME_TAX,
     +                             USE_ACTUAL_STATE_TAXES,
     +                             ANNUAL_FEDERAL_INCOME_TAX,
     +                             USE_ACTUAL_FEDERAL_TAXES,
     +                             ACTUAL_DEFERRED_TAXES_DR,
     +                             USE_ACTUAL_DEFERRED_TAXES_DR,
     +                             ACTUAL_DEFERRED_TAXES_CR,
     +                             USE_ACTUAL_DEFERRED_TAXES_CR)

               IF(USE_ACTUAL_DEFERRED_TAXES_CR) THEN
                  DEFERRED_TAXES_CR = ACTUAL_DEFERRED_TAXES_CR
     +                        - acq_LTD_PS_DEFERRED_TAX_CR
     +                        - acq_NF_DEFERRED_TAXES_CR
               ENDIF
               IF(USE_ACTUAL_BTL_DEF_TAXES_CR) THEN
                  BTL_DEF_TAXES_CR = ACTUAL_BTL_DEF_TAXES_CR
               ENDIF


            acq_TOTAL_DEF_TAXES_CR = DEFERRED_TAXES_CR
     +                   + BTL_DEF_TAXES_CR
     +                   + acq_LTD_PS_DEFERRED_TAX_CR
     +                   + acq_NF_DEFERRED_TAXES_CR
            DEF_TAX_CR_BALANCE(2,CLASS_POS) = acq_TOTAL_DEF_TAXES_CR +
     +                        ADJUSTMENT_2_DEFERRED_TAXES_BAL +
     +                        DEF_TAX_CR_BALANCE(1,CLASS_POS)
            NET_UTILITY_PLANT(2,CLASS_POS) = CLASS_GPV(2,CLASS_POS) +
     +              CLASS_CWIP(2,CLASS_POS) -
     +              CLASS_CUMULATIVE_DEPRECIATION(2,CLASS_POS) +
     +              CLASS_NET_NF_VALUE(2,CLASS_POS)

C FUNDS FLOW SECTION

            acq_TOTAL_ACQUISION_COST = acq_NEW_SUB_INVESTMENT
     +                     + acq_goodwill_of_new_sub_investment
            COMMON_ISSUED_4_ACQUISITION = 0.
            IF(acq_TOTAL_ACQUISION_COST > 0. .AND. CCN()) THEN
               ACQUISITION_MO = 1
               ACQUISITION_EXPENSE = .025*acq_TOTAL_ACQUISION_COST
               acq_OTHER_EXPENSE_3 = acq_OTHER_EXPENSE_3
     +                   + ACQUISITION_EXPENSE
       COMMON_ISSUED_4_ACQUISITION = ns_class_parameters%EQRATO *
     +                                   (acq_TOTAL_ACQUISION_COST
     +                                    + ACQUISITION_EXPENSE)
               IF(ns_class_parameters%CSUNIT /= 0.0) 
     + COMMON_ISSUED_4_ACQUISITION = ns_class_parameters%CSUNIT *
     + AINT(0.0001 + 
     + COMMON_ISSUED_4_ACQUISITION/ns_class_parameters%CSUNIT)
               IF(ns_class_parameters%CSMIN > 0. .AND. 
     + COMMON_ISSUED_4_ACQUISITION < ns_class_parameters%CSMIN)
     + COMMON_ISSUED_4_ACQUISITION = ns_class_parameters%CSMIN
               COMMON_EQUITY(1,CLASS_POS) = COMMON_EQUITY(1,CLASS_POS)
     +                             + COMMON_ISSUED_4_ACQUISITION
      call write_trace_real(file_trace_aca,"COMMON_EQUITY(1,class_pos)",
     + common_equity(1, class_pos))
       call write_trace_int2(file_trace_aca, "CLASS_POS", class_pos)
      

       PREFERRED_ISSUED_4_ACQUISITION = ns_class_parameters%PSRATO *
     +                                   (acq_TOTAL_ACQUISION_COST
     +                                    + ACQUISITION_EXPENSE)
               IF(ns_class_parameters%PSUNIT /= 0.) 
     + PREFERRED_ISSUED_4_ACQUISITION = ns_class_parameters%PSUNIT*
     +      AINT(0.0001 + PREFERRED_ISSUED_4_ACQUISITION/
     + ns_class_parameters%PSUNIT)
               DEBT_ISSUED_4_ACQUISITION = acq_TOTAL_ACQUISION_COST
     +                          + ACQUISITION_EXPENSE
     +                          - COMMON_ISSUED_4_ACQUISITION
     +                          - PREFERRED_ISSUED_4_ACQUISITION
               IF(ns_class_parameters%LDUNIT /= 0.) then
       DEBT_ISSUED_4_ACQUISITION = ns_class_parameters%LDUNIT *
     +  AINT(0.0001 + DEBT_ISSUED_4_ACQUISITION/
     + ns_class_parameters%LDUNIT)
              endif

               DOWHILE ((COMMON_ISSUED_4_ACQUISITION
     +          + PREFERRED_ISSUED_4_ACQUISITION
     +          + DEBT_ISSUED_4_ACQUISITION) <
     +                                  (acq_TOTAL_ACQUISION_COST
     +                                   + ACQUISITION_EXPENSE))
       COMMON_ISSUED_4_ACQUISITION = ns_class_parameters%CSUNIT
     +                             + COMMON_ISSUED_4_ACQUISITION
                  IF((COMMON_ISSUED_4_ACQUISITION
     +        + PREFERRED_ISSUED_4_ACQUISITION
     +        + DEBT_ISSUED_4_ACQUISITION) >=
     +                   (acq_TOTAL_ACQUISION_COST
     +                              + ACQUISITION_EXPENSE)) EXIT
       PREFERRED_ISSUED_4_ACQUISITION = ns_class_parameters%PSUNIT
     +                          + PREFERRED_ISSUED_4_ACQUISITION
                  IF((COMMON_ISSUED_4_ACQUISITION
     +        + PREFERRED_ISSUED_4_ACQUISITION
     +        + DEBT_ISSUED_4_ACQUISITION) >=
     +                   (acq_TOTAL_ACQUISION_COST
     +                              + ACQUISITION_EXPENSE)) EXIT
       DEBT_ISSUED_4_ACQUISITION = ns_class_parameters%LDUNIT
     +                               + DEBT_ISSUED_4_ACQUISITION
               ENDDO
               SINKING_FUND_PAYMENT = DEBT_ISSUED_4_ACQUISITION * 
     + ns_class_parameters%LDSINK
               CALL MONTHLY_LTD_ADDITIONS_ALL_YEAR(ACQUISITION_MO,
     + YR,CLASS,
     + DEBT_ISSUED_4_ACQUISITION,
     + ns_class_parameters%LTDRTE,
     + SINKING_FUND_PAYMENT,
     + ns_class_parameters%LTD_SINKING_FUND_LAG,
     + ANNINT(0,CLASS_POS),
     + ANN_LTD_INT(0,CLASS_POS))
               ns_class_master%DEBT_FILE_LTD_ISSUED = 
     + ns_class_master%DEBT_FILE_LTD_ISSUED
     +                        + DEBT_ISSUED_4_ACQUISITION
               LTDINT(YR,CLASS_POS) = LTDINT(YR,CLASS_POS)
     +                        + DEBT_ISSUED_4_ACQUISITION *
     +                         (13.-FLOAT(ACQUISITION_MO))/12. *
     +                          ns_class_parameters%LTDRTE
            ENDIF

            MONTHLY_COMMON_SHARES_ACTIVE = .FALSE.
            IF(MONTHLY_MIDAS_ACTIVE .or. .true.) THEN
               IF(DEBT_COMMON_STOCK_ISSUED /= 0. .OR.
     +        DEBT_COMMON_STOCK_BUYBACK /= 0. .OR.
     +               DEBT_COMMON_SHARES_ISSUED /= 0. .OR.
     +                 COMMON_ISSUED_4_ACQUISITION /= 0. .OR.
     +                    DEBT_COMMON_SHARES_BUYBACK /= 0.) THEN
                  MONTHLY_COMMON_SHARES_ACTIVE = .TRUE.
       ns_class_parameters%CSMIN = 
     + MAX(ns_class_parameters%CSMIN,(DEBT_COMMON_STOCK_ISSUED
     +   + COMMON_ISSUED_4_ACQUISITION))
       ns_class_parameters%CSMIN = 
     + ns_class_parameters%CSMIN - DEBT_COMMON_STOCK_BUYBACK
                  IF(ns_class_parameters%CSMIN < 0.) THEN
       ns_class_parameters%CSMAX = ns_class_parameters%CSMIN
                  ELSE
       ns_class_parameters%CSMAX = MAX(ns_class_parameters%CSMIN,
     + ns_class_parameters%CSMAX)
                  ENDIF
               ENDIF
            ENDIF
            CASH_4_INVESTMENTS = ACQ_FA_CASH
     +                   + ACQ_NF_CASH
     +                   - acq_CAPX_PENSION_ADJUSTMENT
     +                   + DSM_CAPITIAL
     +                   + ns_class_parameters%CASH_OTH_ASSET
     +                   + ns_class_parameters%NEW_SUBSIDIARY_INVESTMENT
     +                   - ns_class_parameters%SUBSIDIARY_DIVIDEND
     +                   + acq_SALVAGE_TRANSACTIONS
     +                   - ns_class_parameters%CIAC_CASH
     + + ns_class_parameters%CAPITIALIZED_LEASE_ADDITIONS
     +                   + acq_NEW_SUB_INVESTMENT
     +                   + acq_goodwill_of_new_sub_investment

C INCOME STATEMENT

C UNDER CONSTRUCTION

            POWER_AGENCY_OWNED_COST = 0.
C            acq_CASH_ADDITIONS_2_FUEL_INVENTORY = 0.
C            AMORTIZATION_OF_FUEL_INVENTORY = 0.
            FUEL_INVENTORY(CLASS_POS) = FUEL_INVENTORY(CLASS_POS)
     +                         + acq_CASH_ADDITIONS_2_FUEL_INVENTORY
     +                         - acq_EXPENSING_FUEL_INVENTORY
            CLASS_MATERIALS_N_SUPPLIES(CLASS_POS) =
     +                     CLASS_MATERIALS_N_SUPPLIES(CLASS_POS)
     +                     + acq_CASH_ADDS_2_MATRIALS_INVENTORY
     +                     - acq_EXPENSING_MATRIALS_INVENTORY
            CLASS_GAS_STORAGE(CLASS_POS) = CLASS_GAS_STORAGE(CLASS_POS)
     +                             + acq_CASH_ADDS_2_GAS_INVENTORY
     +                             - acq_EXPENSING_GAS_INVENTORY

      acq_CASH_ADDS_2_INVENTORIES = acq_CASH_ADDITIONS_2_FUEL_INVENTORY
     +                        + acq_CASH_ADDS_2_MATRIALS_INVENTORY
     +                        + acq_CASH_ADDS_2_GAS_INVENTORY


            IF(LAST_CLASS_LEVEL /= CLASS_LEVEL) THEN

            ENDIF
C NON-CASH EXPENSES
            TOTAL_NON_CASH_EXPENSES = BOOK_DEPRECIATION
     +                        + acq_ATL_AMORTIZATION
     +                        + ACQ_NF_NON_CASH_EXPENSE
     +                        - BTL_NUC_FUEL_DECOM_LIABILITY
     +                        - ACQ_CATAWBA_LEVEL_CAP_PAYMENTS
     +                        + acq_ATL_LEASE_AMORTIZATION
     +                        + acq_VARIABLE_OM_AMORT
     +                        + acq_OTHER_OM_AMORT
     +                        + acq_PURCHASE_POWER_AMORT
     +                        + acq_DEFERRED_FUEL_EXPENSE
     +                        + ACQ_VACATION_PAY_NON_CASH
     +                        + acq_pension_expense_non_cash
C     +                        - acq_PENSION_EXPENSE_CASH
     +                        + ACQ_storm_expense_non_cash
     +                        + acq_EXPENSING_MATRIALS_INVENTORY
     +                        + acq_EXPENSING_GAS_INVENTORY
     +                        + acq_EXPENSING_FUEL_INVENTORY
     +                        + acq_ExecBenefitsNonCash
     +                        + acq_IncentiveCompensationNonCash

C CASH EXPENSES

            IF(WVPA() .and. .false.) THEN
       ACQ_SERVICE_TRANSACTION_EXPENSE = ACQ_SERVICE_TRANSACTION_EXPENSE
     +                        + acq_WVPA_MEMBER_COST_OF_SERVICES
     +                        + acq_WVPA_NON_MEMBER_COST_OF_SERVICES
       ! todo: A conflicting strategy was to rename it to 
       ! WVPA_NONMBR_COST_OF_SERVICES
       ! ^^^^ This is not going to compile.
            ELSE
       ACQ_SERVICE_TRANSACTION_EXPENSE = ACQ_SERVICE_TRANSACTION_EXPENSE
     +                               + EXP_SERVICE_TRANSACTIONS
            ENDIF
C           acq_OTHER_EXPENSE_2 = acq_OTHER_EXPENSE_2 +
C    +                                   KEPCO_WC_CURENT_MAINT_ENRG_COST
            CALL SUM_CASH_EXPENSES(acq_TOTAL_CASH_EXPENSES)
            CLASS_NON_VARIABLE_EXPENSE = ACQ_FIXED_EXPENSE
     +                      + acq_INC_CAPACITY_PURCHASES_TO_LEVEL_RM
     +                           + acq_OTHER_EXPENSE_1
     +                           + acq_OTHER_EXPENSE_2
     +                           + acq_OTHER_EXPENSE_3
     +                           + ACQ_DSM_EXPENSE
     +                           + ACQ_DSM_REBATE
     +                           + acq_RETIREMENT_MEDICAL_PAYMENTS
     +                           + acq_TRANSMISSION_OPERATION
     +                           + acq_TRANSMISSION_MAINTENANCE
     +                           + acq_DISTRIBUTION_OPERATION
     +                           + acq_DISTRIBUTION_MAINTENANCE
     +                           + acq_CUSTOMER_ACCOUNTS
     +                           + acq_CUSTOMER_SERVICES
     +                           + acq_SALES_EXPENSE
     +                           + acq_AG_OPERATIONS
     +                           + acq_AG_MAINTENANCE
            acq_AMORTIZATION_B4_CAP_SERVICE = acq_ATL_AMORTIZATION
     +                         + acq_ATL_LEASE_AMORTIZATION
     +                         + acq_BTL_AMORTIZATION_IN_EXPENSES
     +                         + acq_VARIABLE_OM_AMORT
     +                         + acq_OTHER_OM_AMORT
     +                         + acq_PURCHASE_POWER_AMORT
     +                         + acq_EXPENSING_MATRIALS_INVENTORY
     +                         + acq_EXPENSING_GAS_INVENTORY
     +                         + acq_EXPENSING_FUEL_INVENTORY
c    +                                 + acq_PS_PREM_ISSUE_EXP_AMORT
            TOTAL_EXPENSES_B4_TAXES = acq_TOTAL_CASH_EXPENSES
     +                        + TOTAL_NON_CASH_EXPENSES

C ENDOF SBU ADDITONS TO INCOME STATEMENT

         IF(PARENT_CLASS) THEN
            CONSOLIDATED_INCOME_TAXES = SUB_FED_TAX_PAYMENTS_2_PARENT

            CONSOLIDATED_INCOME_TAXES_PAID = 0.
            CONSOLIDATED_INCOME_TAXES_PAID =
     +                           CONSOLIDATED_FEDERAL_TAXES_PAID

         ELSE
            CONSOLIDATED_INCOME_TAXES = 0.
            CONSOLIDATED_TAX_ADJUSTMENT = 0.
            CONSOLIDATED_INCOME_TAXES_PAID = 0.
            CONSOLIDATED_TAX_LIB_ADJUSTMENT = 0.
         ENDIF


         acq_CAPTURED_OPT_METHOD_REVENUES =
     +                   CUM_CAPTURED_OPT_METHOD_REVS(CLASS_POS)
         acq_TOTAL_BASE_RATES_REVENUES = acq_REFERENCE_BASE_REVENUES
     +                       + BASE_RATES_REVENUES
     +                       + acq_UNBILLED_REVENUES
     +                       + acq_RESIDENTIAL_REVENUES
     +                       + acq_COMMERCIAL_REVENUES
     +                       + acq_INDUSTRIAL_REVENUES
     +                       + acq_LIGHTING_REVENUES
     +                       + acq_GOVERNMENT_SALES_REVENUE
     +                       + acq_CAPTURED_OPT_METHOD_REVENUES
     +                       + acq_OPERATING_METHOD_ROLLUP
     +                       + acq_WVPA_MEMBER_ACCRUED_REVENUES
     +                       + acq_REGULATED_REVENUES_11
     +                       + acq_REGULATED_REVENUES_12
     +                       + acq_REGULATED_REVENUES_13
     +                       + acq_REGULATED_REVENUES_14
     +                       + acq_REGULATED_REVENUES_15
         IF(INDEX('C,M,P,A',PRICE_SOURCE_FOR_PRICE_DRIVER) /= 0) THEN
            IF(PRICE_SOURCE_FOR_PRICE_DRIVER == 'P'.OR.
     +                PRICE_SOURCE_FOR_PRICE_DRIVER == 'A') THEN
               IF(SYSTEM_BASED_FORECAST()) THEN
                  CALL GET_SYSTEM_SALES(RATE_CLASS_ENERGY)
               ELSEIF(.NOT. NERC_REGION_BASED_FORECAST()) THEN
                  CALL RETURN_RATE_CLASS_ENERGY(CLASS,RATE_CLASS_ENERGY)
               ELSE
                  RATE_CLASS_ENERGY = 0.
               ENDIF
       acq_TOTAL_BASE_RATES_REVENUES = acq_TOTAL_BASE_RATES_REVENUES +
     + RATE_CLASS_ENERGY*ns_class_parameters%CLASS_SALES/1000000.
            ENDIF
            IF(PRICE_SOURCE_FOR_PRICE_DRIVER == 'C'.OR.
     +                PRICE_SOURCE_FOR_PRICE_DRIVER == 'A') THEN
               CLASS_FORECAST_REVENUES = 0.
               IF(SYSTEM_BASED_FORECAST()) THEN
                  CALL GET_REVENUES_FORM_SYSTEM_SALES(
     +                                  CLASS_FORECAST_REVENUES)
               ELSEIF(.NOT. NERC_REGION_BASED_FORECAST()) THEN
                  CALL RETURN_RATE_CLASS_REVENUES(CLASS,
     +                             RATE_REVENUE_CLASS_EXISTS,
     +                             RATE_CLASS_ENRG_REVENUES,
     +                             RATE_CLASS_DEMAND_REVENUES,
     +                             RATE_CLASS_CUSTOMER_REVENUES,
     +                             RATE_CLASS_CUSTOMERS,
     +                             RATE_CLASS_DEMAND,
     +                             RATE_CLASS_ENERGY)
                  CLASS_FORECAST_REVENUES = RATE_CLASS_ENRG_REVENUES+
     +                              RATE_CLASS_DEMAND_REVENUES +
     +                              RATE_CLASS_CUSTOMER_REVENUES
               ENDIF
            ENDIF
           acq_REFERENCE_BASE_REVENUES = acq_TOTAL_BASE_RATES_REVENUES +
     +                        MARKET_BASE_REVENUES +
     +                        CLASS_FORECAST_REVENUES +
     +                        ns_class_parameters%CLASS_BASE_REVENUE
         ELSE
           acq_REFERENCE_BASE_REVENUES = acq_TOTAL_BASE_RATES_REVENUES +
     +                        ns_class_parameters%CLASS_BASE_REVENUE
         ENDIF
         IF(OPERATING_METHOD == 'P') THEN

            acq_TOTAL_BASE_RATES_REVENUES = acq_REFERENCE_BASE_REVENUES
         ELSEIF(OPERATING_METHOD == 'O') THEN

            acq_TOTAL_BASE_RATES_REVENUES = acq_REFERENCE_BASE_REVENUES
         ELSE
            acq_TOTAL_BASE_RATES_REVENUES = acq_REFERENCE_BASE_REVENUES
         ENDIF

         IF(OPERATING_METHOD == 'E') THEN
            RETURN_MEASURE = ns_class_parameters%ROEQU
         ELSEIF(OPERATING_METHOD == 'C') THEN
            RETURN_MEASURE = ns_class_parameters%MIN_COV_RATIO
            IF(COVERAGE_RATIO == 1) THEN
        ns_class_master%GOPINC = ns_class_parameters%MIN_COV_RATIO * 
     + (ANNINT(YR-1,CLASS_POS)
     + + ns_class_parameters%STD_INTEREST_RATE *
     +                              SHORT_TERM_DEBT(1,CLASS_POS)
     +                           + STD_INTEREST_ADDEN)
            ELSE
       ns_class_master%GOPINC =  ns_class_parameters%MIN_COV_RATIO * 
     + (LTDINT(YR,CLASS_POS) +
     +                 INTEREST_ON_SHORT_TERM_DEBT(1,CLASS_POS))
            ENDIF
         ELSE 
            IF (RETURN_ON_RATEBASE_SOURCE == 'I') THEN
               TOTAL_WIEGHTED_CAPITAL = COMMON_EQUITY(1,CLASS_POS) +
     + PREFERRED_STOCK(1,CLASS_POS) +
     + LONG_TERM_DEBT(1,CLASS_POS) +
     + (SHORT_TERM_DEBT(1,CLASS_POS) *
     +             ns_class_parameters%STD_IN_WEIGHTED_COST_PERCENT +
     +  CUSTOMER_DEPOSITS_BAL(1,CLASS_POS) *
     + ns_class_parameters%CUSTOMER_DEPOSITS_IN_WC_PERCENT +
     +  CIAC_BALANCE(1,CLASS_POS) *
     +  ns_class_parameters%CIAC_BALANCE_IN_WC_PERCENT +
     +  DEF_TAX_CR_BALANCE(1,CLASS_POS) *
     + ns_class_parameters%DEF_TAX_CR_IN_WC_PERCENT +
     +  DEF_ITC_BALANCE(1,CLASS_POS) *
     + ns_class_parameters%DEF_ITC_IN_WC_PERCENT)/100.

C DEFERRED TAXES CR AND CIAC ARE AT ZERO COST.

               TOTAL_WEIGHTED_COST = ANNINT(YR-1,CLASS_POS) +
     +  INTEREST_AMORTIZATION +
     +  acq_PS_PREM_ISSUE_EXP_AMORT +
     +  COMMON_EQUITY(1,CLASS_POS) * ns_class_parameters%ROEQU +
     + (SHORT_TERM_DEBT(1,CLASS_POS) *
     +       ns_class_parameters%STD_INTEREST_RATE *
     +             ns_class_parameters%STD_IN_WEIGHTED_COST_PERCENT +
     +  CUSTOMER_DEPOSITS_BAL(1,CLASS_POS) *
     + ns_class_parameters%INTEREST_ON_CUSTOMER_DEPOSITS *
     + ns_class_parameters%CUSTOMER_DEPOSITS_IN_WC_PERCENT +
     + DEF_ITC_BALANCE(1,CLASS_POS) *
     + WEIGHTED_COST_OF_CAPITAL_BY(CLASS_POS) *
     + ns_class_parameters%DEF_ITC_IN_WC_PERCENT)/100.

               IF(ABS(TOTAL_WEIGHTED_COST)<.00001)TOTAL_WEIGHTED_COST=0.
               IF(TOTAL_WIEGHTED_CAPITAL /= 0.) THEN
       ns_class_parameters%RETURN_ON_NPV = TOTAL_WEIGHTED_COST/
     +                                    TOTAL_WIEGHTED_CAPITAL
               ENDIF
               WEIGHTED_COST_OF_CAPITAL_BY(CLASS_POS) = 
     + ns_class_parameters%RETURN_ON_NPV
            ENDIF
            RETURN_MEASURE = ns_class_parameters%RETURN_ON_NPV
         ENDIF
         OTH_REVENUE_loc(1,CLASS_POS) = OTH_REVENUE_loc(2,CLASS_POS)
         OTH_REVENUE_loc(2,CLASS_POS) = 
     + ns_class_parameters%CLASS_OTHER_REVENUE
         acq_NON_BASE_REVENUES = ACQ_ADJUSTMENT_CLAUSE_REVENUES
     +  + acq_CLASS_GAS_ADJ_CLAUSE_REVENUE
     +  + ns_class_assets_results_2%SECONDARY_SALES_REVENUES
     +  + CATAWBA_REVENUES
     +  + OTH_REVENUE_loc(2,CLASS_POS)
     +  + acq_GAS_REVENUES
     +  + acq_RELATIONSHIP_REVENUES
     +  + acq_BULK_POWER_REVENUES
     +  + acq_CAPACITY_SALES_REVENUE
     +  + acq_INC_CAPACITY_SALES_TO_LEVEL_RM    ! 726
     +  + acq_TOTAL_DERIVATIVE_REVENUE
     +  + acq_TOTAL_FUEL_DERIV_REVENUES
     +  + acq_COMPETITIVE_SALES_REVENUE
     +  + acq_UTILITY_SALES_REVENUE
     +  + acq_ICAP_REVENUES
     +  + acq_FE_Competitive_Unit_Sales
     +  + acq_NON_REG_REVENUES_10
     +  + acq_NON_REG_REVENUES_11
     +  + acq_NON_REG_REVENUES_12
     +  + acq_NON_REG_REVENUES_13
     +  + acq_NON_REG_REVENUES_14
     +  + acq_NON_REG_REVENUES_15
      if (file_trace_aca/=BAD_TRACE_HANDLE) then
        write(file_trace_aca, *) 
     + " ADJUSTMENT_CLAUSE_REVENUES ", ACQ_ADJUSTMENT_CLAUSE_REVENUES,
     +   " CLASS_GAS_ADJ_CLAUSE_REVENUE ", 
     + acq_CLASS_GAS_ADJ_CLAUSE_REVENUE,
     +   " SSR ", ns_class_assets_results_2%SECONDARY_SALES_REVENUES,
     +   " CATAWBA_REVENUES ", CATAWBA_REVENUES,
     +   " OTH_REVENUE ", OTH_REVENUE_loc(2,CLASS_POS),
     +   " GAS_REVENUES ", acq_GAS_REVENUES,
     +   " RELATIONSHIP_REVENUES ", acq_RELATIONSHIP_REVENUES,
     +   " BULK_POWER_REVENUES ", acq_BULK_POWER_REVENUES,
     +   " CAPACITY_SALES_REVENUE ", acq_CAPACITY_SALES_REVENUE,
     +   " INC_CAPACITY_SALES_TO_LEVEL_RM ", 
     + acq_INC_CAPACITY_SALES_TO_LEVEL_RM,
     +   " TOTAL_DERIVATIVE_REVENUE ", acq_TOTAL_DERIVATIVE_REVENUE,
     +   " TOTAL_FUEL_DERIV_REVENUES ", acq_TOTAL_FUEL_DERIV_REVENUES,
     +   " COMPETITIVE_SALES_REVENUE ", acq_COMPETITIVE_SALES_REVENUE,
     +   " UTILITY_SALES_REVENUE ", acq_UTILITY_SALES_REVENUE,
     +   " ICAP_REVENUES ", acq_ICAP_REVENUES,
     +   " FE_Competitive_Unit_Sales ", acq_FE_Competitive_Unit_Sales,
     +   " NON_REG_REVENUES_10 ", acq_NON_REG_REVENUES_10,
     +   " NON_REG_REVENUES_11 ", acq_NON_REG_REVENUES_11,
     +   " NON_REG_REVENUES_12 ", acq_NON_REG_REVENUES_12,
     +   " NON_REG_REVENUES_13 ", acq_NON_REG_REVENUES_13,
     +   " NON_REG_REVENUES_14 ", acq_NON_REG_REVENUES_14,
     +   " NON_REG_REVENUES_15 ", acq_NON_REG_REVENUES_15, linefeed
      end if
      

     
        call write_trace_real(file_trace_aca, "1. NBR", 
     + acq_NON_BASE_REVENUES)

         IF(SALT_RIVER_PROJECT()) THEN
            acq_NON_CASH_ATL_REVENUES = acq_UNBILLED_REVENUES
     +   + acq_WVPA_MEMBER_ACCRUED_REVENUES
     +   + ns_class_parameters%NUCL_FUND_RETURN
     +   + RETIREMENT_MEDICAL_FUND_RETURN
         ELSE
            acq_NON_CASH_ATL_REVENUES = acq_UNBILLED_REVENUES
     +                      + acq_WVPA_MEMBER_ACCRUED_REVENUES
     +                      + RETIREMENT_MEDICAL_FUND_RETURN
         ENDIF

C
         ns_class_master%PROPERTY_TAX_GPV = 
     +  FA_PROPERTY_TAX_GPV + EA_PROPERTY_TAX_GPV +
     +  DSM_GPV_PROP_TAX_loc
     
         ns_class_master%PROPERTY_TAX_NPV = 
     + FA_PROPERTY_TAX_NPV + EA_PROPERTY_TAX_NPV +
     + DSM_NPV_PROP_TAX_loc
     
         ns_class_parameters%CLASS_ADDENDUM_TO_PROPERTY_TAX = 
     + ns_class_parameters%CLASS_ADDENDUM_TO_PROPERTY_TAX
     +                          + EXP_FILE_PROPERTY_TAXES



         CALL ASSET_CLASS_PROPERTY_TAXES

         IF(YR == 1 .AND. CLASS_TYPE(CLASS_POS) == REGULATED_GROUP) THEN
            PS_ROLLOVER = PREFERRED_STOCK_ADDENDUM(CLASS_POS)
            LTD_ROLLOVER = LONG_TERM_DEBT_ADDENDUM(CLASS_POS)
            SBU_COMMON_STOCK_BOUGHT = 0.
            ACQ_PREFERRED_STOCK_RETIREMENTS = PS_ROLLOVER +
     +  ACQ_PREFERRED_STOCK_RETIREMENTS
            ACQ_LONG_TERM_DEBT_RETIREMENTS = LTD_ROLLOVER +
     +   ACQ_LONG_TERM_DEBT_RETIREMENTS
            IF(MONTHLY_MIDAS_ACTIVE) THEN
               CALL MONTHLY_PS_FIRST_HALF(YR,CLASS,
     +          PS_ROLLOVER * WEIGHTED_CLASS_PS_COST(CLASS_POS),
     +                                              PS_ROLLOVER)
               CALL MONTHLY_LTD_FIRST_HALF(YR,CLASS,
     +        LTD_ROLLOVER * WEIGHTED_CLASS_LTD_COST(CLASS_POS),
     +                                             LTD_ROLLOVER)
            ENDIF
         ELSE
            PS_ROLLOVER = 0.
            LTD_ROLLOVER = 0.
         ENDIF
         IF(CLASS_TYPE(CLASS_POS) == SBU
     +            .or. CLASS_TYPE(CLASS_POS) == SUBSIDIARY) THEN
            PS_ADDEM_DIVIDEND = PREFERRED_STOCK_ADDENDUM(CLASS_POS) *
     +                         WEIGHTED_CLASS_PS_COST(CLASS_POS)
            LTD_ADDEM_INTEREST = LONG_TERM_DEBT_ADDENDUM(CLASS_POS) *
     +                        WEIGHTED_CLASS_LTD_COST(CLASS_POS)
            IF(MONTHLY_MIDAS_ACTIVE) THEN
               CALL MONTHLY_PS_FULL_YEAR_NO_LAG(YR,CLASS,
     +                     PREFERRED_STOCK_ADDENDUM(CLASS_POS),
     +                     WEIGHTED_CLASS_PS_COST(CLASS_POS),0.)
               PSDIV(YR,CLASS_POS) = PSDIV(YR,CLASS_POS)
     +                       + PS_ADDEM_DIVIDEND
               CALL MONTHLY_LTD_FULL_YEAR_NO_LAG(YR,CLASS,
     +                    LONG_TERM_DEBT_ADDENDUM(CLASS_POS),
     +                    WEIGHTED_CLASS_LTD_COST(CLASS_POS),0.)
c              LTDINT(YR,CLASS_POS) = LTDINT(YR,CLASS_POS)
c    +                                + LTD_ADDEM_INTEREST
            ENDIF
         ELSE
            PS_ADDEM_DIVIDEND = 0.
            LTD_ADDEM_INTEREST = 0.
         ENDIF
         PS_ROLLOVER_DIVIVEND = PS_ROLLOVER/2. *
     +                       WEIGHTED_CLASS_PS_COST(CLASS_POS) +
     +                                         PS_ADDEM_DIVIDEND
         LTD_ROLLOVER_INTEREST = LTD_ROLLOVER/2. *
     +                      WEIGHTED_CLASS_LTD_COST(CLASS_POS) +
     +                                        LTD_ADDEM_INTEREST

C ADDED 7/2/98
         IF(ACCURAL_ACCOUNTING_ACTIVE) THEN
             ! !INTEREST_ON_EXISTING_LTD,
            INTEREST_DIVIDENDS_ACCRUDED = LTDINT(YR,CLASS_POS)
     +                            + LTD_ADDEM_INTEREST
     + !CASH INTEREST PAYMENTS
     +                            - acq_LTD_INTEREST_CASH_PAYMENTS
     + ! DEBT_FILE_PREFERRED_DIVIDENDS,
     +                            + PSDIV(YR,CLASS_POS)
     + ! PS DIVIDEND PAYMENTS
     +                            - acq_PS_DIVIDEND_CASH_PAYMENTS
         ELSE
            INTEREST_DIVIDENDS_ACCRUDED = 0.
            !INTEREST_ON_EXISTING_LTD,
            acq_LTD_INTEREST_CASH_PAYMENTS = LTDINT(YR,CLASS_POS)
            ! DEBT_FILE_PREFERRED_DIVIDENDS,
            acq_PS_DIVIDEND_CASH_PAYMENTS = PSDIV(YR,CLASS_POS)
         ENDIF
         acq_LTD_INTEREST_CASH_PAYMENTS = acq_LTD_INTEREST_CASH_PAYMENTS
     +                        + LTD_ROLLOVER_INTEREST
         acq_PS_DIVIDEND_CASH_PAYMENTS = acq_PS_DIVIDEND_CASH_PAYMENTS
     +                       + PS_ROLLOVER_DIVIVEND

            LTD_PS_RETIREMENTS = ACQ_LONG_TERM_DEBT_RETIREMENTS
     +                   + ACQ_PREFERRED_STOCK_RETIREMENTS

            ACQ_TOTAL_INCOME_TAXES = 0.
            ns_class_assets_results_2%ATL_INCOME_TAXES = 0.
            ITC_USED = 0.
            LOCAL_TAX_RATE = 0.      ! NEED TO ADD TO PARM FILE
            ADJ_2_LOCAL_TAXES = 0.   ! NEED TO ADD TO PARM FILE

            BTL_INCOME_TAXES = 0.
            ns_class_master%COMMON_DIVIDENDS = 0.
            ENVIRONMENTAL_TAX = 0.
            ns_class_master%COMMON_STOCK_ISSUED = 0.
            ns_class_master%COMMON_STOCK_BOUGHT = 
     + DEBT_COMMON_STOCK_BUYBACK
            DEF_TAXES_FROM_NOLS_AMT_CREDITS = 0.
         ITER = 1
         acq_CASH_2_LT_INVESTMENTS = 
     + ns_class_parameters%CHANGE_IN_LONG_TERM_INVESTMENTS
         ENVIRONMENTAL_TAX = 0.
         MIN_ITER = 8
         MIN_ITER = 15
         IF(INDEX('Rr',OPERATING_METHOD) /= 0) MIN_ITER = 15
         IF(PARENT_CLASS) THEN

C ADDING CREDITS AT PARENT LEVEL

            CALL RETURN_CONSOLD_TAX_INFORMATION(ASSET_YR,
     +                               CONSOLID_DEFERRED_TAXES_DR)
            CONSOLD_AVAIL_FED_TAX_CREDIT = CONSOLD_AVAIL_FED_TAX_CREDIT
     +                             + acq_FED_TAX_CREDIT_PASSED_UP
          CONSOLID_FED_SEC_29_TAX_CREDITS = acq_SEC_29_CREDITS_PASSED_UP
     +                         + CONSOLID_FED_SEC_29_TAX_CREDITS
            CONSOLID_FED_SEC_42_TAX_CREDITS =
     +                         CONSOLID_FED_SEC_42_TAX_CREDITS +
     +                                  acq_SEC_42_CREDITS_PASSED_UP
            CALL RETURN_TAX_ADJUSTMENTS_ELIM(ASSET_YR,
     +                               ELIMINAITON_CLASS_ID_NUM,
     +                               CONSOLIDATED_FED_TAX_ADJ,
     +                               CONSOLIDATED_STATE_TAX_ADJ)
            CALL RETURN_MONTHLY_ACTUAL_TAXES(YR,INT2(-1),
     +                         ACTUAL_CON_STATE_INCOME_TAX,
     +                         USE_ACTUAL_CON_STATE_TAXES,
     +                         ACTUAL_CON_FEDERAL_INCOME_TAX,
     +                         USE_ACTUAL_CON_FEDERAL_TAXES,
     +                         ACTUAL_CON_DEFERRED_TAXES_DR,
     +                         USE_ACTUAL_CON_DEFERRED_TAX_DR,
     +                         ACTUAL_CON_DEFERRED_TAXES_CR,
     +                         USE_ACTUAL_CON_DEFERRED_TAX_CR)
         ELSE
            CONSOLIDATED_FED_TAX_ADJ = 0.
            CONSOLIDATED_STATE_TAX_ADJ = 0.
            CONSOLID_DEFERRED_TAXES_DR = 0.
         ENDIF
         IF(globecom_YEAR <= LAST_AVAILABLE_MONTHLY_YEAR+1 .AND.
     +                                MONTHLY_MIDAS_ACTIVE) THEN
            CALL GET_INTRS_TAXES_PAYABLE_YEAR_1(CLASS_POS,
     +                              STD_INTEREST_OWED,
     +                              REVENUE_TAXES_OWED,
     +                              PROPERTY_TAXES_OWED,
     +                              STATE_INCOME_TAXES_OWED,
     +                              FEDERAL_INCOME_TAXES_OWED,
     +                              STATE_TAX_ON_CAPITAL_OWED,
     +                              FEDERAL_TAX_ON_CAPITAL_OWED,
     +                              OTHER_TAXES_OWED)
         ELSE
            REVENUE_TAXES_OWED = 0.
            PROPERTY_TAXES_OWED = 0.
            STATE_INCOME_TAXES_OWED = 0.
            FEDERAL_INCOME_TAXES_OWED = 0.
            STATE_TAX_ON_CAPITAL_OWED = 0.
            FEDERAL_TAX_ON_CAPITAL_OWED = 0.
            OTHER_TAXES_OWED = 0.
         ENDIF

C SET CATWABA FOR DISPLAY PURPOSES 4/15/97

        ACQ_CATAWBA_TOTAL_CAP_PAYMENTS = ACQ_CATAWBA_CAPACITY_PAYMENTS -
     +                            ACQ_CATAWBA_LEVEL_CAP_PAYMENTS
         acq_CATAWBA_INC_STATEMENT_EXPENSES = CATAWBA_EXPENSES +
     +                            ACQ_CATAWBA_TOTAL_CAP_PAYMENTS
C ADDING NOLS AND AMT CREDITS TO BALANCE SHEET 4/14/98
         DEF_TAXES_FROM_NOLS_AMT_CREDITS = 0.
         acq_AMT_CREDITS_CREATED = 0.
         NEW_FINANCING_ACCRUALS = 0.
         COMMON_STOCK_DIV_ACCRUALS = 0.
         INVESTMENT_INCOME = 0.
         IF(MONTHLY_MIDAS_ACTIVE .OR. VERSION_6_OR_GREATER) THEN
            CUSTOMER_DEPOSITS = CUSTOMER_DEPOSITS
     + + ns_class_parameters%ADDENDUM_TO_CUSTOMER_DEPOSITS
            CUSTOMER_DEPOSITS_BAL(2,CLASS_POS) =
     +                        CUSTOMER_DEPOSITS_BAL(1,CLASS_POS)
     +                        + CUSTOMER_DEPOSITS
            CALL CALCULATE_RATE_BASE(YR)
            IF(OPERATING_METHOD /= 'E' .AND. OPERATING_METHOD /= 'C')
     +      ns_class_master%GOPINC = 
     + RETURN_MEASURE * ACQ_ASSET_CLASS_RATE_BASE
         ENDIF
         INTEREST_ON_STD = 0.
         CALCULATED_2_ACTUAL_STATE_ADJ = 0.
         CALCULATED_2_ACTUAL_FED_ADJ = 0.
C        STD_INTEREST_OWED = 0.
         TAXES_ACCRUAL_ADJ = 0.
         acq_STATE_NOL_GENERATED = 0.
         acq_STATE_NOLS_USED = 0.
         acq_FEDERAL_NOL_GENERATED = 0.
         acq_FEDERAL_NOLS_USED = 0.
         ACQ_EARNINGS_PER_SHARE = 0.
         IF(USE_ACTUAL_DEFERRED_TAXES_DR) THEN
            DEFERRED_TAXES_DR = ACTUAL_DEFERRED_TAXES_DR
         ELSE
            DEFERRED_TAXES_DR = DEFERRED_TAXES_DR_TAX_FILE
         ENDIF
         IF(USE_ACTUAL_BTL_DEF_TAXES_DR) THEN
            BTL_DEFERRED_TAXES_DR = ACTUAL_BTL_DEF_TAXES_DR
         ENDIF
         TOTAL_DEFERRED_TAXES_DR = DEFERRED_TAXES_DR
     +                     + BTL_DEFERRED_TAXES_DR

C SET UP ASSETS AND LIABS NEC

         LINEC(2,CLASS_POS) = ns_class_parameters%OPREV_IN_LIBS_NEC *
     +                         OPERATING_REVENUES(1,CLASS_POS)
     +                + ns_class_parameters%NPV_IN_LIBS_NEC *
     +                          NET_UTILITY_PLANT(2,CLASS_POS)
     + + ns_class_parameters%ADDENUM_2_LIBS_NEC
         ASSETS_NEC = ns_class_parameters%OPREV_IN_ASSETS_NEC *
     + OPERATING_REVENUES(1,CLASS_POS)
     +  + ns_class_parameters%NPV_IN_ASSETS_NEC *
     +  NET_UTILITY_PLANT(2,CLASS_POS)
     + + ns_class_parameters%ADDENUM_2_ASSETS_NEC
         WCCUM(2,CLASS_POS) = ASSETS_NEC - LINEC(2,CLASS_POS)
         ACQ_CHANGE_IN_WORKING_CAPITIAL = WCCUM(2,CLASS_POS) -
     +  WCCUM(1,CLASS_POS)

C FASB 87 ACCOUNTING FOR IPL

         CALL MONTHLY_FASB87_CALCULATIONS(CLASS,YR,
     +  OTHER_COMPREHENSIVE_INCOME_BALANCE(CLASS_POS),  ! 730
     +            FASB_87_INTANGIBLE_ASSETS(CLASS_POS),
     +            PENSION_LIABILITY(2,CLASS_POS),
     +            FASB_87_DEFERRED_TAX_ADJ_DR,
     +            NORMALIZATION_TAX_RATE)
         ADJ_DEFERRED_TAX_DR_BALANCE = ADJ_DEFERRED_TAX_DR_BALANCE
     +                         + FASB_87_DEFERRED_TAX_ADJ_DR
         OTHER_COMPREHENSIVE_INCOME_BALANCE(CLASS_POS) =
     +             OTHER_COMPREHENSIVE_INCOME_BALANCE(CLASS_POS)
     +             + OCI_RETIREMENT_MEDICAL_FUND_RETURN

C TEMP SETTING OF THE CAP STRUCTURE

         MTG_DEBT_RETIREMENTS = 0.
         acq_OTHER_TAXES = 0.
         CUSTOMER_DEPOSIT_INTEREST_ON = 0.
         MODEL_ISSUED_SHARES = 0.
         RETAINED_EARNINGS = 0.
         NET_INCOME = 0.
         ST_INVESTMENT_EARNINGS = 0.
         LT_INVESTMENTS_EARNINGS = 0.
         DIVIDEND_PAYOUT_RATIO = DIVIDEND_PAYMENT_METHOD == DPR .OR.
     +                  DIVIDEND_PAYMENT_METHOD == DPR_CASH .OR.
     +                  DIVIDEND_PAYMENT_METHOD == CASH

         REGULATED_CAPATIAL_STRUCTURE =
     +                  CLASS_TYPE(CLASS_POS) == REGULATED_GROUP
         acq_GRE_LEASE_PAYMENTS_IN_TIER = 
     + ns_class_parameters%LEASE_PAYMENTS_IN_TIER

         DOWHILE (ITER <= MAX_ITER+1 .AND.
     +                  (.NOT. CONVERGED .OR. ITER <= MIN_ITER))


C REVENUES

            acq_CASH_2_LT_INVESTMENTS = MAX(acq_CASH_2_LT_INVESTMENTS,
     + ns_class_parameters%CHANGE_IN_LONG_TERM_INVESTMENTS)
            CALL SUM_CASH_EXPENSES(acq_TOTAL_CASH_EXPENSES)
            TOTAL_EXPENSES_B4_TAXES = acq_TOTAL_CASH_EXPENSES
     +                        + TOTAL_NON_CASH_EXPENSES
            IF(INDEX('EC',OPERATING_METHOD) /= 0) THEN
            call write_trace_real(file_trace_aca, "1. OR", 
     +           OPERATING_REVENUES(2, CLASS_POS))
               CALL CALCULATE_TOTAL_REVENUES(ACQ_OPERATING_REVENUE_TAX,
     +                          OPERATING_REVENUES(2,CLASS_POS),
     +                          acq_LTD_PS_DEFERRED_TAX_CR,
     +                          acq_NF_DEFERRED_TAXES_CR,
     +                          OPERATING_METHOD)
            call write_trace_real(file_trace_aca, "2. OR", 
     +           OPERATING_REVENUES(2, CLASS_POS))
              IF(IMPA() .AND. OPERATING_METHOD == 'C') THEN
                 OPERATING_REVENUES(2,CLASS_POS) =
     +                           OPERATING_REVENUES(2,CLASS_POS)
     +                           - BOOK_DEPRECIATION
     +                           - INTEREST_AMORTIZATION  ! 384
     +                          + ACQ_LONG_TERM_DEBT_RETIREMENTS
            call write_trace_real(file_trace_aca, "3. OR", 
     +           OPERATING_REVENUES(2, CLASS_POS))
               ENDIF
               acq_TOTAL_BASE_RATES_REVENUES =
     +       OPERATING_REVENUES(2,CLASS_POS) - acq_NON_BASE_REVENUES
            ELSE
               OPERATING_REVENUES(2,CLASS_POS) =
     +             acq_TOTAL_BASE_RATES_REVENUES + acq_NON_BASE_REVENUES
        call write_trace_real(file_trace_aca, "TOTAL_BASE_RT_REV", 
     + acq_TOTAL_BASE_RATES_REVENUES)
        call write_trace_real(file_trace_aca, "NON_BR", 
     + acq_NON_BASE_REVENUES)
     
            call write_trace_real(file_trace_aca, "4. OR", 
     +           OPERATING_REVENUES(2, CLASS_POS))
            ENDIF

C SBU CUSTOMER DESPOSITS MUST SUM TO THE PARENT OR SUB-PARENT

            IF(.NOT. MONTHLY_MIDAS_ACTIVE .AND.
     +                          .NOT. VERSION_6_OR_GREATER) THEN
               CUSTOMER_DEPOSITS_BAL(2,CLASS_POS) =
     +                acq_TOTAL_BASE_RATES_REVENUES *
     + ns_class_parameters%CUSTOMER_DEPOSITS_PERCENT_REVS/100. +
     + ns_class_parameters%ADDENDUM_TO_CUSTOMER_DEPOSITS
               CUSTOMER_DEPOSITS_BAL(2,CLASS_POS) =
     +                        CUSTOMER_DEPOSITS_BAL(1,CLASS_POS)
     + + ns_class_parameters%ADDENDUM_TO_CUSTOMER_DEPOSITS
               IF(PARENT_CLASS .OR. SUBSIDIARY_CLASS) THEN
              CUSTOMER_DEPOSITS_BAL(2,CLASS_POS) = acq_SBU_VARIABLES(85)
     +                      + CUSTOMER_DEPOSITS_BAL(2,CLASS_POS)
               ENDIF
            CUSTOMER_DEPOSITS = CUSTOMER_DEPOSITS_BAL(2,CLASS_POS) -
     +                        CUSTOMER_DEPOSITS_BAL(1,CLASS_POS)
               CALL CALCULATE_RATE_BASE(YR)
               IF(OPERATING_METHOD /= 'E' .AND. OPERATING_METHOD /= 'C')
     +      ns_class_master%GOPINC = RETURN_MEASURE 
     + * ACQ_ASSET_CLASS_RATE_BASE
            ENDIF

            IF(globecom_YEAR <= LAST_AVAILABLE_MONTHLY_YEAR .AND.
     +                                MONTHLY_MIDAS_ACTIVE) THEN


            ELSE
               CUSTOMER_DEPOSIT_INTEREST_ON =
     +               (CUST_DEPOSITS_FIRST_HALF_RATE *
     +                        CUSTOMER_DEPOSITS_BAL(1,CLASS_POS)
     +               + CUST_DEPOSITS_SECOND_HALF_RATE *
     +                       (CUSTOMER_DEPOSITS_BAL(1,CLASS_POS)
     +                        + CUSTOMER_DEPOSITS))/2.
               CUSTOMER_DEPOSITS_INTR_PAYABLE = 0.

C OTHER TAXES

       acq_OTHER_TAXES = 
     + ns_class_parameters%CLASS_OTHER_TAXES_RATE/100. *
     +   (OPERATING_REVENUES(2,CLASS_POS)
     +    - EXCLUDED_OTHER_TAXES_REV(CLASS_LEVEL))
     + + ns_class_parameters%OTHER_TAXES_PERCENT_OF_EXPENSES/100. *
     +   (CLASS_NON_VARIABLE_EXPENSE
     +    - EXCLUDED_OTHER_TAXES_EXP(CLASS_LEVEL))
     + + ns_class_parameters%CLASS_ADDENDUM_2_OTHER_TAXES
     + + EXCLUDED_OTHER_TAXES(CLASS_LEVEL)
            ENDIF

C BEGINNING FINANCING LOOP

            ITC_USED = acq_FED_TAX_CREDIT_PASSED_UP
            ITC_AMORTIZATION = (DEF_ITC_BALANCE(1,CLASS_POS)
     +                  + ITC_USED
     +                  - acq_PRIOR_CAUSE_OF_ITC_AMORT) *
     + ns_class_parameters%ITC_AMORTIZATION_RATE
     +                 + ns_class_parameters%ADDENDUM_TO_ITC_AMORTIZATED
            IF(.NOT. IOU_UTILITY) THEN
               FUNDS = CASH_4_INVESTMENTS - acq_CLASS_LEASED_NFCE -
     +         ns_class_parameters%CAPITIALIZED_LEASE_ADDITIONS +
     +         ACQ_CHANGE_IN_WORKING_CAPITIAL +
     +         ACQ_LONG_TERM_DEBT_RETIREMENTS
     +         + MTG_DEBT_RETIREMENTS
     +         + AFUDC
     +         + Mark_to_Market
     +         + FE_NonCashEarningsNonCorp
     +         + ns_class_parameters%DEFERRED_REVENUES -
     +         ABANDS(1,CLASS_POS) - TOTAL_NON_CASH_EXPENSES -
     +         BTL_NUC_FUEL_DECOM_LIABILITY +
     + ns_class_parameters%SUBSIDIARY_INCOME - NET_OF_TAX_EXEXP -
     +         FA_WO_ADJUSTMENT_2_CUM_AFEXP -
     +         LIQUID_INVESTMENTS(1,CLASS_POS) +
     +         ns_class_parameters%MIN_ST_INVESTMENTS +
     +         ns_class_parameters%NUCL_DECOM_FUND +
     + ns_class_parameters%DEFERRED_EXPENSE_CASH - 
     + CUSTOMER_DEPOSITS -
     +         ns_class_parameters%CASH_FROM_SALE_OF_ASSETS +
     +         acq_CATAWBA_OTHER_NET_REVENUES +
     +         acq_CASH_2_LT_INVESTMENTS

     +        - INTEREST_AMORTIZATION
     +         - acq_PS_PREM_ISSUE_EXP_AMORT
     +         + acq_NON_CASH_ATL_REVENUES -
     +         acq_BTL_AMORTIZATION_IN_EXPENSES
     +         + DEBT_FILE_ISSUE_EXPENSE
     +         - INTEREST_DIVIDENDS_ACCRUDED
     +         - NEW_FINANCING_ACCRUALS
     +         - COMMON_STOCK_DIV_ACCRUALS
     +         - acq_CASH_TIMING_ADJUSTMENTS
     +         - TAXES_ACCRUAL_ADJ
     +         + INVESTMENTS_MADE - INVESTMENTS_SOLD
     +         + acq_CASH_CHANGE_IN_NOTES_PAY_REC
     +         + acq_CASH_ADDS_2_INVENTORIES
     +         + acq_VACATION_PAY_CASH
     +         + acq_PENSION_EXPENSE_CASH
     +         + acq_STORM_EXPENSE_CASH
     +         + acq_LEASE_PRINCIPAL_PAYMENTS
     +         + acq_ExecBenefitsCash
     +         + acq_IncentiveCompensationCash
            ELSE
               IF(CLASS_TYPE(CLASS_POS) == SBU) THEN
                  FUNDS = CASH_4_INVESTMENTS - acq_CLASS_LEASED_NFCE -
     +    ns_class_parameters%CAPITIALIZED_LEASE_ADDITIONS +
     +    ACQ_CHANGE_IN_WORKING_CAPITIAL +
     +    SBU_COMMON_STOCK_BOUGHT +
     +    ACQ_PREFERRED_STOCK_RETIREMENTS +
     +    ACQ_LONG_TERM_DEBT_RETIREMENTS
     +    + MTG_DEBT_RETIREMENTS
     +    + AFUDC
     +    + Mark_to_Market
     +    + FE_NonCashEarningsNonCorp
     +    + ns_class_parameters%DEFERRED_REVENUES + ITC_AMORTIZATION -
     +    ABANDS(1,CLASS_POS) - TOTAL_NON_CASH_EXPENSES -
     +    BTL_NUC_FUEL_DECOM_LIABILITY -
     +   (ITC_USED+acq_TOTAL_DEF_TAXES_CR
     +       + TOTAL_DEFERRED_TAXES_DR)
     +    +ns_class_parameters%SUBSIDIARY_INCOME -
     +    NET_OF_TAX_EXEXP -
     +    FA_WO_ADJUSTMENT_2_CUM_AFEXP -
     +    LIQUID_INVESTMENTS(1,CLASS_POS) +
     +    ns_class_parameters%MIN_ST_INVESTMENTS +
     +    ns_class_parameters%NUCL_DECOM_FUND +
     +    ns_class_parameters%DEFERRED_EXPENSE_CASH - 
     + CUSTOMER_DEPOSITS -
     +         ns_class_parameters%CASH_FROM_SALE_OF_ASSETS +
     +         acq_CATAWBA_OTHER_NET_REVENUES +
     +         acq_CASH_2_LT_INVESTMENTS
c    +                 - BTL_AMORTIZATION
     +        - INTEREST_AMORTIZATION
     +         - acq_PS_PREM_ISSUE_EXP_AMORT
     +         + acq_NON_CASH_ATL_REVENUES -
     +         acq_BTL_AMORTIZATION_IN_EXPENSES
     +         + DEBT_FILE_ISSUE_EXPENSE
     +         - INTEREST_DIVIDENDS_ACCRUDED
     +         - NEW_FINANCING_ACCRUALS
     +         - COMMON_STOCK_DIV_ACCRUALS
     +         - acq_CASH_TIMING_ADJUSTMENTS
     +         - TAXES_ACCRUAL_ADJ
     +         + INVESTMENTS_MADE - INVESTMENTS_SOLD
     +         + acq_CASH_CHANGE_IN_NOTES_PAY_REC
     +         + acq_CASH_ADDS_2_INVENTORIES
     +         + acq_VACATION_PAY_CASH
     +         + acq_PENSION_EXPENSE_CASH
     +         + acq_STORM_EXPENSE_CASH
     +         + acq_LEASE_PRINCIPAL_PAYMENTS
     +         + acq_ExecBenefitsCash
     +         + acq_IncentiveCompensationCash

               ELSEIF(CLASS_TYPE(CLASS_POS) == REGULATED_GROUP) THEN
              FUNDS = CASH_4_INVESTMENTS - acq_CLASS_LEASED_NFCE -
     +     ns_class_parameters%CAPITIALIZED_LEASE_ADDITIONS +
     +     ACQ_CHANGE_IN_WORKING_CAPITIAL
     +     + AFUDC
     +     + Mark_to_Market
     +     + FE_NonCashEarningsNonCorp
     +     + ns_class_parameters%DEFERRED_REVENUES + ITC_AMORTIZATION -
     +     ABANDS(1,CLASS_POS) - TOTAL_NON_CASH_EXPENSES -
     +     BTL_NUC_FUEL_DECOM_LIABILITY -
     +    (ITC_USED+acq_TOTAL_DEF_TAXES_CR
     +         + TOTAL_DEFERRED_TAXES_DR)
     +     - NET_OF_TAX_EXEXP
     +     - FA_WO_ADJUSTMENT_2_CUM_AFEXP
     +     + ns_class_parameters%NUCL_DECOM_FUND
     +     + ns_class_parameters%DEFERRED_EXPENSE_CASH
     +     + RATE_BASE_CASH_ADJ
     +     - CUSTOMER_DEPOSITS
     +     - ns_class_parameters%CASH_FROM_SALE_OF_ASSETS
     +     + acq_CATAWBA_OTHER_NET_REVENUES
     +     + acq_CASH_2_LT_INVESTMENTS
     +     - INTEREST_AMORTIZATION
     +     - acq_PS_PREM_ISSUE_EXP_AMORT
     +     + acq_NON_CASH_ATL_REVENUES
     +     - acq_BTL_AMORTIZATION_IN_EXPENSES
     +     + DEBT_FILE_ISSUE_EXPENSE
     +     - INTEREST_DIVIDENDS_ACCRUDED
     +     - NEW_FINANCING_ACCRUALS
     +     - COMMON_STOCK_DIV_ACCRUALS
     +     - acq_CASH_TIMING_ADJUSTMENTS
     +     - TAXES_ACCRUAL_ADJ
     +     + INVESTMENTS_MADE - INVESTMENTS_SOLD
     +     + acq_CASH_CHANGE_IN_NOTES_PAY_REC
     +     + acq_CASH_ADDS_2_INVENTORIES
     +     + acq_VACATION_PAY_CASH
     +     + acq_PENSION_EXPENSE_CASH
     +     + acq_STORM_EXPENSE_CASH
     +     + acq_LEASE_PRINCIPAL_PAYMENTS
     +     + acq_ExecBenefitsCash
     +     + acq_IncentiveCompensationCash
           ELSE
              FUNDS = CASH_4_INVESTMENTS - acq_CLASS_LEASED_NFCE -
     +     ns_class_parameters%CAPITIALIZED_LEASE_ADDITIONS +
     +     ACQ_CHANGE_IN_WORKING_CAPITIAL +
     +     ACQ_PREFERRED_STOCK_RETIREMENTS +
     +     ACQ_LONG_TERM_DEBT_RETIREMENTS
     +     + MTG_DEBT_RETIREMENTS
     +     + AFUDC
     +     + Mark_to_Market
     +     + FE_NonCashEarningsNonCorp
     +     + ns_class_parameters%DEFERRED_REVENUES + ITC_AMORTIZATION -
     +     ABANDS(1,CLASS_POS) - TOTAL_NON_CASH_EXPENSES -
     +     BTL_NUC_FUEL_DECOM_LIABILITY -
     +    (ITC_USED+acq_TOTAL_DEF_TAXES_CR
     +                  + TOTAL_DEFERRED_TAXES_DR)
     +     +ns_class_parameters%SUBSIDIARY_INCOME -
     +     NET_OF_TAX_EXEXP -
     +     FA_WO_ADJUSTMENT_2_CUM_AFEXP -
     +     LIQUID_INVESTMENTS(1,CLASS_POS) +
     +     ns_class_parameters%MIN_ST_INVESTMENTS +
     +     ns_class_parameters%NUCL_DECOM_FUND +
     +     ns_class_parameters%DEFERRED_EXPENSE_CASH - 
     + CUSTOMER_DEPOSITS -
     +         ns_class_parameters%CASH_FROM_SALE_OF_ASSETS +
     +         acq_CATAWBA_OTHER_NET_REVENUES +
     +         acq_CASH_2_LT_INVESTMENTS
     +         - INTEREST_AMORTIZATION
     +         - acq_PS_PREM_ISSUE_EXP_AMORT
     +         + acq_NON_CASH_ATL_REVENUES
     +         - acq_BTL_AMORTIZATION_IN_EXPENSES
     +         + DEBT_FILE_ISSUE_EXPENSE
     +         - INTEREST_DIVIDENDS_ACCRUDED
     +         - NEW_FINANCING_ACCRUALS
     +         - COMMON_STOCK_DIV_ACCRUALS
     +         - acq_CASH_TIMING_ADJUSTMENTS
     +         - TAXES_ACCRUAL_ADJ
     +         + INVESTMENTS_MADE - INVESTMENTS_SOLD
     +         + acq_CASH_CHANGE_IN_NOTES_PAY_REC
     +         + acq_CASH_ADDS_2_INVENTORIES
     +         + acq_VACATION_PAY_CASH
     +         + acq_PENSION_EXPENSE_CASH
     +         + acq_STORM_EXPENSE_CASH
     +         + acq_LEASE_PRINCIPAL_PAYMENTS
     +         + acq_ExecBenefitsCash
     +         + acq_IncentiveCompensationCash
               ENDIF
            ENDIF
            IF(IMPA()) THEN
               IF(OPERATING_METHOD == 'C') FUNDS = FUNDS
     +                         + BOOK_DEPRECIATION         ! Dep
     +                    + INTEREST_AMORTIZATION     !LTD Amort
     +                         - ACQ_LONG_TERM_DEBT_RETIREMENTS
            ENDIF
            FUNDS = FUNDS
     +      + acq_FASB143_ARO_CASH_PAYMENTS
     +      + acq_FASB143_ARO_TRUST_CASH_PAYMENTS
     +      + CASH_TO_POST_RETIRE_MEDICAL_BAL
     +      + CASH_TO_ACCRD_MBR_REVENUES_BAL
     +      - CASH_TO_CASH        ! 6/28/04
            IF(SALT_RIVER_PROJECT())  ! PLACE HOLDER FOR A NEW SWITCH
     +                   FUNDS = FUNDS + LT_INVESTMENTS_EARNINGS
            IF(SALT_RIVER_PROJECT()) THEN
       CLASS_REVENUE_TAX_REVENUES = acq_TOTAL_BASE_RATES_REVENUES
     +                 + ACQ_ADJUSTMENT_CLAUSE_REVENUES
     +                 + ns_class_parameters%DEFERRED_REVENUES
     +                 - EXCLUDED_REVENUE_TAX_BASIS(CLASS_LEVEL)

            ELSEIF(REVENUE_TAX_BASIS() == 'A') THEN
       CLASS_REVENUE_TAX_REVENUES = acq_TOTAL_BASE_RATES_REVENUES
     +               + ACQ_ADJUSTMENT_CLAUSE_REVENUES
     +               + acq_CLASS_GAS_ADJ_CLAUSE_REVENUE
     +               - EXCLUDED_REVENUE_TAX_BASIS_A(CLASS_LEVEL)
            ELSEIF(REVENUE_TAX_BASIS() == 'B') THEN
       CLASS_REVENUE_TAX_REVENUES = acq_TOTAL_BASE_RATES_REVENUES
     +               - EXCLUDED_REVENUE_TAX_BASIS_B(CLASS_LEVEL)
            ELSE
               CLASS_REVENUE_TAX_REVENUES =
     +                 OPERATING_REVENUES(2,CLASS_POS)
     +                 - EXCLUDED_REVENUE_TAX_BASIS(CLASS_LEVEL)
            ENDIF
            IF(PARENT_CLASS) THEN
               CASH_TAXES_RECEIVABLE_FROM_SUBS =
     +       acq_SUBSIDARY_VARIABLES(26)          ! ATL FEDERAL TAXES
     +    + acq_SUBSIDARY_VARIABLES(24)        ! ATL STATE TAXES
     +   + acq_SUBSIDARY_VARIABLES(36)        ! BTL INCOME TAXES
     +                         - SUB_FED_TAX_PAYMENTS_2_PARENT
     +                         - SUB_STATE_TAX_PAYMENTS_2_PARENT
               CONSOLIDATED_TAX_ADJUSTMENT = FEDERAL_TAXES
     +  + SUB_FED_TAX_PAYMENTS_2_PARENT ! THIS IS CASH NON BOOK
     +                              - CONSOLIDATED_FEDERAL_TAXES

               acq_FUNDS_CONSOLIDATING_ADJUSTMENT = PARENT_TAXES_PAID
     +                         + SUB_FED_TAX_PAYMENTS_2_PARENT
     +                         - CONSOLIDATED_INCOME_TAXES_PAID
               CONSOLIDATED_TAX_LIB_ADJUSTMENT = FEDERAL_TAXES
     + + acq_SUBSIDARY_VARIABLES(26)   ! SUB ATL FED TAXES
     +  + acq_SUBSIDARY_VARIABLES(302)  ! SUB BTL FED TAXES
     +  - CONSOLIDATED_FEDERAL_TAXES

               FUNDS = FUNDS - acq_FUNDS_CONSOLIDATING_ADJUSTMENT

            ENDIF

            IF(UTILITY_TYPE() == 'T') THEN
               LAST_REVENUE_TAX_BASIS = CLASS_REVENUE_TAX_REVENUES
               CLASS_REVENUE_TAX_REVENUES =
     +             OPERATING_REVENUE_TAX_LAGGED_BASIS(CLASS_POS)
            ENDIF
            IF(globecom_YEAR > LAST_AVAILABLE_MONTHLY_YEAR .OR.
     +                          .NOT. MONTHLY_MIDAS_ACTIVE) THEN
               ACQ_OPERATING_REVENUE_TAX = 
     + ns_class_parameters%OPREV_TAX_RATE *
     +                       CLASS_REVENUE_TAX_REVENUES
     + + ns_class_parameters%ADJUSTMENT_2_OP_REV_TAX
     +                       + EXCLUDED_REVENUE_TAX(CLASS_LEVEL)
            ENDIF
            CAPITAL_WITH_STD = COMMON_EQUITY(2,CLASS_POS)
     +                 + PREFERRED_STOCK(2,CLASS_POS)
     +                 + LONG_TERM_DEBT(2,CLASS_POS)
     +                 + SHORT_TERM_DEBT(2,CLASS_POS)
            IF(ITER > 1) THEN
               CALL SUMMARIZE_4_MONTHLY_NEEDS(CLASS_POS)
               CALL SET_NON_EQUIVALENCED_VARIABLES
            ENDIF
            acq_GRE_DEBT_RETIREMENTS = ACQ_LONG_TERM_DEBT_RETIREMENTS
     +                     + MTG_DEBT_RETIREMENTS
            ns_class_master%DEPAMT = BOOK_DEPRECIATION
     +       + acq_ATL_AMORTIZATION
            acq_OTHER_DD_AMORT =  acq_ATL_AMORTIZATION
     +                - acq_GOODWILL_AMORT
     +                - acq_CLASS_REGULATORY_ASSETS_AMORT
     +                - acq_FASB_109_AMORT
     +                - acq_FASB_133_AMORT
     +                - acq_FASB143_ARO_INTEREST_ACCREATION
     +                + CIAC_AMORTIZATION
      call write_trace_real(file_trace_aca, "OR(2,CLASS_POS)", 
     + OPERATING_REVENUES(2,CLASS_POS))
      call write_trace_int2(file_trace_aca, "CLASS_POS", CLASS_POS)
     
      call write_trace_real(file_trace_aca, 
     + "COMMON_EQUITY(1, class_pos)", COMMON_EQUITY(1, CLASS_POS))
            CALL INCOME_CONVERGENCE(ITER,INCOME_CONVERGED,
     +                 OPERATING_METHOD,
     +                 AFUDC_RETURN_POLICY,
     +                 COVERAGE_RATIO,FUNDS_BALANCE,
     +                 COMMON_EQUITY(1,CLASS_POS),
     +                 CAPITAL_WITH_STD,
     +                 OPERATING_REVENUES(2,CLASS_POS),
     +                 INTEREST_ON_SHORT_TERM_DEBT(2,CLASS_POS),
     +                 ACQ_OPERATING_REVENUE_TAX,
     +                 acq_BTL_AMORTIZATION_IN_EXPENSES,
     +                 acq_OTHER_TAXES,
     +                 DEF_TAXES_FROM_NOLS_AMT_CREDITS,
     +                 ACQ_INTEREST_ON_LONG_TERM_DEBT,
     +                 acq_LTD_PS_DEFERRED_TAX_CR,
     +                 acq_NF_DEFERRED_TAXES_CR,
     +                 acq_LTD_INTEREST_CASH_PAYMENTS,
     +                 ACQ_LONG_TERM_DEBT_RETIREMENTS,
     +                 ACQ_AFUDC_BORROWED,
     +                 MTG_DEBT_RETIREMENTS,
     +                 acq_VARIABLE)
            call write_trace_real(file_trace_aca, "5. OR", 
     +           OPERATING_REVENUES(2, CLASS_POS))
            CONVERGED = TAXES_CONVERGED(ITER) .AND.
     +          DIVIDENDS_CONVERGED(ITER,acq_AVERAGE_SHARES,
     +                            DIVIDEND_PAYMENT_METHOD) .AND.
     +          INCOME_CONVERGED
     
       call write_trace_bool1(file_trace_aca, "TAXES_CONVERGED", 
     + TAXES_CONVERGED(ITER))
       call write_trace_bool1(file_trace_aca, "DIVIDENDS_CONVERGED", 
     + DIVIDENDS_CONVERGED(ITER, acq_AVERAGE_SHARES, 
     + DIVIDEND_PAYMENT_METHOD))
       call write_trace_bool1(file_trace_aca, "CONVERGED", CONVERGED)
       call write_trace_bool1(file_trace_aca, "INCOME_CONVERGED", 
     + INCOME_CONVERGED)
       

       
            IF(.NOT. CONVERGED .OR. ITER <= MIN_ITER) THEN
               QRT_DIVIDEND_ADDENDUM = 0.
               IF(SALT_RIVER_PROJECT()) THEN
       MONTHLY_COMMON_DIVIDENDS(1:) = 
     + ns_class_master%COMMON_DIVIDENDS/12.
      MONTHLY_COMMON_DIVIDENDS(0) = 
     + ns_class_master%COMMON_DIVIDENDS
               ELSE
                  IF(MONTHLY_MIDAS_ACTIVE .OR.
     +                        MONTHLY_COMMON_SHARES_ACTIVE) THEN
                     acq_AVERAGE_SHARES = 0.
                     END_OF_MONTH_SHARES(0) = COMMON_SHARES(1,CLASS_POS)
                     DO MO = 1, 12
                        END_OF_MONTH_SHARES(MO) =
     +                                 END_OF_MONTH_SHARES(MO-1)
     +                                 + NET_MONTHLY_SHARES(MO)
                        IF(MO == 7) END_OF_MONTH_SHARES(MO) =
     + END_OF_MONTH_SHARES(MO)
     + + MODEL_ISSUED_SHARES
     + + ns_class_parameters%ADDENDUM_2_SHARES_ISSUED
                     ENDDO
      acq_AVERAGE_SHARES = SUM(END_OF_MONTH_SHARES(1:))/12.
                  ELSE
                     acq_AVERAGE_SHARES = (COMMON_SHARES(1,CLASS_POS) +
     +                            COMMON_SHARES(2,CLASS_POS))/2.
                  ENDIF
                  IF(DIVIDEND_PAYOUT_RATIO) THEN
                     MONTHLY_COMMON_DIVIDENDS = 0.
                     DO QRT = 1, 4
                        MO = CS_DECLARATION_MONTH(QRT)
                        MONTHLY_COMMON_DIVIDENDS(MO) =
     + ns_class_master%COMMON_DIVIDENDS/4.
     +                              + QRT_DIVIDEND_ADDENDUM(QRT)
                     ENDDO
                  ELSEIF(DIVIDEND_PAYMENT_METHOD == DPS) THEN
                     IF(MONTHLY_MIDAS_ACTIVE .OR.
     +                        MONTHLY_COMMON_SHARES_ACTIVE) THEN
                        ns_class_master%COMMON_DIVIDENDS = 0.
                        MONTHLY_COMMON_DIVIDENDS = 0.
                        DO QRT = 1, 4
                           IF(QRT_DIVIDEND_PER_SHARE(QRT) < 0.)
     +                  QRT_DIVIDEND_PER_SHARE(QRT) =
     + ns_class_parameters%DIVIDEND_PER_SHARE/4.
                           MO = CS_DECLARATION_MONTH(QRT)
                           LEAD_SHARE = MIN(12,MO + SHARE_LEAD)
                           EOQ_SHARES=END_OF_MONTH_SHARES(LEAD_SHARE)
                           MONTHLY_COMMON_DIVIDENDS(MO) =
     +                            EOQ_SHARES
     +                             * QRT_DIVIDEND_PER_SHARE(QRT)
     +                            + QRT_DIVIDEND_ADDENDUM(QRT)
                        ENDDO
                     ELSE
                        DO QRT = 1, 4
                           IF(QRT_DIVIDEND_PER_SHARE(QRT) < 0.)
     +                  QRT_DIVIDEND_PER_SHARE(QRT) =
     + ns_class_parameters%DIVIDEND_PER_SHARE/4.
                           MO = CS_DECLARATION_MONTH(QRT)
                           IF(QRT <= 2) THEN
                              MONTHLY_COMMON_DIVIDENDS(MO) =
     +                          COMMON_SHARES(1,CLASS_POS) *
     +                              QRT_DIVIDEND_PER_SHARE(QRT)
     +                              + QRT_DIVIDEND_ADDENDUM(QRT)
                           ELSE
                              MONTHLY_COMMON_DIVIDENDS(MO) =
     +                          COMMON_SHARES(2,CLASS_POS) *
     +                              QRT_DIVIDEND_PER_SHARE(QRT)
     +                              + QRT_DIVIDEND_ADDENDUM(QRT)
                           ENDIF
                        ENDDO

                     ENDIF
                  ELSE
                     IF(MONTHLY_MIDAS_ACTIVE .OR.
     +                        MONTHLY_COMMON_SHARES_ACTIVE) THEN
       MONTHLY_COMMON_DIVIDENDS(0) = ns_class_master%COMMON_DIVIDENDS
                        EOQ_SHARES = 0
                        DO QRT = 1, 4
                           MO = CS_DECLARATION_MONTH(QRT)
                           LEAD_SHARE = MIN(12,MO + SHARE_LEAD)
                           EOQ_SHARES = EOQ_SHARES
     +                       + END_OF_MONTH_SHARES(LEAD_SHARE)
                        ENDDO
                        IF(EOQ_SHARES /= 0.) THEN
       ns_class_parameters%DIVIDEND_PER_SHARE = 
     + ns_class_master%COMMON_DIVIDENDS/
     +  EOQ_SHARES
                           DO QRT = 1, 4
                              QRT_DIVIDEND_PER_SHARE(QRT) =
     + ns_class_parameters%DIVIDEND_PER_SHARE
                              MO = CS_DECLARATION_MONTH(QRT)
                              LEAD_SHARE = MIN(12,MO + SHARE_LEAD)
                              MONTHLY_COMMON_DIVIDENDS(MO) =
     +                           END_OF_MONTH_SHARES(LEAD_SHARE)
     +                           * QRT_DIVIDEND_PER_SHARE(QRT)
                           ENDDO
                        ELSE
                           QRT_DIVIDEND_PER_SHARE = 0.
                           DO QRT = 1, 4
                              MO = CS_DECLARATION_MONTH(QRT)
                              MONTHLY_COMMON_DIVIDENDS(MO) =
     +                              ns_class_master%COMMON_DIVIDENDS/4.
     +                              + QRT_DIVIDEND_ADDENDUM(QRT)
                           ENDDO
                        ENDIF
                     ENDIF ! MONTHLY ACTIVE OR SHARES ISSUED
                  ENDIF ! DIVIDEND METHOD
               ENDIF ! SRP
               MONTHLY_COMMON_DIVIDENDS(0) =
     +                         SUM(MONTHLY_COMMON_DIVIDENDS(1:))
      ns_class_master%COMMON_DIVIDENDS = MONTHLY_COMMON_DIVIDENDS(0)

               CALL ASSET_FINANCING(ITER,OPERATING_METHOD,
     +                      DIVIDEND_PAYMENT_METHOD,
     +                      EQUITY_DEFINITION,
     +                      FUNDS,
     +                      RETURN_MEASURE,
     +                      PREFERRED_STOCK(1,CLASS_POS) -
     +                          ACQ_PREFERRED_STOCK_RETIREMENTS,
     +                      DEBT_FILE_PREFERRED_DIVIDENDS,
     +                      COMMON_EQUITY(1,CLASS_POS),
     +                      SHORT_TERM_DEBT(1,CLASS_POS),
     +                      TOTAL_CAPITIAL(1,CLASS_POS),
     +                      LIQUID_INVESTMENTS(1,CLASS_POS),
     +                      COMMON_STOCK(1,CLASS_POS),
     +                      PS_ROLLOVER_DIVIVEND,
     +                      CLASS_TYPE(CLASS_POS),
C acq_VARIABLE FOR REGULATED GROUP
     +                      ACQ_ASSET_CLASS_RATE_BASE,
     +                      PREFERRED_STOCK(1,CLASS_POS),
     +                      LONG_TERM_DEBT(1,CLASS_POS),
     +                      ACQ_PREFERRED_STOCK_RETIREMENTS,
     +                      ACQ_LONG_TERM_DEBT_RETIREMENTS,
     +                      acq_PS_PREM_ISSUE_EXP_AMORT,
     +                      COMMON_STOCK_DIV_ACCRUALS)

               IF(CLASS_TYPE(CLASS_POS) == SUBSIDIARY .AND.
     +          ((DIVIDEND_PAYMENT_METHOD == DPS .AND.
     + ns_class_parameters%DIVIDEND_PER_SHARE /= 0.) .OR.
     +           (DIVIDEND_PAYMENT_METHOD == DPR .AND.
     + ns_class_parameters%COMMON_PAYOUT_RATIO /= 0.))) THEN

                  IF(RETAINED_EARNINGS < 0. .AND.
     +        (RETAINED_EARNINGS + REARNC(1,CLASS_POS)
     +         + RETAINED_EARNINGS_ADJ) < 0. .and. .false.) THEN
       ns_class_master%COMMON_STOCK_ISSUED = 
     + ns_class_master%COMMON_STOCK_ISSUED
     + + RETAINED_EARNINGS
     + + REARNC(1,CLASS_POS)
     + + RETAINED_EARNINGS_ADJ
       ns_class_master%COMMON_DIVIDENDS = 
     + ns_class_master%COMMON_DIVIDENDS
     +                        + RETAINED_EARNINGS
     +                        + REARNC(1,CLASS_POS)
     +                        + RETAINED_EARNINGS_ADJ
                     RETAINED_EARNINGS = -(REARNC(1,CLASS_POS)
     +                             + RETAINED_EARNINGS_ADJ)
                  ENDIF
               ENDIF
      IF(
     + (ns_class_parameters%MARKET_2_BOOK > 999. 
     + .OR. ns_class_parameters%MARKET_2_BOOK <= 0.) 
     + .OR. .NOT. PARENT_CLASS
     + ) THEN
                  COMMON_SHARES(2,CLASS_POS)=COMMON_SHARES(1,CLASS_POS)
     +  + ns_class_parameters%ADDENDUM_2_SHARES_ISSUED
     +  + DEBT_COMMON_SHARES_ISSUED
     +  - DEBT_COMMON_SHARES_BUYBACK
                  IF(COMMON_SHARES(2,CLASS_POS) <= 0.0001) THEN
                     BOOK_VALUE_STOCK(2,CLASS_POS) =
     +                                COMMON_EQUITY(2,CLASS_POS)
                  ELSE
                     BOOK_VALUE_STOCK(2,CLASS_POS) =
     +                              COMMON_EQUITY(2,CLASS_POS)/
     +                                COMMON_SHARES(2,CLASS_POS)
                  ENDIF
               ELSE
                  BOOK_VALUE_STOCK(2,CLASS_POS) =
     +                             BOOK_VALUE_STOCK(1,CLASS_POS)
                  DO I = 1, 20
                     PRIVIOUS_BOOK_VALUE = BOOK_VALUE_STOCK(2,CLASS_POS)
                     acq_AVERAGE_STOCK_PRICE =
     + (BOOK_VALUE_STOCK(2,CLASS_POS)*
     + ns_class_parameters%MARKET_2_BOOK +
     +                     STOCK_PRICE_YEAR_END(1,CLASS_POS))/2.
                     IF(ABS(acq_AVERAGE_STOCK_PRICE) > .001) THEN
                        MODEL_ISSUED_SHARES =
     + ((ns_class_master%COMMON_STOCK_ISSUED
     +   - DEBT_COMMON_STOCK_ISSUED)
     +  -(ns_class_master%COMMON_STOCK_BOUGHT
     +         -DEBT_COMMON_STOCK_BUYBACK))/
     +     acq_AVERAGE_STOCK_PRICE
       MODEL_ISSUED_SHARES = (ns_class_master%COMMON_STOCK_ISSUED
     + - DEBT_COMMON_STOCK_ISSUED
     + + DEBT_COMMON_STOCK_BUYBACK)/
     +   acq_AVERAGE_STOCK_PRICE
                        COMMON_SHARES(2,CLASS_POS) =
     + COMMON_SHARES(1,CLASS_POS)
     + + ns_class_parameters%ADDENDUM_2_SHARES_ISSUED
     + + DEBT_COMMON_SHARES_ISSUED
     + - DEBT_COMMON_SHARES_BUYBACK
     + + MODEL_ISSUED_SHARES
                     ELSE
                        COMMON_SHARES(2,CLASS_POS) =
     + COMMON_SHARES(1,CLASS_POS)
     + + ns_class_parameters%ADDENDUM_2_SHARES_ISSUED
     + + DEBT_COMMON_SHARES_ISSUED
     + - DEBT_COMMON_SHARES_BUYBACK
                     ENDIF
                     IF(COMMON_SHARES(2,CLASS_POS) == 0.) THEN
C                       COMMON_SHARES(2,CLASS_POS) = .00001
                        BOOK_VALUE_STOCK(2,CLASS_POS) =
     +                                COMMON_EQUITY(2,CLASS_POS)
                     ELSE
                        BOOK_VALUE_STOCK(2,CLASS_POS) =
     +                               COMMON_EQUITY(2,CLASS_POS)/
     +                                COMMON_SHARES(2,CLASS_POS)
                     ENDIF
                     IF(I > 3 .AND. PRIVIOUS_BOOK_VALUE ==
     +                       BOOK_VALUE_STOCK(2,CLASS_POS)) EXIT
                  ENDDO
               ENDIF
               acq_STOCK_MARKET_PRICE = BOOK_VALUE_STOCK(2,CLASS_POS) *
     + ABS(ns_class_parameters%MARKET_2_BOOK)
            ENDIF ! convergence

            IF(globecom_YEAR <= LAST_AVAILABLE_MONTHLY_YEAR .AND.
     +                                MONTHLY_MIDAS_ACTIVE) THEN

               INTEREST_ON_SHORT_TERM_DEBT(2,CLASS_POS) =
     +                           INTEREST_ON_STD
     +                           + acq_NOTES_PAYABLE_INTEREST
            ELSE
       acq_OTHER_TAXES = 
     + ns_class_parameters%CLASS_OTHER_TAXES_RATE/100. *
     +                (OPERATING_REVENUES(2,CLASS_POS)
     +                 - EXCLUDED_OTHER_TAXES_REV(CLASS_LEVEL))
     + + ns_class_parameters%OTHER_TAXES_PERCENT_OF_EXPENSES/100. *
     +     (CLASS_NON_VARIABLE_EXPENSE
     +      - EXCLUDED_OTHER_TAXES_EXP(CLASS_LEVEL))
     + + ns_class_parameters%CLASS_ADDENDUM_2_OTHER_TAXES
     + + EXCLUDED_OTHER_TAXES(CLASS_LEVEL)
               IF(STD_INTEREST_VECTOR(CLASS_POS) >= 1) THEN
                  INTEREST_ON_STD = STD_FIRST_HALF_RATE *
     +                         SHORT_TERM_DEBT(1,CLASS_POS)
     +                      + STD_SECOND_HALF_RATE *
     +                              SHORT_TERM_DEBT(2,CLASS_POS)
     +                      + STD_INTEREST_ADDEN
               ELSE
           INTEREST_ON_STD = ns_class_parameters%STD_INTEREST_RATE *
     +                       (SHORT_TERM_DEBT(1,CLASS_POS)
     +                        + SHORT_TERM_DEBT(2,CLASS_POS))/2.
     +                      + STD_INTEREST_ADDEN
               ENDIF
               INTEREST_ON_SHORT_TERM_DEBT(2,CLASS_POS) =
     +                           INTEREST_ON_STD
     +                           + CUSTOMER_DEPOSIT_INTEREST_ON
     +                           + acq_NOTES_PAYABLE_INTEREST
            ENDIF
            TOTAL_CAPITIAL(2,CLASS_POS) = COMMON_EQUITY(2,CLASS_POS) +
     +                            PREFERRED_STOCK(2,CLASS_POS) +
     +                            LONG_TERM_DEBT(2,CLASS_POS)
            IF(COUNTRY_NOT_USA) THEN
               AMOUNT_OF_TAXED_CAPITAL = TOTAL_CAPITIAL(2,CLASS_POS) +
     +                           DEF_TAX_CR_BALANCE(2,CLASS_POS)
            ELSE
               AMOUNT_OF_TAXED_CAPITAL = TOTAL_CAPITIAL(2,CLASS_POS)
            ENDIF
            STATE_TAX_ON_CAPITAL = 
     + ns_class_canadian%PROVINCIAL_CAPITAL_TAX_RATE/100. *
     +       MAX(0.,AMOUNT_OF_TAXED_CAPITAL -
     +           ns_class_canadian%PROVINCIAL_CAP_TAX_DEDUCTION -
     +           EXCLUDE_CAPITAL_TAX_STATE_BASIS(CLASS_LEVEL)) +
     +                 EXCLUDE_CAPITAL_TAXES_STATE(CLASS_LEVEL)+
     +                 ns_class_canadian%PROVINCIAL_CAP_TAX_ADDENDUM
            FEDERAL_TAX_ON_CAPITAL = 
     + ns_class_canadian%FEDERAL_CAPITAL_TAX_RATE/100. *
     +       MAX(0.,AMOUNT_OF_TAXED_CAPITAL -
     +             ns_class_canadian%FEDERAL_CAPITAL_TAX_DEDUCTION -
     +             EXCLUDE_CAPITAL_TAX_FED_BASIS(CLASS_LEVEL)) +
     +                   ns_class_canadian%FEDERAL_CAPITAL_TAX_ADDENDUM

            IF(.NOT. IOU_UTILITY) THEN
      ns_class_ctaxes%FDTAXPAID = ns_class_parameters%TITCPY
               DEFERRED_TAXES_DR = 0.
               BTL_DEFERRED_TAXES_DR = 0.
               TOTAL_DEFERRED_TAXES_DR = 0.
            ENDIF

C END FINANCING LOOP

            IF(globecom_YEAR <= LAST_AVAILABLE_MONTHLY_YEAR .AND.
     +                                MONTHLY_MIDAS_ACTIVE) THEN
               ACQ_CHANGE_IN_CASH = LIQUID_INVESTMENTS(2,CLASS_POS)
     +                  - LIQUID_INVESTMENTS(1,CLASS_POS)

            ELSE
               ACQ_CHANGE_IN_CASH = LIQUID_INVESTMENTS(2,CLASS_POS)
     +                  - LIQUID_INVESTMENTS(1,CLASS_POS)
     +                  + acq_CASH_2_LT_INVESTMENTS
               IF(LONG_TERM_INVESTMENTS(CLASS_POS) +
     +    acq_CASH_2_LT_INVESTMENTS < 
     + ns_class_parameters%MIN_LONG_TERM_INVESTMENT) THEN
                  acq_CASH_2_LT_INVESTMENTS = 
     + ns_class_parameters%MIN_LONG_TERM_INVESTMENT -
     + LONG_TERM_INVESTMENTS(CLASS_POS)
                  STI_CHANGE_IN_CASH =
     + ACQ_CHANGE_IN_CASH-acq_CASH_2_LT_INVESTMENTS
               ELSEIF(LONG_TERM_INVESTMENTS(CLASS_POS) +
     +   acq_CASH_2_LT_INVESTMENTS >= 
     + ns_class_parameters%MAX_LONG_TERM_INVESTMENT) THEN
                     acq_CASH_2_LT_INVESTMENTS = 
     + ns_class_parameters%MAX_LONG_TERM_INVESTMENT -
     +                          LONG_TERM_INVESTMENTS(CLASS_POS)
                  STI_CHANGE_IN_CASH =
     + ACQ_CHANGE_IN_CASH-acq_CASH_2_LT_INVESTMENTS
               ELSE
                  STI_CHANGE_IN_CASH =
     +  ACQ_CHANGE_IN_CASH-acq_CASH_2_LT_INVESTMENTS
                  IF(LIQUID_INVESTMENTS(1,CLASS_POS)+STI_CHANGE_IN_CASH>
     + ns_class_parameters%MAX_SHORT_TERM_INVESTMENT) THEN
       STI_CHANGE_IN_CASH = 
     + ns_class_parameters%MAX_SHORT_TERM_INVESTMENT -
     + LIQUID_INVESTMENTS(1,CLASS_POS)
        acq_CASH_2_LT_INVESTMENTS = ACQ_CHANGE_IN_CASH
     +  - STI_CHANGE_IN_CASH
        LIQUID_INVESTMENTS(2,CLASS_POS) =
     +  ns_class_parameters%MAX_SHORT_TERM_INVESTMENT
                  ENDIF
               ENDIF
            ENDIF
            IF(globecom_YEAR <= LAST_AVAILABLE_MONTHLY_YEAR .AND.
     +                                MONTHLY_MIDAS_ACTIVE) THEN
               LIQUID_INVESTMENTS(2,CLASS_POS) = STI_CHANGE_IN_CASH +
     +                           LIQUID_INVESTMENTS(1,CLASS_POS)
            ELSE
               LIQUID_INVESTMENTS(2,CLASS_POS) = STI_CHANGE_IN_CASH +
     +                           LIQUID_INVESTMENTS(1,CLASS_POS)
               LT_INVESTMENTS_EARNINGS =
     +              (LTI_FIRST_HALF_RATE *
     +                          LONG_TERM_INVESTMENTS(CLASS_POS)
     +              + LTI_SECOND_HALF_RATE *
     +                         (LONG_TERM_INVESTMENTS(CLASS_POS)
     +                          + acq_CASH_2_LT_INVESTMENTS))/2.
     +              + ADJ_2_EARNINGS_LT_INVESTMENTS
               ST_INVESTMENT_EARNINGS = (STI_FIRST_HALF_RATE *
     +                           LIQUID_INVESTMENTS(1,CLASS_POS)
     +                   + STI_SECOND_HALF_RATE *
     +                       LIQUID_INVESTMENTS(2,CLASS_POS))/2.
     +                   + ADJ_2_EARNINGS_ST_INVESTMENTS
            ENDIF
            IF(SALT_RIVER_PROJECT()) THEN
            ! PASS DECOM RETURN THROUGH INCOME
               INVESTMENT_INCOME = ST_INVESTMENT_EARNINGS
     +  + RETIREMENT_MEDICAL_FUND_RETURN
     +  + LT_INVESTMENTS_EARNINGS
     +  + ns_class_parameters%NUCL_FUND_RETURN
     +  + INTEREST_INCOME_AFILLIATES
     +  + DEBT_FILE_INVESTMENT_INCOME
     +  + Exp_InterestIncome
     +  + Exp_Dividends
               INVESTMENT_INCOME_RECEIVABLE = ST_INVESTMENT_EARNINGS
     +                             + LT_INVESTMENTS_EARNINGS
     +                             + INTEREST_INCOME_AFILLIATES
     +                             + DEBT_FILE_INVESTMENT_INCOME
     +                             + Exp_InterestIncome
     +                             + Exp_Dividends
            ELSE
               INVESTMENT_INCOME = ST_INVESTMENT_EARNINGS
     +                     + RETIREMENT_MEDICAL_FUND_RETURN
     +                     + LT_INVESTMENTS_EARNINGS
     +                     + INTEREST_INCOME_AFILLIATES
     +                     + DEBT_FILE_INVESTMENT_INCOME
     +                     + Exp_InterestIncome
     +                     + Exp_Dividends
               IF(RETAIN_POST_RETIREMENT_EARNINGS()) THEN
                  INVESTMENT_INCOME_RECEIVABLE = ST_INVESTMENT_EARNINGS
     +                          + LT_INVESTMENTS_EARNINGS
     +                          + INTEREST_INCOME_AFILLIATES
     +                          + DEBT_FILE_INVESTMENT_INCOME
     +                          + Exp_InterestIncome
     +                          + Exp_Dividends
               ELSE
                  INVESTMENT_INCOME_RECEIVABLE = ST_INVESTMENT_EARNINGS
     +                          + RETIREMENT_MEDICAL_FUND_RETURN
     +                          + LT_INVESTMENTS_EARNINGS
     +                          + INTEREST_INCOME_AFILLIATES
     +                          + DEBT_FILE_INVESTMENT_INCOME
     +                          + Exp_InterestIncome
     +                          + Exp_Dividends
               ENDIF
            ENDIF

            IF(REGULATED_CAPATIAL_STRUCTURE) THEN
       ACQ_INTEREST_ON_LONG_TERM_DEBT=
     + ns_class_parameters%LTDRTE*ACQ_ASSET_CLASS_RATE_BASE *
     + (1. - (ns_class_parameters%EQRATO + ns_class_parameters%PSRATO))
           LTD_ISSUE_YR_INTEREST_PAYMENT=ACQ_INTEREST_ON_LONG_TERM_DEBT
           LTD_ISSUE_YR_INTEREST_BOOKED = ACQ_INTEREST_ON_LONG_TERM_DEBT
               PS_ISSUE_YR_DIVIDEND_PAYMENT = PREFERRED_DIVIDENDS
               PS_ISSUE_YR_DIVIDEND_BOOKED = PREFERRED_DIVIDENDS
               acq_STD_INTEREST_CASH_PAYMENT =
     +                  INTEREST_ON_SHORT_TERM_DEBT(2,CLASS_POS)
               LTD_LAGGED_INTEREST_PAYMENT = 0.
               PS_LAGGED_DIVIDEND_PAYMENT = 0.
               INTEREST_DIVIDENDS_ACCRUDED = 0.
            ELSE
              PS_ISSUE_YR_DIVIDEND_BOOKED = ns_class_parameters%PSRATE *
     +    (PREFERRED_STOCK_ISSUED-
     + ns_class_master%DEBT_FILE_PREFERRED_ISSUED)/2.

C LTD ITEMS REQUIRE THE MONTHLY SPLIT TO GET INTEREST CORRECT 5/5/99 MSG

            IF(ACCURAL_ACCOUNTING_ACTIVE) THEN ! SAME AS MONTHLY ACTIVE
                  IF(globecom_YEAR <= LAST_AVAILABLE_MONTHLY_YEAR .AND.
     +                                MONTHLY_MIDAS_ACTIVE) THEN
                     acq_STD_INTEREST_CASH_PAYMENT = STD_INTEREST_OWED
                     IF(CPL_IS_ACTIVE) THEN
                        CALL MONTHLY_LTD_BOOKED_NEW_ISSUES(
     +                            MTG_DEBT_RETIREMENTS,
     +                            LTD_ISSUE_YR_INTEREST_BOOKED,
     +                            LTD_ISSUE_YR_INTEREST_PAYMENT)
                     ELSE ! CPL IS THE ONLY ONE WITH THE NON
                     !MID-YEAR ISSUE STRUCTURE
                        IF(MORTGAGE_DEBT) THEN

                           CALL MONTHLY_LTD_BOOKED_NEW_ISSUES(
     +                            MTG_DEBT_RETIREMENTS,
     +                            LTD_ISSUE_YR_INTEREST_BOOKED,
     +                            LTD_ISSUE_YR_INTEREST_PAYMENT)
                        ELSE
      LTD_ISSUE_YR_INTEREST_BOOKED = ns_class_parameters%LTDRTE *
     +                (LONG_TERM_DEBT_ISSUED
     + -ns_class_master%DEBT_FILE_LTD_ISSUED)/2.
        LTD_ISSUE_YR_INTEREST_PAYMENT = ns_class_parameters%LTDRTE *
     +                (LONG_TERM_DEBT_ISSUED
     + -ns_class_master%DEBT_FILE_LTD_ISSUED)/4.
                           MTG_DEBT_RETIREMENTS = 0.
                        ENDIF
                     ENDIF
                  ELSE
                    IF(MORTGAGE_DEBT) THEN
                        IF(LONG_TERM_DEBT_ISSUED
     +  -ns_class_master%DEBT_FILE_LTD_ISSUED > .0001) THEN
      CALL MTG_PRIN_INTR(ns_class_parameters%LTDRTE,
     + ns_class_parameters%LDLIFE,
     +   LONG_TERM_DEBT_ISSUED
     + -ns_class_master%DEBT_FILE_LTD_ISSUED,
     +  LTD_ISSUE_YR_INTEREST_BOOKED,
     +  LTD_ISSUE_YR_INTEREST_PAYMENT,
     +  MTG_DEBT_RETIREMENTS)
                        ELSE
                           LTD_ISSUE_YR_INTEREST_BOOKED = 0.
                           LTD_ISSUE_YR_INTEREST_PAYMENT = 0.
                           MTG_DEBT_RETIREMENTS = 0.
                        ENDIF
                    ELSE
                        LTD_ISSUE_YR_INTEREST_BOOKED = 
     + ns_class_parameters%LTDRTE *
     + (LONG_TERM_DEBT_ISSUED-ns_class_master%DEBT_FILE_LTD_ISSUED)/2.
                        LTD_ISSUE_YR_INTEREST_PAYMENT = 
     + ns_class_parameters%LTDRTE *
     + (LONG_TERM_DEBT_ISSUED-ns_class_master%DEBT_FILE_LTD_ISSUED)/4.
                        MTG_DEBT_RETIREMENTS = 0.
                     ENDIF
                     acq_STD_INTEREST_CASH_PAYMENT =

     +                           INTEREST_ON_STD
     +                           + CUSTOMER_DEPOSIT_INTEREST_ON
     +                           + acq_NOTES_PAYABLE_INTEREST
                  ENDIF
                  LTD_LAGGED_INTEREST_PAYMENT =
     +                           LTD_ISSUE_YR_INTEREST_BOOKED
     +                           - LTD_ISSUE_YR_INTEREST_PAYMENT

                  IF(EMPIRE_IS_ACTIVE) THEN
       PS_ISSUE_YR_DIVIDEND_PAYMENT = ns_class_parameters%PSRATE *
     +                       (PREFERRED_STOCK_ISSUED
     + - ns_class_master%DEBT_FILE_PREFERRED_ISSUED)/2.
                  ELSE
         PS_ISSUE_YR_DIVIDEND_PAYMENT = ns_class_parameters%PSRATE *
     +                       (PREFERRED_STOCK_ISSUED
     + - ns_class_master%DEBT_FILE_PREFERRED_ISSUED)/4.
                  ENDIF
                  PS_LAGGED_DIVIDEND_PAYMENT =
     +                            PS_ISSUE_YR_DIVIDEND_BOOKED
     +                            - PS_ISSUE_YR_DIVIDEND_PAYMENT
               ELSE
                  IF(MORTGAGE_DEBT) THEN
                     IF(LONG_TERM_DEBT_ISSUED
     + -ns_class_master%DEBT_FILE_LTD_ISSUED > .0001) THEN
       CALL MTG_PRIN_INTR(ns_class_parameters%LTDRTE,
     + ns_class_parameters%LDLIFE,
     +                             LONG_TERM_DEBT_ISSUED
     + -ns_class_master%DEBT_FILE_LTD_ISSUED,
     +                            LTD_ISSUE_YR_INTEREST_BOOKED,
     +                            LTD_ISSUE_YR_INTEREST_PAYMENT,
     +                            MTG_DEBT_RETIREMENTS)
                     ELSE
                           LTD_ISSUE_YR_INTEREST_BOOKED = 0.
                           LTD_ISSUE_YR_INTEREST_PAYMENT = 0.
                           MTG_DEBT_RETIREMENTS = 0.
                     ENDIF
                  ELSE
       LTD_ISSUE_YR_INTEREST_BOOKED = ns_class_parameters%LTDRTE *
     + (LONG_TERM_DEBT_ISSUED-ns_class_master%DEBT_FILE_LTD_ISSUED)/2.
                     LTD_ISSUE_YR_INTEREST_PAYMENT =
     +                              LTD_ISSUE_YR_INTEREST_BOOKED
                  ENDIF
                  LTD_LAGGED_INTEREST_PAYMENT = 0.
                  PS_LAGGED_DIVIDEND_PAYMENT = 0.
                  PS_ISSUE_YR_DIVIDEND_PAYMENT =
     +                               PS_ISSUE_YR_DIVIDEND_BOOKED
                  acq_STD_INTEREST_CASH_PAYMENT =

     +                           INTEREST_ON_STD
     +                           + CUSTOMER_DEPOSIT_INTEREST_ON
     +                           + acq_NOTES_PAYABLE_INTEREST
               ENDIF
               ACQ_INTEREST_ON_LONG_TERM_DEBT = LTDINT(YR,CLASS_POS)
     +                            + LTD_ISSUE_YR_INTEREST_BOOKED
     +                            + LTD_ROLLOVER_INTEREST
            ENDIF
            INTEREST = ACQ_INTEREST_ON_LONG_TERM_DEBT
     +         + INTEREST_ON_SHORT_TERM_DEBT(2,CLASS_POS)

C START OF INCOME TAX CALCULATIONS

            acq_TAXABLE_INVESTMENT_INCOME = INVESTMENT_INCOME
     +             -.7*DIVIDEND_70_NONTAXABLE !ONLY 30% TAXABLE
     +                          - RETIREMENT_MEDICAL_FUND_RETURN
            IF(WKP_ACTIVE) THEN
       acq_OTHER_TAXABLE_INCOME = 
     + ns_class_parameters%CLASS_BTL_REVENUES -
     +                                   acq_OTHER_INCOME_NET_OF_TAX
               ACQ_TAXABLE_INCOME = OPERATING_REVENUES(2,CLASS_POS)
     +                  - acq_TOTAL_CASH_EXPENSES
     +                  + acq_OTHER_TAXABLE_INCOME
     +                  + acq_TAXABLE_INVESTMENT_INCOME
     +                  - ns_class_parameters%CLASS_BTL_EXPENSES
     +                  - INTEREST
     +                  - ACQ_OPERATING_REVENUE_TAX
     +                  - acq_OTHER_TAXES
     +                  - Payroll_Taxes
     +                  - CLASS_PROPERTY_TAXES
     +                  - BOOK_DEPRECIATION
     +                  - AMORTIZATION_EXPENSE
     +                  - acq_SALVAGE_TRANSACTIONS
     +                  - acq_EXPENSING_MATRIALS_INVENTORY
     +                  - acq_EXPENSING_GAS_INVENTORY
     +                  - acq_EXPENSING_FUEL_INVENTORY
               FEDERAL_TAXES = 
     + ns_class_parameters%FEDERAL_TAX_RATE * ACQ_TAXABLE_INCOME
               LOCAL_TAXES = ADJ_2_LOCAL_TAXES
               ACQ_STATE_TAXABLE_INCOME = ACQ_TAXABLE_INCOME
          ACQ_STATE_TAXABLE_INCOME_AFTER_NOLS = ACQ_STATE_TAXABLE_INCOME
               STATE_TAXES = ns_class_parameters%STATE_TAX_RATE *
     +   ACQ_STATE_TAXABLE_INCOME_AFTER_NOLS + acq_ADJ_2_STATE_TAXES
               ACQ_FEDERAL_TAXABLE_INCOME = ACQ_TAXABLE_INCOME
          acq_FED_TAXABLE_INCOME_AFTER_NOLS = ACQ_FEDERAL_TAXABLE_INCOME
               FEDERAL_TAXES = ns_class_parameters%FEDERAL_TAX_RATE *
     +                           acq_FED_TAXABLE_INCOME_AFTER_NOLS +
     +                                acq_ADJ_2_FEDERAL_TAXES -
     +                               (acq_FED_TAX_CREDIT_PASSED_UP +
     +                                acq_SEC_29_CREDITS_PASSED_UP +
     +                                acq_SEC_42_CREDITS_PASSED_UP)
            ELSE ! ENDIF
               IF(MONTHLY_MIDAS_ACTIVE .AND.  .FALSE. .AND.
     +  globecom_YEAR<=LAST_AVAILABLE_MONTHLY_YEAR .AND. ITER>1) THEN
               ELSE
                  acq_OTHER_TAXABLE_INCOME = 
     + ns_class_parameters%CLASS_BTL_REVENUES -
     +                           acq_CATAWBA_OTHER_NET_REVENUES -
     +                           acq_OTHER_INCOME_NET_OF_TAX
                  IF(UI()) THEN
        PENSION_TAX_DEDUCTION = acq_PENSION_EXPENSE_CASH     ! 689
         STORM_TAX_DEDUCTION = acq_STORM_EXPENSE_CASH         ! 690
          VACATION_TAX_DEDUCTION = acq_VACATION_PAY_CASH      ! 691
         ELSE
         PENSION_TAX_DEDUCTION = acq_pension_expense_non_cash  ! 689
         STORM_TAX_DEDUCTION = ACQ_storm_expense_non_cash    ! 690
           VACATION_TAX_DEDUCTION = ACQ_VACATION_PAY_NON_CASH! 691
                  ENDIF
                  PENSION_VAC_storm_TAX_EXP = PENSION_TAX_DEDUCTION
     +                               + STORM_TAX_DEDUCTION
     +                               + VACATION_TAX_DEDUCTION
     +                               + acq_ExecBenefitsCash
     +                               + acq_IncentiveCompensationCash
                  ACQ_TAXABLE_INCOME = OPERATING_REVENUES(2,CLASS_POS)
     +                     - acq_TOTAL_CASH_EXPENSES
     +                     + ACQ_NF_CASH_EXPENSE
     +                     - acq_NF_TAX_EXPENSE
     +                     - ns_class_parameters%INCOME_TAX_DEPRECIATION
     +                     + acq_OTHER_TAXABLE_INCOME
     +                     + acq_TAXABLE_INVESTMENT_INCOME
     +                     - ns_class_parameters%CLASS_BTL_EXPENSES
     +                     - BTL_NUC_FUEL_DECOM_LIABILITY
     +                     - INTEREST
     +                     + ACQ_CAPITIALIZED_INTEREST
     +                     - construction_tax_expense
     +                     - ENVIRONMENTAL_TAX
     +                     - ACQ_OPERATING_REVENUE_TAX
     +                     - Payroll_Taxes
     +                     - acq_OTHER_TAXES
     +                     - CLASS_PROPERTY_TAXES
     +                     - acq_SALVAGE_TRANSACTIONS
     +                     - PENSION_VAC_storm_TAX_EXP
     +                     - acq_EXPENSING_MATRIALS_INVENTORY
     +                     - acq_EXPENSING_GAS_INVENTORY
     +                     - acq_EXPENSING_FUEL_INVENTORY
                  LOCAL_TAXES = LOCAL_TAX_RATE/100.*ACQ_TAXABLE_INCOME +
     +                                         ADJ_2_LOCAL_TAXES
                  ACQ_STATE_TAXABLE_INCOME = ACQ_TAXABLE_INCOME -
     + ns_class_master%STATE_INCOME_TAX_DEDUCTIONS -
     +ns_class_parameters%STATE_DEDUC_PERCT_OF_TIB4DEDUC/100.*
     + ACQ_TAXABLE_INCOME

                  USE_ALL_STATE_TAX_BENEFITS_NOW=
     +                                USE_STATE_TAX_BENEFITS_NOW
                  USE_ALL_FED_TAX_BENEFITS_NOW = .NOT.PARENT_CLASS .AND.
     +                                  USE_ALL_FED_TAX_BENEFITS
                  IF(USE_ALL_STATE_TAX_BENEFITS_NOW) THEN
                     ACQ_STATE_TAXABLE_INCOME_AFTER_NOLS =
     +     ADJUST_4_STATE_NOLS(CLASS,ACQ_STATE_TAXABLE_INCOME,
     +                           USE_ALL_STATE_TAX_BENEFITS_NOW)

                  ELSE
                     IF(CLASS_TYPE(CLASS_POS) == SBU .OR.
     +            CLASS_TYPE(CLASS_POS) == REGULATED_GROUP) THEN
                           ! LET SBU HAVE NEGATIVE TAXES
                        ACQ_STATE_TAXABLE_INCOME_AFTER_NOLS =
     +                                ACQ_STATE_TAXABLE_INCOME
                     ELSE
                        ACQ_STATE_TAXABLE_INCOME_AFTER_NOLS =
     +      ADJUST_4_STATE_NOLS(CLASS,ACQ_STATE_TAXABLE_INCOME,
     +                           USE_ALL_STATE_TAX_BENEFITS_NOW)
                     ENDIF
                  ENDIF
       acq_STATE_TAXES_B4_CREDITS_ADJTS = 
     + ns_class_parameters%STATE_TAX_RATE *
     +                       ACQ_STATE_TAXABLE_INCOME_AFTER_NOLS
        acq_STATE_CREDITS_USED = ADJUST_4_STATE_CREDITS(CLASS,
     + acq_STATE_TAXES_B4_CREDITS_ADJTS,
     + acq_STATE_TAX_CREDIT_PASSED_UP,
     + USE_ALL_STATE_TAX_BENEFITS_NOW)
                  STATE_TAXES = acq_STATE_TAXES_B4_CREDITS_ADJTS
     +                  - acq_STATE_CREDITS_USED
     +    + acq_ADJ_2_STATE_TAXES !set this adj to match to actual


                  IF(USE_ACTUAL_STATE_TAXES) THEN
                     CALCULATED_2_ACTUAL_STATE_ADJ =
     +                                   ANNUAL_STATE_INCOME_TAX
     +                                   - STATE_TAXES
                     STATE_TAXES = ANNUAL_STATE_INCOME_TAX
                  ENDIF

C FEDERAL TAX CALCULATIONS

                  ACQ_FEDERAL_TAXABLE_INCOME = ACQ_TAXABLE_INCOME
     +                      - LOCAL_TAXES
     +                      - STATE_TAXES
     +                      - ns_class_master%FED_INCOME_TAX_DEDUCTIONS
     +                      - STATE_TAX_ON_CAPITAL
     + - ns_class_parameters%FED_DEDUC_PERCT_OF_TIB4DEDUC/100.*
     + ACQ_TAXABLE_INCOME


C ADJUSTMENT TO AMT AND EINVIRONMENTAL 1/7/98

       ns_class_amt1%AMTINCOME =  ACQ_FEDERAL_TAXABLE_INCOME +
     +              ns_class_parameters%TAX_PREFERENCE_DEPRECIATION +
     +  min(0.,.75*(-ns_class_parameters%ACE_TAX_DEPRECIATION -
     + ns_class_parameters%TAX_PREFERENCE_DEPRECIATION)) +
     +              AMT_INCOME_ADDENDUM

       ns_class_amt1%AMTINCOME = 
     + ADJUST_4_AMT_NOLS(CLASS,ns_class_amt1%AMTINCOME)
                  IF(IOU_UTILITY.AND.CALCULATE_ENVIRONMENTAL_TAX()) THEN
       ENVIRONMENTAL_TAX = .0012 * MAX(0.,ns_class_amt1%AMTINCOME-2.)
                  ELSE
                     ENVIRONMENTAL_TAX = 0.
                  ENDIF

                  acq_AMT_CREDITS_CREATED = 0.
                  acq_AMT_CREDITS_USED = 0.

                  acq_FED_DEFERRED_TAXES_FROM_NOL = 0.
                  acq_STATE_DEFERRED_TAXES_FROM_NOL = 0.

                  IF(CLASS_TYPE(CLASS_POS) == SBU .OR.
                        ! LET SBU HAVE NEGATIVE TAXES
     +          CLASS_TYPE(CLASS_POS) == REGULATED_GROUP) THEN
                     acq_FED_TAXABLE_INCOME_AFTER_NOLS =
     +                                ACQ_FEDERAL_TAXABLE_INCOME
                 acq_FED_TAXES_B4_CREDITS_ADJTS = 
     + ns_class_parameters%FEDERAL_TAX_RATE *
     +                             acq_FED_TAXABLE_INCOME_AFTER_NOLS
                     acq_FED_CREDITS_USED = acq_FED_TAX_CREDIT_PASSED_UP
                  acq_SEC_29_CREDITS_USED = acq_SEC_29_CREDITS_PASSED_UP
                  acq_SEC_42_CREDITS_USED = acq_SEC_42_CREDITS_PASSED_UP
                  ELSEIF(INDEX(CLASS_NAME(CLASS_POS),'Monta') /= 0 .AND.
     +                                   MONTAUK_IS_ACTIVE) THEN
                     acq_FED_TAXABLE_INCOME_AFTER_NOLS =
     +                                ACQ_FEDERAL_TAXABLE_INCOME
       acq_FED_TAXES_B4_CREDITS_ADJTS = 
     + ns_class_parameters%FEDERAL_TAX_RATE *
     +                             acq_FED_TAXABLE_INCOME_AFTER_NOLS
                     acq_FED_CREDITS_USED = acq_FED_TAX_CREDIT_PASSED_UP
                  acq_SEC_29_CREDITS_USED = acq_SEC_29_CREDITS_PASSED_UP
                  acq_SEC_42_CREDITS_USED = acq_SEC_42_CREDITS_PASSED_UP
                  ELSEIF(USE_ALL_FED_TAX_BENEFITS_NOW) THEN
                     acq_FED_TAXABLE_INCOME_AFTER_NOLS =
     +                                ACQ_FEDERAL_TAXABLE_INCOME
                 acq_FED_TAXES_B4_CREDITS_ADJTS = 
     + ns_class_parameters%FEDERAL_TAX_RATE *
     +                             acq_FED_TAXABLE_INCOME_AFTER_NOLS
                     acq_FED_CREDITS_USED = acq_FED_TAX_CREDIT_PASSED_UP
                  acq_SEC_29_CREDITS_USED = acq_SEC_29_CREDITS_PASSED_UP
                  acq_SEC_42_CREDITS_USED = acq_SEC_42_CREDITS_PASSED_UP
                  ELSE
                     acq_FED_TAXABLE_INCOME_AFTER_NOLS =
     +       ADJUST_4_FED_NOLS(CLASS,ACQ_FEDERAL_TAXABLE_INCOME)

C NEED TO ACCOUNT 4 NOLs AT THE SUB LEVEL USING DIT(DR)
                     IF(CLASS_TYPE(CLASS_POS) == SUBSIDIARY .OR.
     +                           PARENT_CLASS) THEN
           acq_FED_DEFERRED_TAXES_FROM_NOL = 
     + ns_class_parameters%FEDERAL_TAX_RATE *
     +            (ACQ_FEDERAL_TAXABLE_INCOME
     +             - acq_FED_TAXABLE_INCOME_AFTER_NOLS)
           acq_STATE_DEFERRED_TAXES_FROM_NOL = 
     + ns_class_parameters%STATE_TAX_RATE *
     +          (ACQ_STATE_TAXABLE_INCOME
     +       - ACQ_STATE_TAXABLE_INCOME_AFTER_NOLS)
                     ENDIF
                     IF(COUNTRY_NOT_USA .OR. .NOT. IOU_UTILITY) THEN
       acq_FED_TAXES_B4_CREDITS_ADJTS = 
     + ns_class_parameters%FEDERAL_TAX_RATE *
     +             acq_FED_TAXABLE_INCOME_AFTER_NOLS
        acq_FED_CREDITS_USED = acq_FED_TAX_CREDIT_PASSED_UP
        acq_SEC_29_CREDITS_USED = acq_SEC_29_CREDITS_PASSED_UP
        acq_SEC_42_CREDITS_USED = acq_SEC_42_CREDITS_PASSED_UP
                     ELSE
                        IF(CALCULATE_AMT) THEN
       acq_AMT_MINIMUM_TAX = .20 * ns_class_amt1%AMTINCOME
                        ELSE
                           acq_AMT_MINIMUM_TAX = 0.
                        ENDIF
                        IF(USE_FED_TAX_TABLE .AND.
     +                          .NOT. MONTHLY_MIDAS_ACTIVE) THEN
                           acq_FED_TAXES_B4_CREDITS_ADJTS =
     +                   FEDERAL_TAX_TABLE(
     +                            acq_FED_TAXABLE_INCOME_AFTER_NOLS)
                        ELSE
       acq_FED_TAXES_B4_CREDITS_ADJTS=
     + ns_class_parameters%FEDERAL_TAX_RATE *
     +  acq_FED_TAXABLE_INCOME_AFTER_NOLS
                        ENDIF
       acq_FED_CREDITS_USED = ADJUST_4_FED_CREDIT(CLASS,
     + acq_AMT_MINIMUM_TAX,
     + acq_FED_TAXES_B4_CREDITS_ADJTS,
     + acq_FED_TAX_CREDIT_PASSED_UP,
     + acq_SEC_29_CREDITS_PASSED_UP,
     + acq_SEC_42_CREDITS_PASSED_UP,
     + acq_SEC_29_CREDITS_USED,
     + acq_AMT_CREDITS_USED,
     + AVAILCREDIT(1,CLASS_POS))
         IF(acq_AMT_CREDITS_USED < 0.) THEN
            acq_AMT_CREDITS_CREATED = -acq_AMT_CREDITS_USED
            acq_AMT_CREDITS_USED = 0.
         ELSE
            acq_AMT_CREDITS_CREATED = 0.
         ENDIF
         DEF_TAXES_FROM_NOLS_AMT_CREDITS =
     +  acq_AMT_CREDITS_CREATED - acq_AMT_CREDITS_USED
     +  - acq_FED_DEFERRED_TAXES_FROM_NOL
     +  - acq_STATE_DEFERRED_TAXES_FROM_NOL
                     ENDIF
                  ENDIF

C ADJUST FOR CREDITS AND ADJUSTMENTS

                  FEDERAL_TAXES = acq_FED_TAXES_B4_CREDITS_ADJTS
     +                         + acq_ADJ_2_FEDERAL_TAXES
     +                         - (acq_FED_CREDITS_USED
     +                            + acq_SEC_29_CREDITS_USED
     +                            + acq_SEC_42_CREDITS_USED)
     +                         - acq_AMT_CREDITS_USED
     +                         + acq_AMT_CREDITS_CREATED
C    +                                 + CALCULATED_2_ACTUAL_FED_ADJ
                  acq_LOST_SEC_29_CREDITS = acq_SEC_29_CREDITS_PASSED_UP
     +                          - acq_SEC_29_CREDITS_USED

C ADJUST TO MEET ACTUAL TAXES

                  IF(USE_ACTUAL_FEDERAL_TAXES) THEN
                     CALCULATED_2_ACTUAL_FED_ADJ =
     +                                 ANNUAL_FEDERAL_INCOME_TAX
     +                                 - FEDERAL_TAXES
                     FEDERAL_TAXES = ANNUAL_FEDERAL_INCOME_TAX
                  ENDIF
               ENDIF
            ENDIF ! end of monthly not active taxes

            IF(PARENT_CLASS) THEN

C USE INPUTTED ACTUAL OR CALCUALTED CONSOLIDATED STATE TAX

               CONSOLIDATED_STATE_TAXES = EXCLUDE_STATE_TAXES
     +                            + STATE_TAXES
     +                            - CONSOLIDATED_STATE_TAX_ADJ
               CON_2_ACTUAL_STATE_ADJ = 0.
               CON_2_ACTUAL_FEDERAL_ADJ = 0.
               IF(USE_ACTUAL_CON_STATE_TAXES) THEN
                  CON_2_ACTUAL_STATE_ADJ = ACTUAL_CON_STATE_INCOME_TAX
     +                             - CONSOLIDATED_STATE_TAXES
                  CONSOLIDATED_STATE_TAXES = ACTUAL_CON_STATE_INCOME_TAX
               ENDIF
            CONSOLIDATED_FED_TAXABLE_INCOME = ACQ_FEDERAL_TAXABLE_INCOME
     +                              + SUB_FEDERAL_TAXABLE_INCOME
     +                              + EXCLUDE_STATE_TAXES
     +                              + STATE_TAXES
     +                              - CONSOLIDATED_STATE_TAX_ADJ
     +                              - CONSOLIDATED_STATE_TAXES


               CONSOLD_FED_INCOME_AFTER_NOLS =
     +                    ADJUST_4_FED_CONSOLIDATED_NOLS(
     +                          CONSOLIDATED_FED_TAXABLE_INCOME)
               CONSOLD_FED_DEF_TAXES_FROM_NOL = 
     + ns_class_parameters%FEDERAL_TAX_RATE *
     +                         (CONSOLIDATED_FED_TAXABLE_INCOME
     +                          - CONSOLD_FED_INCOME_AFTER_NOLS)
       CONSOLD_STATE_DEF_TAX_FROM_NOL = 
     +  ns_class_parameters%STATE_TAX_RATE *
     +                       (ACQ_STATE_TAXABLE_INCOME
     +                    - ACQ_STATE_TAXABLE_INCOME_AFTER_NOLS)

               IF(COUNTRY_NOT_USA .OR. .NOT. IOU_UTILITY) THEN
                  CONSOLD_FED_TAXES_B4_CREDITS = 
     + ns_class_parameters%FEDERAL_TAX_RATE *
     +                             CONSOLD_FED_INCOME_AFTER_NOLS
               ELSE
                  IF(USE_FED_TAX_TABLE .AND.
     +                          .NOT. MONTHLY_MIDAS_ACTIVE) THEN
                     CONSOLD_FED_TAXES_B4_CREDITS =
     +          FEDERAL_TAX_TABLE(CONSOLD_FED_INCOME_AFTER_NOLS)
                  ELSE
                  CONSOLD_FED_TAXES_B4_CREDITS = 
     + ns_class_parameters%FEDERAL_TAX_RATE *
     +                             CONSOLD_FED_INCOME_AFTER_NOLS
                  ENDIF
         IF(IOU_UTILITY .AND. CALCULATE_AMT) THEN ! THIS WAS ALWAYS TRUE
                     CONSOLIDATED_AMT_INCOME =
     +            CONSOLIDATED_FED_TAXABLE_INCOME +
     +                ns_class_parameters%TAX_PREFERENCE_DEPRECIATION +
     + min(0.,.75*(-ns_class_parameters%ACE_TAX_DEPRECIATION -
     + ns_class_parameters%TAX_PREFERENCE_DEPRECIATION))+
     +                AMT_INCOME_ADDENDUM

                     AMT_INCOME_AFTER_NOL = CONSOLIDATED_AMT_INCOME
                     CONSOLIDATED_AMT_INCOME =
     +          ADJUST_4_AMT_NOLS(CLASS,CONSOLIDATED_AMT_INCOME)
                     CONSOLD_AMT_MINIMUM_TAX=.20*CONSOLIDATED_AMT_INCOME
                  ELSE
                     AMT_INCOME_AFTER_NOL = 0.
                     CONSOLD_AMT_MINIMUM_TAX = 0.
                  ENDIF

                  CONSOLIDATED_FED_CREDITS_USED =
     +           ADJUST_CONSOLD_4_FED_CREDIT(
     +  CONSOLD_AMT_MINIMUM_TAX,
     +  CONSOLD_FED_TAXES_B4_CREDITS,
     +  CONSOLD_AVAIL_FED_TAX_CREDIT,
     +  CONSOLID_FED_SEC_29_TAX_CREDITS,
     +  CONSOLID_FED_SEC_42_TAX_CREDITS,
     +  acq_CONSOLID_SEC_29_CREDITS_USED,
     +  CONSOLID_AMT_CREDITS_USED,
     +  CONSOLID_AVAILABLE_AMT_CREDITS)
               ENDIF

C ADJUST FOR CREDITS AND ADJUSTMENTS

               IF(CONSOLID_AMT_CREDITS_USED < 0.) THEN
                  CONSOLID_AMT_CREDITS_CREATED =
     +                                -CONSOLID_AMT_CREDITS_USED
                  CONSOLID_AMT_CREDITS_USED = 0
               ELSE
                  CONSOLID_AMT_CREDITS_CREATED = 0.
               ENDIF

               CONSOLIDATED_FEDERAL_TAXES=
     +  CONSOLD_FED_TAXES_B4_CREDITS
     +  + CONSOLIDATED_FED_TAX_ADJ
     +  - CONSOLIDATED_FED_CREDITS_USED
     +  - acq_CONSOLID_SEC_29_CREDITS_USED
     +  - CONSOLID_AMT_CREDITS_USED
     +  + CONSOLID_AMT_CREDITS_CREATED
               IF(USE_ACTUAL_CON_FEDERAL_TAXES) THEN
                  CON_2_ACTUAL_FEDERAL_ADJ =
     +                             ACTUAL_CON_FEDERAL_INCOME_TAX
     +                             - CONSOLIDATED_FEDERAL_TAXES
                  CONSOLIDATED_FEDERAL_TAXES =
     +                             ACTUAL_CON_FEDERAL_INCOME_TAX
               ENDIF
               CON_DEF_TAX_DR_NOLS_AMT_CREDITS =
     +                         CONSOLID_AMT_CREDITS_CREATED
     +                         - CONSOLID_AMT_CREDITS_USED
     +                         - CON SOLD_FED_DEF_TAXES_FROM_NOL
     +                         - CONSOLD_STATE_DEF_TAX_FROM_NOL
               CONSOLID_LOST_SEC_29_CREDITS =
     +                       CONSOLID_FED_SEC_29_TAX_CREDITS -
     +                       acq_CONSOLID_SEC_29_CREDITS_USED

               CONSOLIDATED_INCOME_TAXES = CONSOLIDATED_FEDERAL_TAXES +
     +                             CONSOLIDATED_STATE_TAXES
               IF(globecom_YEAR <= LAST_AVAILABLE_MONTHLY_YEAR .AND.
     +                                MONTHLY_MIDAS_ACTIVE) THEN
                  CALL CONSOLIDATED_TAXES_CASH(globecom_YEAR,
     +                          CONSOLIDATED_STATE_TAXES,
     +                          CONSOLIDATED_FEDERAL_TAXES,
     +                          CONSOLIDATED_FEDERAL_TAXES_PAID,
     +                          CONSOLIDATED_STATE_TAXES_PAID)


               ELSE
                  CONSOLIDATED_FEDERAL_TAXES_PAID =
     +                                CONSOLIDATED_FEDERAL_TAXES
                  CONSOLIDATED_STATE_TAXES_PAID =
     +                                  CONSOLIDATED_STATE_TAXES
               ENDIF
               CONSOLIDATED_INCOME_TAXES_PAID =
     +                           CONSOLIDATED_FEDERAL_TAXES_PAID

            ENDIF

C BTL INCOME TAXES

       
               IF(CALCULATE_BTL_INCOME_TAXES) THEN
                  BTL_TAXABLE_INCOME = acq_OTHER_TAXABLE_INCOME
     + + acq_TAXABLE_INVESTMENT_INCOME ! INVESTMENT_INCOME
     +                         - ns_class_parameters%CLASS_BTL_EXPENSES
     +                         - BTL_NUC_FUEL_DECOM_LIABILITY
     +                         - ns_class_parameters%BTL_MISC_DEDUCTIONS
     +                         - DD_BTL_CURRENT_TAX_EXPENSE
     +                         - PIOR_LEVEL_BTL_TAX_DEDUCTIONS
       ns_class_master%BTL_STATE_TAXES =
     + ns_class_parameters%STATE_TAX_RATE * BTL_TAXABLE_INCOME
       BTL_INTRA_STATE_TAXES = ns_class_parameters%STATE_TAX_RATE *
     +                                   INTRA_INVESTMENT_INCOME
       ACQ_ATL_STATE_TAXES = STATE_TAXES -
     + ns_class_master%BTL_STATE_TAXES
       ns_class_master%BTL_FEDERAL_TAXES = 
     + ns_class_parameters%FEDERAL_TAX_RATE *
     + (BTL_TAXABLE_INCOME-ns_class_master%BTL_STATE_TAXES)
        BTL_INTRA_FEDERAL_TAXES = ns_class_parameters%FEDERAL_TAX_RATE *
     +                             (INTRA_INVESTMENT_INCOME
     +                              - BTL_INTRA_STATE_TAXES)
               ACQ_ATL_FEDERAL_TAXES = FEDERAL_TAXES -
     + ns_class_master%BTL_FEDERAL_TAXES
      BTL_INCOME_TAXES = ns_class_master%BTL_STATE_TAXES +
     + ns_class_master%BTL_FEDERAL_TAXES
               ELSE
                  ACQ_ATL_STATE_TAXES = STATE_TAXES
                  ACQ_ATL_FEDERAL_TAXES = FEDERAL_TAXES
                  ns_class_master%BTL_STATE_TAXES = 0.
                  ns_class_master%BTL_FEDERAL_TAXES = 0.
                  BTL_INCOME_TAXES = 0.
                  BTL_INTRA_FEDERAL_TAXES = 0.
                  BTL_INTRA_STATE_TAXES = 0.
               ENDIF

            ns_class_assets_results_2%ATL_INCOME_TAXES = 
     + ACQ_ATL_FEDERAL_TAXES + LOCAL_TAXES +
     + ACQ_ATL_STATE_TAXES
            IF(USE_ACTUAL_DEFERRED_TAXES_DR) THEN
               DEFERRED_TAXES_DR = ACTUAL_DEFERRED_TAXES_DR
            ELSE
               DEFERRED_TAXES_DR = DEFERRED_TAXES_DR_TAX_FILE -
     +                           DEF_TAXES_FROM_NOLS_AMT_CREDITS
            ENDIF
            IF(USE_ACTUAL_BTL_DEF_TAXES_DR) THEN
               BTL_DEFERRED_TAXES_DR = ACTUAL_BTL_DEF_TAXES_DR
            ENDIF
            TOTAL_DEFERRED_TAXES_DR = DEFERRED_TAXES_DR
     +                        + BTL_DEFERRED_TAXES_DR
            TOTAL_TAX_EXPENSE = ACQ_OPERATING_REVENUE_TAX
     +                  + acq_OTHER_TAXES
     +                  + Payroll_Taxes
     +                  + CLASS_PROPERTY_TAXES
     +                  + ENVIRONMENTAL_TAX
     +                  + LOCAL_TAXES
     +                  + ACQ_ATL_STATE_TAXES
     +                  + ACQ_ATL_FEDERAL_TAXES
     +                  + DEFERRED_TAXES_CR
     +                  + acq_LTD_PS_DEFERRED_TAX_CR
     +                  + acq_NF_DEFERRED_TAXES_CR
     +                  + DEFERRED_TAXES_DR
     +                  + ITC_USED - ITC_AMORTIZATION
     +                  + STATE_TAX_ON_CAPITAL
     +                  + FEDERAL_TAX_ON_CAPITAL
            ACQ_TOTAL_EXPENSE_AND_TAXES = TOTAL_EXPENSES_B4_TAXES
     +                        + TOTAL_TAX_EXPENSE
            IF(INDEX('Rr',OPERATING_METHOD) /= 0) THEN

       OPERATING_REVENUES(2,CLASS_POS) = ns_class_master%GOPINC +
     + ACQ_TOTAL_EXPENSE_AND_TAXES
            call write_trace_real(file_trace_aca, "7. OR", 
     +           OPERATING_REVENUES(2, CLASS_POS))
               acq_TOTAL_BASE_RATES_REVENUES =
     +       OPERATING_REVENUES(2,CLASS_POS) - acq_NON_BASE_REVENUES
            ELSEIF(INDEX('EC',OPERATING_METHOD) /= 0) THEN
               acq_TOTAL_BASE_RATES_REVENUES =
     +       OPERATING_REVENUES(2,CLASS_POS) - acq_NON_BASE_REVENUES
            ELSE
               OPERATING_REVENUES(2,CLASS_POS) =
     +             acq_TOTAL_BASE_RATES_REVENUES + acq_NON_BASE_REVENUES
            call write_trace_real(file_trace_aca, "8. OR", 
     +           OPERATING_REVENUES(2, CLASS_POS))
            ENDIF
            ACQ_OPERATING_INCOME = OPERATING_REVENUES(2,CLASS_POS) -
     + ACQ_TOTAL_EXPENSE_AND_TAXES
            ACQ_INCOME_B4_INTEREST = ACQ_OPERATING_INCOME
     +                   + ns_class_parameters%DEFERRED_REVENUES
     +                   + ns_class_parameters%CLASS_BTL_REVENUES
     +                   + INVESTMENT_INCOME
     +                   + Mark_to_Market
     +                   + FE_NonCashEarningsNonCorp
     +                   - ns_class_parameters%CLASS_BTL_EXPENSES
     +                   - BTL_DEF_TAXES_CR
     +                   - BTL_DEFERRED_TAXES_DR
     +                   - BTL_INCOME_TAXES
     +                   + ACQ_AFUDC_EQUITY
     +                   - acq_BTL_AMORTIZATION_IN_EXPENSES
            ACQ_INCOME_AFTER_INTEREST = ACQ_INCOME_B4_INTEREST
     +                - ACQ_INTEREST_ON_LONG_TERM_DEBT
     +                - INTEREST_AMORTIZATION
     +                - INTEREST_ON_SHORT_TERM_DEBT(2,CLASS_POS)
     +                + ACQ_AFUDC_BORROWED
            ACQ_NET_PROFIT_OR_LOSS = ACQ_INCOME_AFTER_INTEREST
     +                   +  ns_class_parameters%SUBSIDIARY_INCOME
     +                   -  NET_OF_TAX_EXEXP
c    +                           -  BTL_AMORTIZATION
            IF(IMPA()) THEN
               ACQ_NET_PROFIT_OR_LOSS = ACQ_NET_PROFIT_OR_LOSS
     +                      + BOOK_DEPRECIATION
     +                      + INTEREST_AMORTIZATION
     +                      - ACQ_LONG_TERM_DEBT_RETIREMENTS
            ENDIF
            ACQ_EARNINGS_AVAILABLE_TO_COMMON = ACQ_NET_PROFIT_OR_LOSS
     +                             - PREFERRED_DIVIDENDS
     +                             - acq_PS_PREM_ISSUE_EXP_AMORT

            RETAINED_EARNINGS = ACQ_EARNINGS_AVAILABLE_TO_COMMON
     +                  - ns_class_master%COMMON_DIVIDENDS
            IF(ACCURAL_ACCOUNTING_ACTIVE) THEN
               NEW_FINANCING_ACCRUALS = LTD_LAGGED_INTEREST_PAYMENT
     +                + PS_LAGGED_DIVIDEND_PAYMENT
     +                + INTEREST_ON_SHORT_TERM_DEBT(2,CLASS_POS)
     +                - acq_STD_INTEREST_CASH_PAYMENT
               IF(PARENT_CLASS) THEN
                  IF(acq_AVERAGE_SHARES /= 0.)
     + ns_class_parameters%DIVIDEND_PER_SHARE = 
     + ns_class_master%COMMON_DIVIDENDS/
     + acq_AVERAGE_SHARES

                    COMMON_STOCK_DIV_ACCRUALS = 
     + ns_class_master%COMMON_DIVIDENDS
     + - acq_COMMON_STOCK_CASH_DIVIDENDS

               ELSE
                  COMMON_STOCK_DIV_ACCRUALS = 0.
                  acq_COMMON_STOCK_CASH_DIVIDENDS = 
     + ns_class_master%COMMON_DIVIDENDS
               ENDIF
            ELSE
               NEW_FINANCING_ACCRUALS = 0.
               COMMON_STOCK_DIV_ACCRUALS = 0.
      acq_COMMON_STOCK_CASH_DIVIDENDS = ns_class_master%COMMON_DIVIDENDS
            ENDIF

            IF(globecom_YEAR <= LAST_AVAILABLE_MONTHLY_YEAR .AND.
     +                                MONTHLY_MIDAS_ACTIVE) THEN
               VOID_LOGICAL = RETURN_CURRENT_NOLS_INFO(
     +  acq_STATE_NOL_GENERATED,
     +  acq_STATE_NOLS_USED,
     +  acq_FEDERAL_NOL_GENERATED,
     +  acq_FEDERAL_NOLS_USED)
               IF(USE_ALL_FED_TAX_BENEFITS_NOW) THEN
                  acq_FEDERAL_NOL_GENERATED = 0.
                  acq_FEDERAL_NOLS_USED = 0.
               ENDIF
               CALL SUMMARIZE_4_MONTHLY_NEEDS(CLASS_POS)
               CALL SET_NON_EQUIVALENCED_VARIABLES
       acq_OPERATING_METHOD_ADJUSTMENT = acq_TOTAL_BASE_RATES_REVENUES
     +                               - acq_REFERENCE_BASE_REVENUES
               IF(CLASS_TYPE(CLASS_POS) == REGULATED_GROUP) THEN
                  MIDAS_ISSUED_LTD = LONG_TERM_DEBT_ISSUED
                  MIDAS_ISSUED_PS = PREFERRED_STOCK_ISSUED
               ELSE
                  MIDAS_ISSUED_LTD = LONG_TERM_DEBT_ISSUED
     +                       - ns_class_master%DEBT_FILE_LTD_ISSUED
                  MIDAS_ISSUED_PS = PREFERRED_STOCK_ISSUED
     +                      - ns_class_master%DEBT_FILE_PREFERRED_ISSUED
               ENDIF
               acq_VARIABLE(28) = DEFERRED_TAXES_DR

               CALL MONTHLY_FINANCIAL_ANALYSIS(globecom_YEAR,CLASS,
     + CLASS_POS,
     + CLASS_TYPE(CLASS_POS),
     + CLASS_LEVEL,
     + DONT_TALLY_THIS_CLASS,
     + acq_VARIABLE,ITER,
     + SHORT_TERM_DEBT(1,CLASS_POS),
     + STD_MINIMUM_BAL,
     + ns_class_parameters%MIN_ST_INVESTMENTS,
     + LIQUID_INVESTMENTS(1,CLASS_POS),
     + LTD_ISSUE_YR_INTEREST_BOOKED,
     + PS_ISSUE_YR_DIVIDEND_BOOKED,
     + LTD_ISSUE_YR_INTEREST_PAYMENT,
     + PS_ISSUE_YR_DIVIDEND_PAYMENT,
     + BTL_CASH_EARNINGS,
     + ST_INVESTMENT_EARNINGS,
     + STD_INTEREST_OWED,
     + INTEREST_ON_STD,
     + acq_NON_INCOME_TAXES_ACCRUAL_ADJ,
     + acq_STATE_TAXES_ACCRUAL_ADJ,
     + acq_FEDERAL_TAXES_ACCRUAL_ADJ,
     + MIDAS_ISSUED_LTD,
     + MIDAS_ISSUED_PS,
     + CUSTOMER_DEPOSITS_BAL(1,CLASS_POS),
     + ACQ_SHORT_TERM_DEBT_ISSUED,
     + MONTHLY_COMMON_DIVIDENDS,
     + CPL_FUEL_REVENUE_RECEIVABLE,
     + LONG_TERM_INVESTMENTS(CLASS_POS),
     + LT_INVESTMENTS_EARNINGS,
     + acq_CASH_2_LT_INVESTMENTS,
     + STI_CHANGE_IN_CASH,
     + CATAWBA_RECEIVABLES,
     + CATAWBA_PAYABLES,
     + PARENT_TAXES_PAID,
     + ns_class_parameters%MAX_SHORT_TERM_INVESTMENT,
     +     SUB_FED_TAX_PAYMENTS_2_PARENT,
     +     SUB_STATE_TAX_PAYMENTS_2_PARENT,
     +     WCCUM(1,CLASS_POS)
     +   + LINEC(1,CLASS_POS), !ASSETS NEC BOY
     +     LINEC(1,CLASS_POS), !ASSETS NEC BOY
     +     acq_COMMON_STOCK_CASH_DIVIDENDS,
     +     WCCUM(2,CLASS_POS)
     +  + LINEC(2,CLASS_POS), !ASSETS NEC EOY
     +     LINEC(2,CLASS_POS), !ASSETS NEC EOY
     +     NET_UTILITY_PLANT(2,CLASS_POS),
     +     ACQ_LONG_TERM_DEBT_RETIREMENTS,
     +     ACQ_PREFERRED_STOCK_RETIREMENTS,
     +     LONG_TERM_DEBT(1,CLASS_POS),
     +     PREFERRED_STOCK(1,CLASS_POS),
     +     acq_OTHER_TAXES,
     +                       ACQ_OPERATING_REVENUE_TAX,
     +                       NUC_DECOM_FUND_BAL(1,CLASS_POS),
     +                       acq_NEW_SUB_INVESTMENT,
     +                       acq_goodwill_of_new_sub_investment,
     +                       acq_fuel_expense,
     +                       acq_variable_expense,
     +                       ACQ_FIXED_EXPENSE,
     +                       CASH_REVENUES_RECEIVED,
     +                       CASH_EXPENSES_PAID,
     +                       INVESTMENTS_BOY)


                  acq_VARIABLE_EXPENSE_PLUS_AMORT = acq_variable_expense
     +                                  + acq_VARIABLE_OM_AMORT
                  acq_FUEL_EXPENSE_PLUS_AMORT = acq_fuel_expense
     +                              + acq_EXPENSING_FUEL_INVENTORY
               IF(CPL_IS_ACTIVE) THEN

       ns_class_parameters%STDMIN = MIN(ns_class_parameters%STD_MAX,
     +  SHORT_TERM_DEBT(1,CLASS_POS)
     +                             + ACQ_SHORT_TERM_DEBT_ISSUED)
                  LONG_TERM_DEBT_ISSUED = MIDAS_ISSUED_LTD
     +                            + ns_class_master%DEBT_FILE_LTD_ISSUED
               ELSE
        ns_class_parameters%STDMIN = MIN(
     + ns_class_parameters%STD_MAX,SHORT_TERM_DEBT(1,CLASS_POS)
     +  + ACQ_SHORT_TERM_DEBT_ISSUED)
               ENDIF



               TAXES_ACCRUAL_ADJ = acq_NON_INCOME_TAXES_ACCRUAL_ADJ
     +                     + acq_STATE_TAXES_ACCRUAL_ADJ
     +                     + acq_FEDERAL_TAXES_ACCRUAL_ADJ
               INTEREST_ON_SHORT_TERM_DEBT(2,CLASS_POS) =
     +                           INTEREST_ON_STD
     +                           + acq_NOTES_PAYABLE_INTEREST
               acq_STD_INTEREST_CASH_PAYMENT = STD_INTEREST_OWED
               IF(ITER == 1) THEN
                  CALL ANNUAL_PRODUCTION_REC_PAYABLES(
     +                         PRODUCTION_CHANGE_IN_RECEIVABLES,
     + acq_PRODUCTION_CHANGE_IN_PAYABLES)
                  acq_CHANGE_IN_ACCOUNTS_RECEIVABLE =
     +    acq_CHANGE_IN_ACCOUNTS_RECEIVABLE
     +    + PRODUCTION_CHANGE_IN_RECEIVABLES
     +    + CPL_FUEL_REVENUE_RECEIVABLE
     +    + CATAWBA_RECEIVABLES
     +    - CASH_REVENUES_RECEIVED
                  acq_CHANGE_IN_ACCOUNTS_PAYABLE =
     +  acq_CHANGE_IN_ACCOUNTS_PAYABLE
     +  + CATAWBA_PAYABLES
     +  + acq_PRODUCTION_CHANGE_IN_PAYABLES
     +  - CASH_EXPENSES_PAID
       acq_CASH_TIMING_ADJUSTMENTS = acq_CASH_TIMING_ADJUSTMENTS
     +   + CATAWBA_PAYABLES
     +   + acq_PRODUCTION_CHANGE_IN_PAYABLES
     +   - CASH_EXPENSES_PAID
     +   - PRODUCTION_CHANGE_IN_RECEIVABLES
     +   - CPL_FUEL_REVENUE_RECEIVABLE
     +   - CATAWBA_RECEIVABLES
     +   + CASH_REVENUES_RECEIVED
               ENDIF
            ELSE
               TAXES_ACCRUAL_ADJ = 0.
               acq_STATE_TAXES_ACCRUAL_ADJ = 0.
               acq_FEDERAL_TAXES_ACCRUAL_ADJ = 0.
               BTL_CASH_EARNINGS = INVESTMENT_INCOME_RECEIVABLE
               acq_COMMON_STOCK_CASH_DIVIDENDS = 
     + ns_class_master%COMMON_DIVIDENDS
               IF(PARENT_CLASS) THEN
                  PARENT_TAXES_PAID = FEDERAL_TAXES
               ELSE
                  PARENT_TAXES_PAID = 0.
               ENDIF
               acq_CHANGE_IN_ACCOUNTS_RECEIVABLE =
     +                         OPREV_IN_ACCTS_RECEIVABLE/100.*
     +                           OPERATING_REVENUES(2,CLASS_POS)
     +                         + ADDEN_ACCOUNTS_RECEIVABLE
               ANNUAL_INVOICES_RECEIVED = acq_TOTAL_CASH_EXPENSES
     + + ns_class_parameters%CLASS_BTL_EXPENSES


               acq_NON_INCOME_TAXES_ACCRUAL_ADJ = 0.
               IF(GreatRiver()) THEN
               
                  acq_NON_INCOME_TAXES_ACCRUAL_ADJ =
     +                      .75*(CLASS_PROPERTY_TAXES
     +                          + STATE_TAX_ON_CAPITAL
     +                          + ACQ_OPERATING_REVENUE_TAX
     +                          + Payroll_Taxes
     +                          + acq_OTHER_TAXES
     +                          + FEDERAL_TAX_ON_CAPITAL
     +                          - GRE_OTH_PROP_TAXES(CLASS_POS))
               ENDIF
       acq_CHANGE_IN_ACCOUNTS_PAYABLE = EXP_IN_ACCTS_PAYABLE/100. *
     +                                  ANNUAL_INVOICES_RECEIVED
     +                            + ADDEN_ACCOUNTS_PAYABLE
        acq_CASH_TIMING_ADJUSTMENTS = acq_CHANGE_IN_ACCOUNTS_PAYABLE
     +  + acq_NON_INCOME_TAXES_ACCRUAL_ADJ
     +  - acq_CHANGE_IN_ACCOUNTS_RECEIVABLE
            ENDIF
       call write_trace_int2(file_trace_aca, "YEAR", globecom_year)
            call write_trace_int2(file_trace_aca, "BASE_YEAR", 
     + get_BASE_YEAR())
            
            call write_trace_int2(file_trace_aca, 
     +           "_Year_", get_BASE_YEAR()+globecom_year)
            call write_trace_real4(file_trace_aca, "APChange", 
     +           acq_CHANGE_IN_ACCOUNTS_PAYABLE)
            call write_trace_real4(file_trace_aca, "CTAdj.",  
     +           acq_CASH_TIMING_ADJUSTMENTS)
            call write_trace_int2(file_trace_aca, "ITER", ITER)
            call write_trace_int2(file_trace_aca, "MAX ITER", MAX_ITER)
            IF(ITER > MAX_ITER) THEN
               WRITE(4,'(I5,A,I3,A,3(A,L1),2A)')
     +             get_BASE_YEAR()+globecom_YEAR,
     +             ' End Point ',gc_end_point,
     +             ' FINANCIALS DID NOT CONVERGE FOR ',
     +             ' Income ', INCOME_CONVERGED,
     +             ' Dividends ',DIVIDENDS_CONVERGED_STATE(),
     +             ' Income Taxes ',TAXES_CONVERGED_STATE(),
     +             '    Class Name: ',CLASS_NAME(CLASS_POS)
               EXIT ! ELIMINATE THE HALF CYCLE
            ENDIF
            ITER = ITER + 1
         ENDDO
C ENDOF CALCULATION LOOP

C TRACKING DEFERRED TAXES DR

         GRE_OTH_PROP_TAXES(CLASS_POS) = CLASS_PROPERTY_TAXES
     +                           + STATE_TAX_ON_CAPITAL
     +                           + ACQ_OPERATING_REVENUE_TAX
     +                           + Payroll_Taxes
     +                           + acq_OTHER_TAXES
     +                           + FEDERAL_TAX_ON_CAPITAL
         IF(UTILITY_TYPE() == 'T') THEN
            OPERATING_REVENUE_TAX_LAGGED_BASIS(CLASS_POS) =
     +                                    LAST_REVENUE_TAX_BASIS
         ENDIF
         CALL SAVE_LAG_PRODUCTION_CASH()
         IF(MODEL_ISSUED_DEBT_REPORT) THEN ! ()) THEN
            CALL CLASS_FINANCE_DETAIL_RPT(globecom_YEAR,
     +                            CLASS,
     +                            CLASS_NAME(CLASS_POS),
     +                            MORTGAGE_DEBT)
         ENDIF
         acq_AFILIATE_PURCHASE_POWER_EXPENSE =
     + acq_AFILIATE_PURCHASE_POWER_EXPENSE
     + + TF_OTHER_PURCHASE_POWER_EXPENSE
     + + RC_OTHER_PURCHASE_POWER_EXPENSE
         acq_FE_EXP_PURCHASE_POWER_EXPENSE =
     + acq_OTHER_PURCHASE_POWER_EXPENSE
     +  - acq_AFILIATE_PURCHASE_POWER_EXPENSE
         IF(.NOT. USE_ACTUAL_DEFERRED_TAXES_DR) THEN
            acq_DEF_TAXES_FROM_FED_AMT_CREDITS = acq_AMT_CREDITS_CREATED
     +                               - acq_AMT_CREDITS_USED
            acq_DEF_TAX_ADDEND_FROM_TAX_FILE =
     + DEFERRED_TAXES_DR_TAX_FILE
         ENDIF

         ACQ_LONG_TERM_DEBT_RETIREMENTS = ACQ_LONG_TERM_DEBT_RETIREMENTS
     +                        + MTG_DEBT_RETIREMENTS
         acq_GRE_DEBT_RETIREMENTS = ACQ_LONG_TERM_DEBT_RETIREMENTS
         LTD_PS_RETIREMENTS = ACQ_LONG_TERM_DEBT_RETIREMENTS
     +                + ACQ_PREFERRED_STOCK_RETIREMENTS
         acq_ADJ_2_STATE_TAXES = acq_ADJ_2_STATE_TAXES
     +               + CALCULATED_2_ACTUAL_STATE_ADJ
         acq_ADJ_2_FEDERAL_TAXES = acq_ADJ_2_FEDERAL_TAXES
     +                 + CALCULATED_2_ACTUAL_FED_ADJ
         DEF_ITC_BALANCE(2,CLASS_POS) = DEF_ITC_BALANCE(1,CLASS_POS)
     +                          + ITC_USED
     +                          - ITC_AMORTIZATION
     +                          + ADJUSTMENT_2_DEFERRED_ITCS_BAL
         ACCOUNTS_RECEIVABLE_BOY = ACCOUNTS_RECEIVABLE(CLASS_POS)
         ACCOUNTS_RECEIVABLE(CLASS_POS) = ACCOUNTS_RECEIVABLE(CLASS_POS)
     +                           + acq_CHANGE_IN_ACCOUNTS_RECEIVABLE
     +                           + acq_UNBILLED_REVENUES
     +                           + INVESTMENT_INCOME_RECEIVABLE
     +                           - BTL_CASH_EARNINGS
         acq_CHANGE_INVEST_INCOME_RECIVABLE =
     + INVESTMENT_INCOME_RECEIVABLE - BTL_CASH_EARNINGS
         acq_CASH_TIMING_ADJUSTMENTS = acq_CASH_TIMING_ADJUSTMENTS
     +                     - acq_UNBILLED_REVENUES
     +                     - INVESTMENT_INCOME_RECEIVABLE
     +                     + BTL_CASH_EARNINGS
         IF(globecom_YEAR <= LAST_AVAILABLE_MONTHLY_YEAR) THEN
            acq_ANNUAL_CASH_FLOW_TIMING_ADJUSTMENTS =
     + acq_CASH_TIMING_ADJUSTMENTS
         ELSE
            acq_ANNUAL_CASH_FLOW_TIMING_ADJUSTMENTS =
     + acq_CASH_TIMING_ADJUSTMENTS

         ENDIF
         acq_INCOME_TAX_TIMING_ADJS = acq_STATE_TAXES_ACCRUAL_ADJ
     +                    + acq_FEDERAL_TAXES_ACCRUAL_ADJ
     +                    + acq_NON_INCOME_TAXES_ACCRUAL_ADJ
         acq_LTD_PS_ISSUE_EXPENSES = DEBT_FILE_ISSUE_EXPENSE
         acq_LTD_INTEREST_CASH_PAYMENTS = acq_LTD_INTEREST_CASH_PAYMENTS
     +                        + LTD_ISSUE_YR_INTEREST_PAYMENT
         acq_PS_DIVIDEND_CASH_PAYMENTS = acq_PS_DIVIDEND_CASH_PAYMENTS
     +                       + PS_ISSUE_YR_DIVIDEND_PAYMENT
         ACCOUNTS_PAYABLE_BOY = ACCOUNTS_PAYABLE(CLASS_POS)
         ACCOUNTS_PAYABLE(CLASS_POS) = ACCOUNTS_PAYABLE(CLASS_POS)
     +                 + acq_CHANGE_IN_ACCOUNTS_PAYABLE     ! 406
     +                         + INTEREST_DIVIDENDS_ACCRUDED
     +     + NEW_FINANCING_ACCRUALS         ! 442 THESE COMBINED
     +                         + COMMON_STOCK_DIV_ACCRUALS
     +     + acq_NON_INCOME_TAXES_ACCRUAL_ADJ   ! 445
     +   + acq_STATE_TAXES_ACCRUAL_ADJ        ! 443
     + + acq_FEDERAL_TAXES_ACCRUAL_ADJ      ! 444

         acq_CHANGE_INTEREST_DIVS_ACCRUED = INTEREST_DIVIDENDS_ACCRUDED
     +                          + NEW_FINANCING_ACCRUALS
     +                          + COMMON_STOCK_DIV_ACCRUALS
         IF(SUBSIDIARY_CLASS) THEN
            INTRA_TAXES_PAYABLE = INTRA_TAXES_PAYABLE
     +                    + acq_STATE_TAXES_ACCRUAL_ADJ
     +                    + acq_FEDERAL_TAXES_ACCRUAL_ADJ
            SUB_NON_INCOME_TAX_ACCRUALS = SUB_NON_INCOME_TAX_ACCRUALS
     +  + acq_NON_INCOME_TAXES_ACCRUAL_ADJ
         ENDIF
         IF(PARENT_CLASS) THEN

            SUB_TAXES_ACCRUAL = acq_SUBSIDARY_VARIABLES(408)
            CONCOLIDATED_INCOME_TAX_ACCRUAL = CONSOLIDATED_INCOME_TAXES
     +                          - CONSOLIDATED_INCOME_TAXES_PAID
            CONSOLID_FED_INCOME_TAX_ACCRUAL = CONSOLIDATED_FEDERAL_TAXES
     +                         - CONSOLIDATED_FEDERAL_TAXES_PAID
            CONSOLID_STATE_INC_TAX_ACCRUAL = CONSOLIDATED_STATE_TAXES
     +                           - CONSOLIDATED_STATE_TAXES_PAID
            CONSOLID_NON_INCOME_TAX_ACCRUAL=SUB_NON_INCOME_TAX_ACCRUALS
     + + acq_NON_INCOME_TAXES_ACCRUAL_ADJ
            PARENT_STATE_TAXES_ACCRUAL_ADJ = acq_STATE_TAXES_ACCRUAL_ADJ
          PARENT_FEDERAL_TAX_ACCRUAL_ADJ = acq_FEDERAL_TAXES_ACCRUAL_ADJ
            PARENT_NON_INCOME_TAX_ACCRL_ADJ =
     + acq_NON_INCOME_TAXES_ACCRUAL_ADJ

            ACCOUNTS_PAYABLE(CLASS_POS) = ACCOUNTS_PAYABLE(CLASS_POS)

     + + acq_FUNDS_CONSOLIDATING_ADJUSTMENT
     + + acq_INCOME_TAX_PAYABLE_4_AFFILIATES

            ACCOUNTS_RECEIVABLE(CLASS_POS) =
     +                            ACCOUNTS_RECEIVABLE(CLASS_POS)
     +                            + INTRA_TAXES_PAYABLE
            acq_INTRA_TAXES_PAYABLE_OUTPUT = INTRA_TAXES_PAYABLE
            CONSOLIDATED_FED_TAX_ADJ = CONSOLIDATED_FED_TAX_ADJ
     +                         + CON_2_ACTUAL_FEDERAL_ADJ
            CONSOLIDATED_STATE_TAX_ADJ = CONSOLIDATED_STATE_TAX_ADJ
     +                           + CON_2_ACTUAL_STATE_ADJ
         ELSE
            FEDERAL_TAX_EXCLUSION_ADJ = FEDERAL_TAX_EXCLUSION_ADJ
     +                          + acq_FEDERAL_TAXES_ACCRUAL_ADJ
         ENDIF
         IF(USE_ACTUAL_DEFERRED_TAXES_DR) THEN
            DEFERRED_TAXES_DR = ACTUAL_DEFERRED_TAXES_DR
         ELSE
            DEFERRED_TAXES_DR = DEFERRED_TAXES_DR_TAX_FILE -
     +                           DEF_TAXES_FROM_NOLS_AMT_CREDITS
         ENDIF
       acq_UNUSED_FEDERAL_TAX_CREDITS =  (acq_FED_TAX_CREDIT_PASSED_UP +
     +                               acq_SEC_42_CREDITS_PASSED_UP) -
     +                         (acq_FED_CREDITS_USED +
     +                                acq_SEC_42_CREDITS_USED)

         acq_PS_DIVIDEND_PLUS_AMORT = PREFERRED_DIVIDENDS +
     +                                   acq_PS_PREM_ISSUE_EXP_AMORT
         EXCLUDED_REVENUE_TAX_BASIS(CLASS_LEVEL) = 0.
         EXCLUDED_REVENUE_TAX_BASIS_A(CLASS_LEVEL) = 0.
         EXCLUDED_REVENUE_TAX_BASIS_B(CLASS_LEVEL) = 0.
         EXCLUDED_REVENUE_TAX(CLASS_LEVEL) = 0.
         EXCLUDED_OTHER_TAXES_REV(CLASS_LEVEL) = 0.
         EXCLUDED_OTHER_TAXES_EXP(CLASS_LEVEL) = 0.
         EXCLUDED_OTHER_TAXES(CLASS_LEVEL) = 0.
         EXCLUDE_CAPITAL_TAXES_STATE(CLASS_LEVEL) = 0.
         EXCLUDE_CAPITAL_TAXES_FED(CLASS_LEVEL) = 0.
         EXCLUDE_CAPITAL_TAX_STATE_BASIS(CLASS_LEVEL) = 0.
         EXCLUDE_CAPITAL_TAX_FED_BASIS(CLASS_LEVEL) = 0.

         acq_ATL_LEASE_AMORT_EXPENSE = acq_ATL_LEASE_AMORTIZATION

         R_TEMP = CLOSE_CLASS_STATE_TAX_INFO(CLASS,ASSET_YR,
     +                           USE_ALL_STATE_TAX_BENEFITS_NOW)
         R_TEMP = CLOSE_CLASS_FED_TAX_INFO(CLASS,ASSET_YR,
     +                             USE_ALL_FED_TAX_BENEFITS_NOW)
         ns_class_master%FED_INCOME_TAX_DEDUCTIONS = 
     + ns_class_master%FED_INCOME_TAX_DEDUCTIONS +
     + ns_class_parameters%FED_DEDUC_PERCT_OF_TIB4DEDUC/100.*
     +                                    ACQ_TAXABLE_INCOME
         VOID_REAL = CLOSE_FED_CREDIT(CLASS,ASSET_YR,
     +                        acq_FED_TAX_CREDIT_PASSED_UP,
     +                        AVAILCREDIT(1,CLASS_POS))
         VOID_REAL = CLOSE_STATE_CREDIT(CLASS,ASSET_YR,
     +                          acq_STATE_TAX_CREDIT_PASSED_UP)
         ns_class_master%STATE_INCOME_TAX_DEDUCTIONS = 
     + ns_class_master%STATE_INCOME_TAX_DEDUCTIONS +
     + ns_class_parameters%STATE_DEDUC_PERCT_OF_TIB4DEDUC/100.*
     + ACQ_TAXABLE_INCOME
         VOID_LOGICAL = RETURN_NOLS_INFO(acq_STATE_NOL_GENERATED,
     +                           acq_STATE_NOLS_USED,
     +                           acq_FEDERAL_NOL_GENERATED,
     +                           acq_FEDERAL_NOLS_USED)
         IF(USE_ALL_FED_TAX_BENEFITS_NOW) THEN
            acq_FEDERAL_NOL_GENERATED = 0.
            acq_FEDERAL_NOLS_USED = 0.
         ENDIF
         ACQ_TOTAL_CAPITAL_SERVICE = INTEREST + PREFERRED_DIVIDENDS +
     +                   ns_class_master%COMMON_DIVIDENDS

c 9/28/98 fix which still has common dividends wrong.

         ACQ_STD_INTEREST = INTEREST_ON_SHORT_TERM_DEBT(2,CLASS_POS)
         ACQ_TOTAL_CAPITAL_SERVICE = acq_LTD_INTEREST_CASH_PAYMENTS
     +                   + acq_STD_INTEREST_CASH_PAYMENT
     +                   + acq_PS_DIVIDEND_CASH_PAYMENTS
     +                   + acq_COMMON_STOCK_CASH_DIVIDENDS

      ACQ_LTD_INTEREST_AND_AMORTIZATION = ACQ_INTEREST_ON_LONG_TERM_DEBT
     +                           + INTEREST_AMORTIZATION
         IF(SALT_RIVER_PROJECT()) THEN
            ! ^^ place holder for LTI earnings stays in the fund

            acq_CASH_2_LT_INVESTMENTS = acq_CASH_2_LT_INVESTMENTS
     +                      + LT_INVESTMENTS_EARNINGS
         ENDIF
         LONG_TERM_INVESTMENTS(CLASS_POS) =
     +                        LONG_TERM_INVESTMENTS(CLASS_POS) +
     +                        acq_CASH_2_LT_INVESTMENTS

         OTHER_LT_LIABILITY(2,CLASS_POS) = 
     +                         OTHER_LT_LIABILITY(1,CLASS_POS)
     +                         + acq_CLASS_LEASED_NFCE
     +                         - acq_NUCLEAR_FUEL_LEASE_PAYMENTS
     + + ns_class_parameters%CAPITIALIZED_LEASE_ADDITIONS
     + -  (ns_class_parameters%ATL_LEASE_PAYMENTS +
     + ns_class_parameters%BTL_LEASE_PAYMENTS)
     +                        + LT_LIAB_BAL_ADJ
         CUMULATIVE_CLASS_OTH_LIAB_SALE_ASSETS(CLASS_POS) =
     +          CUMULATIVE_CLASS_OTH_LIAB_SALE_ASSETS(CLASS_POS)
     +          + CLASS_OTH_LIAB_SALE_ASSETS
         DEFERRED_GAIN_FROM_SALES(2,CLASS_POS) =
     +        DEFERRED_GAIN_FROM_SALES(2,CLASS_POS)
     +        + CUMULATIVE_CLASS_OTH_LIAB_SALE_ASSETS(CLASS_POS)

C DECOMMISSIONING LIABILITY
         BOY_NUC_DECOM_FUND_LIABILITY =
     +                       NUC_DECOM_FUND_LIABILITY(CLASS_POS)
         IF(SALT_RIVER_PROJECT()) THEN
            NUC_DECOM_FUND_LIABILITY(CLASS_POS) =
     +   NUC_DECOM_FUND_LIABILITY(CLASS_POS)
     + + BTL_NUC_FUEL_DECOM_LIABILITY
     + + OCI_NUCL_FUND_RETURN
     + + ns_class_parameters%CHANGE_2_DECOMMISSIONING_LIAB
         ELSE
            NUC_DECOM_FUND_LIABILITY(CLASS_POS) =
     +    NUC_DECOM_FUND_LIABILITY(CLASS_POS)
     +  + ACQ_NUC_DECOMMISSIONING_COST
     +  + BTL_NUC_FUEL_DECOM_LIABILITY
     +  ! keeps the balance sheet balanced
     + + acq_NET_OF_TAX_NUCL_FUND_RETURN
     + + ns_class_parameters%CHANGE_2_DECOMMISSIONING_LIAB
         ENDIF
         IF(PARENT_CLASS) THEN
            CONSOLID_AVAILABLE_AMT_CREDITS =
     +                    MAX(0.,CONSOLID_AVAILABLE_AMT_CREDITS+
     +                           CONSOLID_AMT_CREDITS_CREATED-
     +                           CONSOLID_AMT_CREDITS_USED)
            IF(globecom_YEAR <= LAST_AVAILABLE_MONTHLY_YEAR .AND.
     +                                MONTHLY_MIDAS_ACTIVE) THEN
            ELSE
               PARENT_TAXES_PAID =  FEDERAL_TAXES
            ENDIF

            acq_INCOME_TAX_PAYABLE_4_AFFILIATES =
     +                           CONSOLIDATED_TAX_LIB_ADJUSTMENT
         ELSE
            PARENT_TAXES_PAID = 0.
         ENDIF

C INCOME STATEMENT MODIFICATIONS

C CASH FLOW AND ISSUED STATEMENT

         IF(globecom_YEAR <= LAST_AVAILABLE_MONTHLY_YEAR .AND.
     +                                MONTHLY_MIDAS_ACTIVE) THEN
            SHORT_TERM_DEBT(2,CLASS_POS) = ACQ_SHORT_TERM_DEBT_ISSUED +
     +                              SHORT_TERM_DEBT(1,CLASS_POS)
         ELSE
            ACQ_SHORT_TERM_DEBT_ISSUED = SHORT_TERM_DEBT(2,CLASS_POS) -
     +                              SHORT_TERM_DEBT(1,CLASS_POS)
         ENDIF

C BALANCE SHEET UPDATE


         IF(CLASS_TYPE(CLASS_POS) == SUBSIDIARY) THEN
            SUB_COMMON_BUYBACK_CS_ADJ = SUB_COMMON_BUYBACK_CS_ADJ
     + + ns_class_master%COMMON_STOCK_BOUGHT
     + + CS_BUYBACK_ADJ_RETAINED_ERNING
            SUB_COMMON_BUYBACK_RE_ADJ = SUB_COMMON_BUYBACK_RE_ADJ
     +      - CS_BUYBACK_ADJ_RETAINED_ERNING ! THIS IS A NEGATIVE NUMBER
         ENDIF
         REARNC(2,CLASS_POS) = REARNC(1,CLASS_POS)
     + + RETAINED_EARNINGS
     + + RETAINED_EARNINGS_ADJ
     + + CS_BUYBACK_ADJ_RETAINED_ERNING
         COMMON_STOCK(2,CLASS_POS) = COMMON_STOCK(1,CLASS_POS)
     +  + ns_class_master%COMMON_STOCK_ISSUED
     +  - ns_class_master%COMMON_STOCK_BOUGHT
     +  + PAID_IN_CAPITAL
     +                       - CS_BUYBACK_ADJ_RETAINED_ERNING
         COMMON_STOCK(2,CLASS_POS) = COMMON_STOCK(1,CLASS_POS)
     +                       + ns_class_master%COMMON_STOCK_ISSUED
     +                       + PAID_IN_CAPITAL
     +                       - CS_BUYBACK_ADJ_RETAINED_ERNING
         COMMON_EQUITY(2,CLASS_POS) = REARNC(2,CLASS_POS) +
     +                              COMMON_STOCK(2,CLASS_POS)
         ACQ_AVERAGE_EQUITY = (COMMON_EQUITY(1,CLASS_POS) +
     +                            COMMON_EQUITY(2,CLASS_POS))/2.
         IF(ACQ_AVERAGE_EQUITY /= 0.) THEN
          ACQ_RETURN_ON_EQUITY = 100.* ACQ_EARNINGS_AVAILABLE_TO_COMMON/
     +                              ACQ_AVERAGE_EQUITY
         ELSE
            ACQ_RETURN_ON_EQUITY = NOT_AVAIL
         ENDIF

         IF((PARENT_CLASS .AND. ACQ_EARNINGS_AVAILABLE_TO_COMMON /= 0.)
     + .OR. ACQ_EARNINGS_AVAILABLE_TO_COMMON > 0.) THEN
           ACQ_DIVIDEND_PAYOUT = 100.* ns_class_master%COMMON_DIVIDENDS/
     +                    ACQ_EARNINGS_AVAILABLE_TO_COMMON
         ENDIF

            IF(acq_AVERAGE_SHARES /= 0.) THEN
               ns_class_parameters%DIVIDEND_PER_SHARE = 
     + ns_class_master%COMMON_DIVIDENDS/acq_AVERAGE_SHARES
             ACQ_EARNINGS_PER_SHARE = ACQ_EARNINGS_AVAILABLE_TO_COMMON/
     + acq_AVERAGE_SHARES
            ELSE
               ns_class_parameters%DIVIDEND_PER_SHARE = 0. ! NOT_AVAIL
               ACQ_EARNINGS_PER_SHARE = 0. ! NOT_AVAIL
            ENDIF
            IF(PREFERRED_STOCK_ADDENDUM(CLASS_POS) > 0.) THEN
               DIVIDEND_PS = PREFERRED_STOCK_ADDENDUM(CLASS_POS) *
     +                         WEIGHTED_CLASS_PS_COST(CLASS_POS)
               PSDIV(YR,CLASS_POS) = PSDIV(YR,CLASS_POS) + DIVIDEND_PS
               ANN_PS_DIV(YR,CLASS_POS) = ANN_PS_DIV(YR,CLASS_POS)
     +                                             + DIVIDEND_PS
               ANNINT(YR,CLASS_POS) = ANNINT(YR,CLASS_POS) + DIVIDEND_PS
            ENDIF
            IF(LONG_TERM_DEBT_ADDENDUM(CLASS_POS) > 0.) THEN
               INTEREST_LTD = LONG_TERM_DEBT_ADDENDUM(CLASS_POS) *
     +                        WEIGHTED_CLASS_LTD_COST(CLASS_POS)
               LTDINT(YR,CLASS_POS) = LTDINT(YR,CLASS_POS)+INTEREST_LTD
               ANN_LTD_INT(YR,CLASS_POS) = ANN_LTD_INT(YR,CLASS_POS)
     +                                            + INTEREST_LTD
               ANNINT(YR,CLASS_POS) = ANNINT(YR,CLASS_POS)+INTEREST_LTD
            ENDIF
            CALL CLASS_INTEREST_PS_DIVIDENDS(YR,CLASS,
     +                               MORTGAGE_DEBT,
     +                               LTDINT(0,CLASS_POS),
     +                               LTDRET(0,CLASS_POS),
     +                               PSDIV(0,CLASS_POS),
     +                               PSRED(0,CLASS_POS),
     +                               ANNINT(0,CLASS_POS),
     +                               ANN_PS_DIV(0,CLASS_POS),
     +                               ANN_LTD_INT(0,CLASS_POS))

            PREFERRED_STOCK(2,CLASS_POS)= PREFERRED_STOCK(1,CLASS_POS)+
     +                            PREFERRED_STOCK_ISSUED -
     +                         ACQ_PREFERRED_STOCK_RETIREMENTS -
     +                            PS_PREM_AMORT
            LONG_TERM_DEBT(2,CLASS_POS) = LONG_TERM_DEBT(1,CLASS_POS)
     +                          + LONG_TERM_DEBT_ISSUED
     +                          - ACQ_LONG_TERM_DEBT_RETIREMENTS
     +                          - LTD_PREM_AMORT
            IF(COMMON_SHARES(2,CLASS_POS) == 0.) THEN
               BOOK_VALUE_STOCK(2,CLASS_POS)=COMMON_EQUITY(2,CLASS_POS)
            ELSE
               BOOK_VALUE_STOCK(2,CLASS_POS)=COMMON_EQUITY(2,CLASS_POS)/
     +                                COMMON_SHARES(2,CLASS_POS)
            ENDIF
            STD_RATE(2,CLASS_POS) = 0.0
            IF(SHORT_TERM_DEBT(2,CLASS_POS) /= 0.)
     +        STD_RATE(2,CLASS_POS) =
     +                 INTEREST_ON_SHORT_TERM_DEBT(2,CLASS_POS)/
     +                         SHORT_TERM_DEBT(2,CLASS_POS)
      def_taxes_dr_is_contra = .FALSE.
            if(def_taxes_dr_is_contra .OR. BANGOR()) then
               DEF_TAX_CR_BALANCE(2,CLASS_POS) = DEFERRED_TAXES_DR
     +                         + DEF_TAX_CR_BALANCE(2,CLASS_POS)
     +                         - ADJ_DEFERRED_TAX_DR_BALANCE
            else
               CUMTXNORM(2,CLASS_POS) = CUMTXNORM(1,CLASS_POS)
     +                          - DEFERRED_TAXES_DR
     +                          - BTL_DEFERRED_TAXES_DR
     +                          + ADJ_DEFERRED_TAX_DR_BALANCE
            endif

C RATIOS

            IF(ACQ_ASSET_CLASS_RATE_BASE /= 0.) THEN
               ACQ_RETURN_ON_RATEBASE = 100.*ACQ_OPERATING_INCOME/
     +                                ACQ_ASSET_CLASS_RATE_BASE
            ELSE

               ACQ_RETURN_ON_RATEBASE = NOT_AVAIL
            ENDIF

C WRITE INCOME STATEMENT RESULTS

            BASE_REVENUE(1,CLASS_POS) = BASE_REVENUE(2,CLASS_POS)
            ADJ_CLAUSE_REVENUE(1,CLASS_POS) =
     +                           ADJ_CLAUSE_REVENUE(2,CLASS_POS)
            IF(INDEX('Rr',OPERATING_METHOD) /= 0) THEN
               acq_TOTAL_BASE_RATES_REVENUES =
     +       OPERATING_REVENUES(2,CLASS_POS) - acq_NON_BASE_REVENUES

            ELSEIF(INDEX('EC',OPERATING_METHOD) /= 0) THEN
               acq_TOTAL_BASE_RATES_REVENUES =
     +       OPERATING_REVENUES(2,CLASS_POS) - acq_NON_BASE_REVENUES
            ENDIF
            IF(ODEC() .AND. SUBSIDIARY_CLASS .AND.
     +                CLASS-1 == ODEC_NA3_ID .AND.
     +                         .NOT. DONT_TALLY_THIS_CLASS) THEN
               ODEC_NA3_PURCHASE_EXPENSE = acq_TOTAL_BASE_RATES_REVENUES
               ODEC_NA3_TIER_RETURN = 
     + (ns_class_parameters%MIN_COV_RATIO -1.) * INTEREST
               acq_BULK_POWER_REVENUES = acq_BULK_POWER_REVENUES
     +                       + ODEC_NA3_PURCHASE_EXPENSE
               acq_TOTAL_BASE_RATES_REVENUES = 0.
               ODEC_NA3_ACTIVE = .TRUE.
            ENDIF
            acq_OPERATING_METHOD_ADJUSTMENT =
     + acq_TOTAL_BASE_RATES_REVENUES -
     +                            acq_REFERENCE_BASE_REVENUES
            CUM_CAPTURED_OPT_METHOD_REVS(CLASS_POS) =
     +                   CUM_CAPTURED_OPT_METHOD_REVS(CLASS_POS)
     +                   + acq_OPERATING_METHOD_ADJUSTMENT

           acq_REFERENCE_BASE_REVENUES = acq_TOTAL_BASE_RATES_REVENUES -
     +                       (acq_RESIDENTIAL_REVENUES
     +                        + acq_UNBILLED_REVENUES
     +                        + acq_COMMERCIAL_REVENUES
     +                        + acq_INDUSTRIAL_REVENUES
     +                        + acq_LIGHTING_REVENUES
     +                        + acq_GOVERNMENT_SALES_REVENUE
     +                        + acq_OPERATING_METHOD_ROLLUP
     +                        + acq_WVPA_MEMBER_ACCRUED_REVENUES
     +                        + acq_REGULATED_REVENUES_11
     +                        + acq_REGULATED_REVENUES_12
     +                        + acq_REGULATED_REVENUES_13
     +                        + acq_REGULATED_REVENUES_14
     +                        + acq_REGULATED_REVENUES_15
     +                        + acq_CAPTURED_OPT_METHOD_REVENUES
     +                        + acq_OPERATING_METHOD_ADJUSTMENT)
            BASE_REVENUE(2,CLASS_POS) = acq_TOTAL_BASE_RATES_REVENUES
        ADJ_CLAUSE_REVENUE(2,CLASS_POS) = ACQ_ADJUSTMENT_CLAUSE_REVENUES
            ACQ_STOCK_BOOK_VALUE = BOOK_VALUE_STOCK(2,CLASS_POS)
            STOCK_PRICE_YEAR_END(2,CLASS_POS) = acq_STOCK_MARKET_PRICE
            acq_AVERAGE_STOCK_PRICE = 
     + (STOCK_PRICE_YEAR_END(2,CLASS_POS) +
     +                     STOCK_PRICE_YEAR_END(1,CLASS_POS))/2.
      acq_GAV_OTHER_OPT_REVENUES = OPERATING_REVENUES(2,CLASS_POS) -
     +   acq_CAPACITY_SALES_REVENUE -
     +   ns_class_assets_results_2%SECONDARY_SALES_REVENUES

C CALCULATE EXCLUSTIONS

            IF(PARENT_CLASS) THEN
               EXCLUDE_SUB_INCOME = EXCLUDE_SUB_INCOME +
     +                      SUB_EARNINGS_2_EXCLUDE(CLASS_LEVEL)
               EXCLUDE_FED_TAXES = EXCLUDE_FED_TAXES + FEDERAL_TAXES
               PARENT_ATL_FEDERAL_TAX = ACQ_ATL_FEDERAL_TAXES
              PARENT_BTL_FEDERAL_TAX = ns_class_master%BTL_FEDERAL_TAXES
               PARENT_BTL_INTRA_FED_TAXES = BTL_INTRA_FEDERAL_TAXES
               PARENT_BTL_INTRA_STATE_TAXES = BTL_INTRA_STATE_TAXES
               R_COVERAGE_RATIO = COVERAGE_RATIO
            ELSE
               SUB_SBU_ACE_TAX_DEPRECIATION(CLASS_LEVEL-1)  =
     +             SUB_SBU_ACE_TAX_DEPRECIATION(CLASS_LEVEL-1) +
     +             ns_class_parameters%ACE_TAX_DEPRECIATION
               SUB_SBU_TAX_PRE_DEPRECIATION(CLASS_LEVEL-1) =
     +             SUB_SBU_TAX_PRE_DEPRECIATION(CLASS_LEVEL-1) +
     +             ns_class_parameters%TAX_PREFERENCE_DEPRECIATION
               IF(CLASS_TYPE(CLASS_POS) == SBU .OR.
     +            CLASS_TYPE(CLASS_POS) == REGULATED_GROUP) THEN
                          ! ASSET_CLASS_TYPE

                  IF(.NOT. DONT_TALLY_THIS_CLASS) THEN
                     IF(EXCLUDE_SBU_REVENUE_TAX) THEN
                        EXCLUDED_REVENUE_TAX(CLASS_LEVEL-1) =
     +                     EXCLUDED_REVENUE_TAX(CLASS_LEVEL-1) +
     +                                 ACQ_OPERATING_REVENUE_TAX
                        IF(SALT_RIVER_PROJECT()) THEN
                           EXCLUDED_REVENUE_TAX_BASIS(CLASS_LEVEL-1) =
     +                 EXCLUDED_REVENUE_TAX_BASIS(CLASS_LEVEL-1)
     +                 + acq_TOTAL_BASE_RATES_REVENUES
     +                 + ACQ_ADJUSTMENT_CLAUSE_REVENUES
     +                 + ns_class_parameters%DEFERRED_REVENUES
                        ELSE
                           EXCLUDED_REVENUE_TAX_BASIS(CLASS_LEVEL-1) =
     +                 EXCLUDED_REVENUE_TAX_BASIS(CLASS_LEVEL-1)
     +                 + OPERATING_REVENUES(2,CLASS_POS)
                        ENDIF
                        EXCLUDED_REVENUE_TAX_BASIS_A(CLASS_LEVEL-1) =
     +               EXCLUDED_REVENUE_TAX_BASIS_A(CLASS_LEVEL-1)
     +               + acq_TOTAL_BASE_RATES_REVENUES
     +               + ACQ_ADJUSTMENT_CLAUSE_REVENUES
     +               + acq_CLASS_GAS_ADJ_CLAUSE_REVENUE
                        EXCLUDED_REVENUE_TAX_BASIS_B(CLASS_LEVEL-1) =
     +               EXCLUDED_REVENUE_TAX_BASIS_B(CLASS_LEVEL-1)
     +               + acq_TOTAL_BASE_RATES_REVENUES
                     ENDIF
                     IF(EXCLUDE_SBU_OTHER_TAXES) THEN
                        EXCLUDED_OTHER_TAXES_REV(CLASS_LEVEL-1) =
     +                 EXCLUDED_OTHER_TAXES_REV(CLASS_LEVEL-1) +
     +                           OPERATING_REVENUES(1,CLASS_POS)
                        EXCLUDED_OTHER_TAXES_EXP(CLASS_LEVEL-1) =
     +                 EXCLUDED_OTHER_TAXES_EXP(CLASS_LEVEL-1) +
     +                                CLASS_NON_VARIABLE_EXPENSE
                        EXCLUDED_OTHER_TAXES(CLASS_LEVEL-1) =
     +                    EXCLUDED_OTHER_TAXES(CLASS_LEVEL-1) +
     + acq_OTHER_TAXES
                     ENDIF
                     IF(EXCLUDE_SBU_CAPITAL_TAX) THEN
                        EXCLUDE_CAPITAL_TAXES_STATE(CLASS_LEVEL-1) =
     +                EXCLUDE_CAPITAL_TAXES_STATE(CLASS_LEVEL-1)
     +                + STATE_TAX_ON_CAPITAL
                        EXCLUDE_CAPITAL_TAXES_FED(CLASS_LEVEL-1) =
     +                  EXCLUDE_CAPITAL_TAXES_FED(CLASS_LEVEL-1)
     +                  + FEDERAL_TAX_ON_CAPITAL
                        EXCLUDE_CAPITAL_TAX_FED_BASIS(CLASS_LEVEL-1) =
     +              EXCLUDE_CAPITAL_TAX_FED_BASIS(CLASS_LEVEL-1)
     +              + MAX(0.,AMOUNT_OF_TAXED_CAPITAL -
     + ns_class_canadian%FEDERAL_CAPITAL_TAX_DEDUCTION)
                        EXCLUDE_CAPITAL_TAX_STATE_BASIS(CLASS_LEVEL-1) =
     +            EXCLUDE_CAPITAL_TAX_STATE_BASIS(CLASS_LEVEL-1)
     +            + MAX(0.,AMOUNT_OF_TAXED_CAPITAL -
     +                   ns_class_canadian%PROVINCIAL_CAP_TAX_DEDUCTION)
                     ENDIF


                     SBU_ATL_EXCLUDE_FED_TAXES=SBU_ATL_EXCLUDE_FED_TAXES
     +                                 + ACQ_ATL_FEDERAL_TAXES
        SBU_CASH_OTH_ASSET(CLASS_LEVEL-1) = 
     + ns_class_parameters%CASH_OTH_ASSET
     +                       + SBU_CASH_OTH_ASSET(CLASS_LEVEL-1)
                     SBU_DSM_CAPITIAL(CLASS_LEVEL-1) = DSM_CAPITIAL +
     +                           SBU_DSM_CAPITIAL(CLASS_LEVEL-1)
                     SBU_CLASS_OTH_LIAB_SALE_ASSETS(CLASS_LEVEL-1) =
     +           SBU_CLASS_OTH_LIAB_SALE_ASSETS(CLASS_LEVEL-1) +
     +                                CLASS_OTH_LIAB_SALE_ASSETS
                     SBU_BTL_LEASE_PAYMENTS(CLASS_LEVEL-1) =
     +                   SBU_BTL_LEASE_PAYMENTS(CLASS_LEVEL-1) +
     + ns_class_parameters%BTL_LEASE_PAYMENTS
                     SBU_ATL_LEASE_PAYMENTS(CLASS_LEVEL-1) =
     +                   SBU_ATL_LEASE_PAYMENTS(CLASS_LEVEL-1) +
     + ns_class_parameters%ATL_LEASE_PAYMENTS
                     SBU_RETIREE_MEDICAL_PAYMENTS(CLASS_LEVEL-1) =
     +             SBU_RETIREE_MEDICAL_PAYMENTS(CLASS_LEVEL-1) +
     +             ns_class_parameters%RETIREE_MEDICAL_PAYMENTS
                     SBU_CHANGE_DECOMMISSIONING_LIAB(CLASS_LEVEL-1) =
     +          SBU_CHANGE_DECOMMISSIONING_LIAB(CLASS_LEVEL-1) +
     + ns_class_parameters%CHANGE_2_DECOMMISSIONING_LIAB
                     acq_SBU_UNAMORT_DEBIT_INTEREST_BAL =
     +                 UNAMORTIZED_INTEREST_BALANCE(1,CLASS_POS)
     +                 + acq_SBU_UNAMORT_DEBIT_INTEREST_BAL
                     acq_SBU_UNAMORTIZED_ISSUE_EXPENSE_BAL =
     +                UNAMORTIZED_ISSUE_EXP_BALANCE(1,CLASS_POS)
     +                + acq_SBU_UNAMORTIZED_ISSUE_EXPENSE_BAL
                     SBU_DEFERRED_DEBIT_RATEBASE(CLASS_LEVEL-1) =
     +                SBU_DEFERRED_DEBIT_RATEBASE(CLASS_LEVEL-1)
     +                + DEFERRED_DEBITS_RATE_BASE(2,CLASS_POS)
                     SBU_DEFERRED_CREDIT_RATEBASE(CLASS_LEVEL-1) =
     +              SBU_DEFERRED_CREDIT_RATEBASE(CLASS_LEVEL-1)
     +              + DEFERRED_CREDITS_IN_RATE_BASE(2,CLASS_POS)

                     SBU_ATL_TAX_EXPENSE(CLASS_LEVEL-1) =
     +                        SBU_ATL_TAX_EXPENSE(CLASS_LEVEL-1)
     +                        + DD_ATL_CURRENT_TAX_EXPENSE
     +                        + PIOR_LEVEL_ATL_TAX_DEDUCTIONS
                     SBU_BTL_TAX_EXPENSE(CLASS_LEVEL-1) =
     +                        SBU_BTL_TAX_EXPENSE(CLASS_LEVEL-1)
     +                        + DD_BTL_CURRENT_TAX_EXPENSE
     +                        + PIOR_LEVEL_BTL_TAX_DEDUCTIONS
                  ENDIF ! DONT ADD
               ELSE
                  IF(APS_ACTIVE .AND. CLASS == 401) THEN ! AGC
       AGC_SUBSIDIARY_INCOME = ns_class_parameters%SUBSIDIARY_INCOME
                     AGC_EARNINGS_AVAILABLE_2_COMMON =
     +                       ACQ_EARNINGS_AVAILABLE_TO_COMMON
      AGC_COMMON_DIVIDENDS = ns_class_master%COMMON_DIVIDENDS
      AGC_COMMON_STOCK_ISSUED = ns_class_master%COMMON_STOCK_ISSUED
                  ELSE
                     IF(.NOT. DONT_TALLY_THIS_CLASS) THEN
                        SUB_EARNINGS_2_EXCLUDE(CLASS_LEVEL-1) =
     +                   SUB_EARNINGS_2_EXCLUDE(CLASS_LEVEL-1) +
     + ns_class_parameters%SUBSIDIARY_INCOME
                        SUB_EARNINGS_2_COMMON(CLASS_LEVEL-1) =
     +                    SUB_EARNINGS_2_COMMON(CLASS_LEVEL-1) +
     +                          ACQ_EARNINGS_AVAILABLE_TO_COMMON
                        SUB_DIVIDEND_PAYMENTS_2_PARENT(CLASS_LEVEL-1) =
     +           SUB_DIVIDEND_PAYMENTS_2_PARENT(CLASS_LEVEL-1) +
     + ns_class_master%COMMON_DIVIDENDS
                        SUB_EQUITY_NEEDS_FROM_PARENT(CLASS_LEVEL-1) =
     +             SUB_EQUITY_NEEDS_FROM_PARENT(CLASS_LEVEL-1) +
     + ns_class_master%COMMON_STOCK_ISSUED
                     ENDIF
                  ENDIF ! APS ACTIVE
                  IF(.NOT. DONT_TALLY_THIS_CLASS) THEN
                     SUB_FED_TAX_PAYMENTS_2_PARENT = FEDERAL_TAXES +
     +                             SUB_FED_TAX_PAYMENTS_2_PARENT
                     SUB_STATE_TAX_PAYMENTS_2_PARENT = STATE_TAXES +
     +                           SUB_STATE_TAX_PAYMENTS_2_PARENT
                     SUB_TAXABLE_INCOME = SUB_TAXABLE_INCOME +
     +                                        ACQ_TAXABLE_INCOME
                     SUB_FEDERAL_TAXABLE_INCOME =
     +                              SUB_FEDERAL_TAXABLE_INCOME +
     +                              ACQ_FEDERAL_TAXABLE_INCOME

                     SUB_TOTAL_BTL_FEDERAL_TAXES =
     + SUB_TOTAL_BTL_FEDERAL_TAXES + ns_class_master%BTL_FEDERAL_TAXES
                     SUB_TOTAL_BTL_INTRA_FED_TAXES =
     +                             SUB_TOTAL_BTL_INTRA_FED_TAXES
     +                             + BTL_INTRA_FEDERAL_TAXES
                     SUB_TOTAL_BTL_INTRA_STATE_TAXES =
     +                           SUB_TOTAL_BTL_INTRA_STATE_TAXES
     +                           + BTL_INTRA_STATE_TAXES
                     SUB_TOTAL_ATL_FEDERAL_TAXES =
     +       SUB_TOTAL_ATL_FEDERAL_TAXES + ACQ_ATL_FEDERAL_TAXES
                     EXCLUDE_STATE_TAXES=EXCLUDE_STATE_TAXES+STATE_TAXES
                     EXCLUDE_COMMON_DIVIDENDS=EXCLUDE_COMMON_DIVIDENDS +
     + ns_class_master%COMMON_DIVIDENDS
                     EXCLUDE_SUB_INCOME = EXCLUDE_SUB_INCOME +
     + ns_class_parameters%SUBSIDIARY_INCOME
                  ENDIF ! DONT ADD
               ENDIF
               IF(.NOT. DONT_TALLY_THIS_CLASS) THEN
                  EXCLUDE_STATE_NOL_TAX_DEF_DR =
     +                           EXCLUDE_STATE_NOL_TAX_DEF_DR
     +  + acq_STATE_DEFERRED_TAXES_FROM_NOL
                  EXCLUDE_FED_NOL_TAX_DEF_DR =
     +   EXCLUDE_FED_NOL_TAX_DEF_DR
     +   + acq_FED_DEFERRED_TAXES_FROM_NOL
                  EXCLUDE_TAX_DEFERRALS_DR = EXCLUDE_TAX_DEFERRALS_DR
     +                               + DEFERRED_TAXES_DR

               ENDIF
            ENDIF
            acq_CURRENT_LTD_RETIREMENTS  = acq_CURRENT_LTD_RETIREMENTS
     +                         + LTDRET(YR+1,CLASS_POS)

            IF(YR >= 1) THEN
               WRITE(STR_CLASS_NUM,'(I4)') CLASS-1
               IF(CLASS == 0 .AND. SUBS_ACTIVE_FOR_REPORTING) THEN
                  ASSET_CLASS_NAME =
     +                   trim(CLASS_NAME(CLASS_POS))//' (Con)'
               ELSEIF(PARENT_CLASS .AND. SUBS_ACTIVE_FOR_REPORTING) THEN
                  ASSET_CLASS_NAME =
     +              trim(CLASS_NAME(CLASS_POS))//STR_CLASS_NUM
     +                                           //' (Parent)'
               ELSEIF(trim(CLASS_NAME(CLASS_POS)) /= ' ')THEN
                  ASSET_CLASS_NAME = trim(CLASS_NAME(CLASS_POS))
     +                                           //STR_CLASS_NUM
               ELSE
                  ASSET_CLASS_NAME = 'Class '//STR_CLASS_NUM
               ENDIF
               WRITE(STR_CLASS_NUM,'(I2)') CLASS_LEVEL
               IF(CLASS_TYPE(CLASS_POS) == SBU) THEN
                  ASSET_CLASS_NAME=trim(ASSET_CLASS_NAME)//' (SBU)'//
     +                                             STR_CLASS_NUM
               ELSEIF(SUBSIDIARY_CLASS) THEN
                  ASSET_CLASS_NAME=trim(ASSET_CLASS_NAME)//' (Sub)'//
     +                                             STR_CLASS_NUM
               ELSEIF(CLASS_TYPE(CLASS_POS) == REGULATED_GROUP) THEN
                  ASSET_CLASS_NAME=trim(ASSET_CLASS_NAME)//' (Reg)'//
     +                                             STR_CLASS_NUM
               ENDIF

C VARIBLE ASSIGNMENT

               CALL SUMMARIZE_VARIABLES(CLASS_POS,YR)
               CALL SET_NON_EQUIVALENCED_VARIABLES

C EMISSIONS REPORT INFORMATION

               IF(.NOT. ASSET_ANALYST_ONLY()) THEN
                  !155 TO 208
               VOID_LOGICAL = REPORT_CLASS_EMISSIONS_INFO(acq_VARIABLE)
               ENDIF

               CALL CLASS_SHAREHOLDER_VALUE(acq_VARIABLE,
     +                     OPERATING_ASSETS_YEAR_END(CLASS_POS),
     +                     EMBEDDED_PARENT_LTD_COST,
     +                     EMBEDDED_PARENT_PS_COST)
               CALL GRE_DSC_REPORT(acq_VARIABLE)
               CALL EBITDA_REPORT(acq_VARIABLE)
               CALL SUB_SEC_RATIOS(acq_VARIABLE)
               IF(FirstEnergy_Is_Active) THEN
                  CALL FIRST_ENERGY_PandL_REPORT(CLASS,acq_VARIABLE,
     +                               CL_ANN_CLASS_ENERGY,
     +                               EXP_FUEL_EXPENSE,
     +                               EXP_PURCHASE_POWER_EXPENSE,
     +                               EXP_FILE_VARIABLE_EXPENSE,
     +                               EXP_FILE_FIXED_EXPENSE)
                  acq_ATL_AMORTIZATION = acq_ATL_AMORTIZATION
     +                       + acq_VARIABLE_OM_AMORT
                  acq_OTHER_DD_AMORT = acq_OTHER_DD_AMORT
     +                     + acq_VARIABLE_OM_AMORT
               ENDIF

               IF(CLASS_LEVEL >= 0) THEN

      acq_VARIABLE(262) = 
     + ns_class_parameters%ADJUSTMENT_2_ECONOMIC_ASSETS
                  IF(CLASS_TYPE(CLASS_POS) == SBU .OR.
     +            CLASS_TYPE(CLASS_POS) == REGULATED_GROUP) THEN
                     acq_SBU_VARIABLES(636) =
     +                         LEVEL_SUMATION(636,CLASS_LEVEL-1)
                     IF(.NOT. DONT_TALLY_THIS_CLASS)
     +            CALL TALLY_RESULTS_INFO(VARS_2_PASS,
     +                          acq_VARIABLE,
     +                          LEVEL_SUMATION(0,CLASS_LEVEL-1))
                     LEVEL_SUMATION(89,CLASS_LEVEL-1) = 0.  ! LIAB NEC
                     LEVEL_SUMATION(75,CLASS_LEVEL-1) = 0.  ! ASSET NEC
                     IF(.NOT. DONT_TALLY_THIS_CLASS)
     +              CALL TALLY_RESULTS_INFO(VARS_2_PASS,
     +                           acq_VARIABLE,acq_SBU_VARIABLES)
                     acq_SBU_VARIABLES(29) = acq_SBU_VARIABLES(681)
     +                           + acq_SBU_VARIABLES(682)
     +                           + acq_SUBSIDARY_VARIABLES(733)
                     TOTAL_CAP_LEASES_BAL_ADJ = TOTAL_CAP_LEASES_BAL_ADJ
     +                                  + CAP_LEASES_BAL_ADJ
                     acq_SBU_VARIABLES(89) = 0. ! LIAB NEC
                     acq_SBU_VARIABLES(75) = 0. ! ASSET NEC
                  ELSEIF(CLASS_LEVEL >= 0) THEN

                IF(CLASS_LEVEL >= 1 .AND.! passing tax credits to parent
     +                         .NOT. DONT_TALLY_THIS_CLASS) THEN
                        CONSOLD_AVAIL_FED_TAX_CREDIT =
     +                            CONSOLD_AVAIL_FED_TAX_CREDIT +
     +                            acq_FED_TAX_CREDIT_PASSED_UP
                        CONSOLID_FED_SEC_29_TAX_CREDITS =
     +                         CONSOLID_FED_SEC_29_TAX_CREDITS +
     +                                  acq_SEC_29_CREDITS_PASSED_UP
                        CONSOLID_FED_SEC_42_TAX_CREDITS =
     +                         CONSOLID_FED_SEC_42_TAX_CREDITS +
     +                                  acq_SEC_42_CREDITS_PASSED_UP

                     ENDIF
                     IF(CONSOLIDATING_CLASS(CLASS_POS)) THEN
                        IF(.NOT. DONT_TALLY_THIS_CLASS)
     +                CALL SUB_CONSOLIDATING_ADJUSTMENTS(
     +                             VARS_2_PASS,
     +                     acq_VARIABLE,acq_SUBSIDARY_VARIABLES)
                     ELSE
                        IF(.NOT. DONT_TALLY_THIS_CLASS)
     +                CALL TALLY_RESULTS_INFO(VARS_2_PASS,
     +                     acq_VARIABLE,acq_SUBSIDARY_VARIABLES)
                     ENDIF
                     IF(.NOT. DONT_TALLY_THIS_CLASS) THEN
                        TOTAL_SUB_COMMON_EQUITY = acq_VARIABLE(77) +
     +                                   TOTAL_SUB_COMMON_EQUITY
                        TOTAL_SUB_RETAINED_EARNINGS = acq_VARIABLE(78) +
     +                               TOTAL_SUB_RETAINED_EARNINGS
                        TOTAL_SUB_OCI_EARNINGS = TOTAL_SUB_OCI_EARNINGS
     +                                   + acq_VARIABLE(730)
                        TOTAL_SUB_INVESTMENT = TOTAL_SUB_INVESTMENT +
     +                                          acq_VARIABLE(91)
                     ENDIF
                     IF(CLASS_LEVEL == 1 .AND.
     +                         .NOT. DONT_TALLY_THIS_CLASS) THEN
                        SUB_TOTAL_SUB_INCOME(CLASS_LEVEL) =
     +                       SUB_TOTAL_SUB_INCOME(CLASS_LEVEL) +
     +                                          acq_VARIABLE(43)
                     ENDIF
                  ENDIF
               ENDIF
               IF(CLASS_TYPE(CLASS_POS) == REGULATED_GROUP .OR.
     +                        CLASS_TYPE(CLASS_POS) == SBU) THEN
                  CALL SET_SUBSIDARY_NA(acq_VARIABLE)
               ENDIF
               IF(CLASS_TYPE(CLASS_POS) == SUBSIDIARY) THEN
                  CALL SET_SUBSIDARY_VALUES_AND_NA(acq_VARIABLE)
               ENDIF
               IF(PARENT_CLASS)
     +           ST_JOE_BASE_ELECTRIC_REVENEUS = acq_VARIABLE(0)

               acq_FED_TAXABLE_INCOME_AFTER_NOLS = acq_VARIABLE(136)
               IF(acq_FED_TAXABLE_INCOME_AFTER_NOLS > 0.) THEN
                  acq_VARIABLE(213) = 100. * acq_VARIABLE(340)/
     +                             acq_FED_TAXABLE_INCOME_AFTER_NOLS
               ELSE
                  acq_VARIABLE(213) = 100. * 
     + ns_class_parameters%FEDERAL_TAX_RATE
               ENDIF

C CORRECTS FOR CHANGES IN RB THAT DON'T INVOLVE CASH 3/15/98

               IF(CLASS_TYPE(CLASS_POS) == REGULATED_GROUP) THEN
                  ! ns_class_parameters%DEFERRED_EXPENSE_CASH
              acq_VARIABLE(127) = acq_VARIABLE(127) + RATE_BASE_CASH_ADJ
               ENDIF


               IF(WVPA()) THEN
                  CALL WVPA_SPECIAL_REPORT_VARIABLES(CLASS,
     +                                       acq_VARIABLE)
               ENDIF

               IF(WVPA()) THEN
                  CALL WVPA_ANNUAL_RISK_VALUES(
     + acq_WVPA_MEMBER_RATES_WITH_SDI,    !744
     + acq_WVPA_MEMBER_RATES_WITHOUT_SDI, ! 745
     + acq_WVPA_MEMBER_ENERGY_SALES, ! 751
     + acq_WVPA_SDI_ENERGY_SALES) ! 752
                  CALL WVPA_ANNUAL_MARGINS(acq_VARIABLE)
               ENDIF
               IF(ODEC() .AND. SUBSIDIARY_CLASS .AND.
     +                                 CLASS - 1 == ODEC_NA3_ID)
     +           ODEC_NA3_PURCHASE_EXPENSE =
     +                           OPERATING_REVENUES(2,CLASS_POS)
               IF(ASSET_REPORTS_ACTIVE .AND. (PARENT_CLASS .OR.
     +                            REPORT_CLASS(CLASS_POS))) THEN

                  acq_ECITIES_TRANSFER_BENEFIT =
     +  RETURN_ECITIES_OBJ_VARS(CLASS,                        ! 683  WTB
     +           acq_ECITIES_WHOLESALE_PROD_COST,  ! 684  C-PROD
     +           acq_ECITIES_VAR_PROD_COST,        ! 685  C-SUPP
     +            acq_ECITIES_NEW_FIXED_COST,       ! 686  C-CAP
     +                acq_ECITIES_MARKET_ENERGY_SALES,  ! 687  R
     +           acq_ECITIES_TRANSMISSION_FEES)    ! 688  C-FEES
                  acq_VARIABLE(641) = acq_VARIABLE(76)
     +                    - acq_VARIABLE(90) ! acq_ASSET_MINUS_LIABS
                  acq_VARIABLE(642) = acq_VARIABLE(641)
     +                    - CLASS_PRIOR_INBALANCE(CLASS_POS)
                  CLASS_PRIOR_INBALANCE(CLASS_POS) = acq_VARIABLE(641)
                  IF(REPORT_ZEROS_4_CLASS(CLASS_POS) .AND.
     +              ACTIVATE_CLASS_IN_YEAR(CLASS_POS) > YR) THEN
                     acq_VARIABLE = 0.
                  ENDIF
                  acq_OUTPUT_CLASS_ID = CLASS - 1
                  acq_DEFERRED_TAXES_ROLLUP_CR = DEFERRED_TAXES_CR
     +                               + acq_LTD_PS_DEFERRED_TAX_CR
     +                               + acq_NF_DEFERRED_TAXES_CR
                  IF(IMPA()) CALL IMPA_ANNUAL_RATIOS(PARENT_CLASS,CLASS,
     +                                       acq_VARIABLE,
     +                                       OPERATING_METHOD)


                  CALL MG_LOCATE_WRITE(8,15,ASSET_CLASS_NAME,3,4)
                  WRITE(INCOME_UNIT,REC=OUTPUT_RCD_loc)
     +                    PRT_ENDPOINT(),
     +                    FLOAT(get_BASE_YEAR()+globecom_YEAR),
     +                    ASSET_CLASS_NAME,
     +                    acq_VARIABLE
                  IF(FirstEnergy_Is_Active)
     +  CALL FE_PCA_LEGAL_REPORTS(FLOAT(get_BASE_YEAR()+globecom_YEAR),
     +                            ASSET_CLASS_NAME,
     +                            OUTPUT_RCD_loc,
     +                            acq_VARIABLE)
        IF(get_BASE_YEAR()+globecom_year >= 2011 .and. .false.) THEN
           write(37673,1021) OUTPUT_RCD_loc,
     +               ASSET_CLASS_NAME,
     +               acq_VARIABLE
                  ENDIF
 1021 FORMAT(1X,I4,',"',A,'",',1000(F15.0,','))
                  OUTPUT_RCD_loc = OUTPUT_RCD_loc - 1
               ENDIF

               IF(globecom_YEAR <= LAST_AVAILABLE_MONTHLY_YEAR .AND.
     +                                MONTHLY_MIDAS_ACTIVE) THEN
                  WRITE_MONTHLY_INFOR = ASSET_REPORTS_ACTIVE .AND.
     +               (PARENT_CLASS .OR. REPORT_CLASS(CLASS_POS))
                  CALL REPORT_MONTHLY_ANALYSIS(globecom_YEAR,CLASS,
     +             ASSET_CLASS_NAME,
     +             CLASS_POS,
     +             CLASS_TYPE(CLASS_POS),
     +             CLASS_LEVEL,
     +             WRITE_MONTHLY_INFOR,
     +             DONT_TALLY_THIS_CLASS,
     +             THIS_IS_REPORTING_CLASS,
     +             acq_VARIABLE,
     +             CLASS_CUMULATIVE_DEPRECIATION(1,CLASS_POS),
     +             REARNC(1,CLASS_POS),
     +             COMMON_STOCK(1,CLASS_POS),
     +             LONG_TERM_DEBT(1,CLASS_POS),
     +             PREFERRED_STOCK(1,CLASS_POS),
     +             INVESTMENTS_BOY,
     +             NOTES_RECEIVABLE_BOY,
     +             NOTES_PAYABLE_BOY,
     +             DEFERRED_PURCHASE_POWER(1,CLASS_POS),
     +             PENSION_LIABILITY(1,CLASS_POS),
     +             DEFERRED_GAIN_FROM_SALES(1,CLASS_POS),
     +             STORM_RESERVE_BALANCE(1,CLASS_POS),
     +             ACCRUED_VACATION_PAY_BALANCE(1,CLASS_POS),
     +             OTHER_ASSETS(1,CLASS_POS),
     +             NET_DD_BALANCE(1,CLASS_POS),
     +             CUMTXNORM(1,CLASS_POS),
     +  WCCUM(1,CLASS_POS) + LINEC(1,CLASS_POS), !ASSETS NEC BOY
     +             ACCOUNTS_RECEIVABLE_BOY,
     +             CLASS_CUMULATIVE_DEPRECIATION(1,CLASS_POS),
     +             CUM_DEF_REVENUES(1,CLASS_POS),
     +             DEF_TAX_CR_BALANCE(1,CLASS_POS),
     +             DEF_ITC_BALANCE(1,CLASS_POS),
     +             OTHER_LT_LIABILITY(1,CLASS_POS),
     +             ACCOUNTS_PAYABLE_BOY,
     +             LINEC(1,CLASS_POS), !ASSETS NEC BOY
     +             CLASS_CWIP(1,CLASS_POS),
     +             BOY_POST_RETIRE_MEDICAL_FUND,
     +             BOY_POST_RETIRE_MED_PAYABLE,
     +             BOY_NUC_DECOM_FUND_LIABILITY,
     +             CAPITIALZIED_LEASES(1,CLASS_POS),
     +             NUC_DECOM_FUND_BAL(1,CLASS_POS),
     +             CLASS_NET_NF_VALUE(1,CLASS_POS),
     +             INVESTMENT_IN_SUBSIDIARIES(1,CLASS_POS),
     +             CONSOLIDATED_TAX_LIB_ADJUSTMENT,
     +             BOY_ISSUE_EXP_BAL,
     +             FUEL_INVENTORY_BOY,
     +             GAS_STORAGE_BOY,
     +             MATERIALS_SUPPLIES_BOY,
     +             UNAMORTIZED_INTEREST_BALANCE(1,CLASS_POS),
     +             REGULATORY_DEFERRED_CREDITS_BAL_BOY,
     +             GAIN_ON_REAQUIRED_DEBT_BAL_BOY,
     +             OTHER_DEFERRED_CREDITS_BAL_BOY,
     +             GOODWILL(1,CLASS_POS),
     +             ExecBenefitsBalance(1,CLASS_POS),
     +             IncentiveCompBalance(1,CLASS_POS))
               ENDIF

               IF(THIS_IS_REPORTING_CLASS .OR.
     +       (PARENT_CLASS .AND. REPORTING_CLASS_ID == -1)) THEN
                  CALL STORE_REPORTING_VALUES(acq_VARIABLE)
C                  THIS_IS_REPORTING_CLASS = .FALSE.
               ENDIF
               CALL MOVE_BALANCE_SHEET_ITEMS()
               IF(PARENT_CLASS) THEN
                  EMBEDDED_PARENT_LTD_COST =
     +                        WEIGHTED_CLASS_LTD_COST(CLASS_POS)
                  EMBEDDED_PARENT_PS_COST =
     +                         WEIGHTED_CLASS_PS_COST(CLASS_POS)
               ENDIF
               IF(PARENT_CLASS .AND. SUBS_ACTIVE) THEN

C CONSOLIDATING ADJUSTMENTS

                  WE_ARE_CONSOLIDATING = .TRUE.
                  CALL TRANSFER_ZERO_ASSETS(INT2(0))
                  DEFERRED_TAX_BASIS = 0.
                  ACQ_NF_DEFERRED_TAX_BASIS = 0.
                  LEASOR_DEFERRED_TAX_BASIS = 0.
                  BOOK_DEPRECIATION = 0.
                  ACQ_CAPITIALIZED_INTEREST = 0.
                  acq_NF_CAPITIALIZED_INTEREST = 0.
                  AMORTIZATION_EXPENSE = 0.
                  acq_ATL_AMORTIZATION = 0.
                  BTL_AMORTIZATION = 0.
                  acq_FASB143_ARO_INTEREST_ACCREATION = 0.
                  INTEREST_AMORTIZATION = 0.
                  acq_ATL_LEASE_AMORTIZATION = 0.
                  acq_BTL_AMORTIZATION_IN_EXPENSES = 0.
                  CIAC_AMORTIZATION = 0.
                  acq_PS_PREM_ISSUE_EXP_AMORT = 0.
                  ns_class_parameters%INCOME_TAX_DEPRECIATION = 0.
                  EA_TAX_BOOK_DEP = 0.
                  FA_SL_TAX_DEP = 0.
                  LEASOR_NF_SL_TAX_DEP = 0.
                  DSM_SL_TAX_DEP_loc = 0.
                  LEASOR_NF_AMORTIZATION = 0.
                  BTL_DEFERRED_TAXES_DR = 0.
                  DEFERRED_TAXES_DR = 0.

                  acq_INCOME_TAX_TIMING_ADJS = 0.
                  SUB_DIVIDEND_PAYMENTS_2_PARENT(CLASS_LEVEL) =
     +                         ns_class_parameters%SUBSIDIARY_DIVIDEND
     +                         - UNMODELED_SUB_DIVIDEND_2_PARENT

                     INVESTMENT_IN_SUBSIDIARIES(2,0) =
     +                                      TOTAL_SUB_INVESTMENT
                     INVESTMENT_IN_SUBSIDIARIES(2,0) =
     +             INVESTMENT_IN_SUBSIDIARIES(1,0)
     +             + SUB_EQUITY_NEEDS_FROM_PARENT(CLASS_LEVEL)
     +             - SUB_DIVIDEND_PAYMENTS_2_PARENT(CLASS_LEVEL)
     +             + SUB_EARNINGS_2_EXCLUDE(CLASS_LEVEL)
                     INVESTMENT_IN_SUBSIDIARIES(2,0) =
     +                         acq_SUBSIDARY_VARIABLES(91)
     +                         - UNMODELLED_SUBS_OWNED_BY_SUBS
     +                         - UNMODELLED_SUBS_OWNED_BY_PARENT

          PARENT_MARKET_TO_BOOK = ABS(ns_class_parameters%MARKET_2_BOOK)
                  PARENT_AVERAGE_SHARES = acq_AVERAGE_SHARES
                  PARENT_AVERAGE_EQUITY = ACQ_AVERAGE_EQUITY
                  PARENT_YEAR_END_SHARES = acq_YEAR_END_SHARES
                  PARENT_STOCK_BOOK_VALUE = ACQ_STOCK_BOOK_VALUE
                  PARENT_STOCK_MARKET_PRICE = acq_STOCK_MARKET_PRICE
                  PARENT_AVERAGE_STOCK_PRICE = acq_AVERAGE_STOCK_PRICE
      PARENT_DIVIDEND_PER_SHARE = ns_class_parameters%DIVIDEND_PER_SHARE
       PARENT_COMMON_STOCK_ISSUED = ns_class_master%COMMON_STOCK_ISSUED

         PARENT_SUBSIDIARY_INCOME = 
     + ns_class_parameters%SUBSIDIARY_INCOME

C 5/18/99 MODIFICATION TO FIX NOLs

                  VOID_LOGICAL = RETURN_CONSOLIDATED_NOLS_INFO(
     +                                CONSOLIDATED_FED_NOL_GEN,
     +                                CONSOLIDATED_FED_NOL_USED)
                CONSOLIDATED_FED_NOL_GEN = acq_SUBSIDARY_VARIABLES(310)
     +                               - CONSOLIDATED_FED_NOL_GEN
                CONSOLIDATED_FED_NOL_USED = acq_SUBSIDARY_VARIABLES(311)
     +                               - CONSOLIDATED_FED_NOL_USED

C END CHANGE
                  CONSOLIDATED_FED_TAX_CREDITS = acq_VARIABLE(342)


                  CONSOLIDATED_STATE_TAX_CREDITS = acq_VARIABLE(347)

C SHAREHOLDER VALUE

                  PARENT_EQUITY_RATIO = ns_class_parameters%EQRATO
                  PARENT_EQUITY_RATE = ns_class_parameters%ROEQU
       PARENT_EQUITY_RISK_ADJ=
     +  ns_class_parameters%COST_OF_CAPITAL_RISK_ADJUSTMENT
                  PARENT_PS_RATE = ns_class_parameters%PSRATE
                  PARENT_PS_RATIO = ns_class_parameters%PSRATO
                  PARENT_LTD_RATE = ns_class_parameters%LTDRTE
                 PARENT_STD_RATE = ns_class_parameters%STD_INTEREST_RATE
             PARENT_STATE_TAX_RATE = ns_class_parameters%STATE_TAX_RATE
                  CON_FEDERAL_TAXABLE_INCOME_ADJ =
     +                         ACQ_FEDERAL_TAXABLE_INCOME
     +                         + SUB_FEDERAL_TAXABLE_INCOME
     +                         - CONSOLIDATED_FED_TAXABLE_INCOME
                  IF(USE_ACTUAL_CON_DEFERRED_TAX_DR) THEN
                     CON_FED_DEFERRED_TAX_DR_ADJ = DEFERRED_TAXES_DR
     +                            + EXCLUDE_TAX_DEFERRALS_DR
     +                            - ACTUAL_CON_DEFERRED_TAXES_DR
     +                            - EXCLUDE_STATE_NOL_TAX_DEF_DR
                  ELSE
                     CON_FED_DEFERRED_TAX_DR_ADJ = DEFERRED_TAXES_DR
     +                         + EXCLUDE_TAX_DEFERRALS_DR
     +                     ! DR SPECIFIED AT CONSOLD IN TAX FILE
     +                         - CONSOLID_DEFERRED_TAXES_DR
     +                         - EXCLUDE_STATE_NOL_TAX_DEF_DR
                  ENDIF

                  acq_VARIABLE = 0.
                  CALL ZERO_NON_EQUIVALENT_VALUES
                  CALL READ_ELIMINATIONS_PARM_FILE(
     +                              acq_RETIREMENT_MEDICAL_PAYMENTS,
     +                              acq_SALVAGE_TRANSACTIONS)

                  IF(.NOT.SEPARATE_ELIMINATIONS) THEN

C NOTE!!! EXPENSE VARIABLES ARE SET TO ZERO IN THE FOLLOWING ROUTINE
C EXCEPT FOR THE FOLLOWING WHICH ARE INITIALIZED BY READING THE
C FINANCIAL PARAMETER FILE

        acq_CASH_2_LT_INVESTMENTS = 0.
                     INVESTMENTS_MADE = 0.
                     INVESTMENTS_SOLD = 0.
        acq_PURCHASE_POWER_EXPENSE = 0.
        acq_OTHER_PURCHASE_POWER_EXPENSE = 0.
        acq_AFILIATE_PURCHASE_POWER_EXPENSE = 0.

                     CL_MARKET_PURCHASES = 0.
        ACQ_SERVICE_TRANSACTION_EXPENSE = 0.
                     TAXES_PAID_BY_PARENT = 0.
        ACQ_TAX_PAYMENTS_2_PARENT_FROM_SUB = 0.
C
                     OPERATING_REVENUES(2,0) = 0.
        acq_GAS_REVENUES = 0.
        acq_RELATIONSHIP_REVENUES = 0.
        acq_COMPETITIVE_SALES_REVENUE = 0.
        acq_FE_Competitive_Unit_Sales = 0.
        acq_FE_Intra_Company_Utility_Sales = 0.
        acq_UTILITY_SALES_REVENUE = 0.
        acq_BULK_POWER_REVENUES = 0.
        OTH_REVENUE_loc(2,0) = 0.
        ns_class_parameters%CLASS_BTL_REVENUES = 0.
        ns_class_parameters%CLASS_BTL_EXPENSES = 0.
        ns_class_parameters%ATL_LEASE_PAYMENTS = 0.
        ns_class_parameters%BTL_LEASE_PAYMENTS = 0.
        ACQ_EMISSION_CREDIT_EXPENSE = 0.
                     BASE_RATES_REVENUES = 0.
                     CATAWBA_REVENUES = 0.
                     CATAWBA_EXPENSES = 0.
        ACQ_CATAWBA_CAPACITY_PAYMENTS = 0.
        ACQ_CATAWBA_LEVEL_CAP_PAYMENTS = 0.
        acq_CATAWBA_OTHER_NET_REVENUES = 0.
                     CATAWBA_DEFERRED_DEBITS = 0.
                     CTWBA_DEFER_TAXES_BAL_CR_loc = 0.
                     CATAWBA_DEFERRED_TAXES_CR = 0.
        ACQ_CATAWBA_TOTAL_CAP_PAYMENTS = 0.
                     OWNED_NF_BURN_EXP_FILE = 0.
                     LEASED_NF_BURN_EXP_FILE = 0.
                     OWNED_NF_BURN_SALES_FILE = 0.
                     LEASED_NF_BURN_SALES_FILE = 0.
        ACQ_NUC_FUEL_LEASED_BURN = 0.
        ACQ_NUC_DECOMMISSIONING_COST = 0.
        acq_FASB143_ARO_CASH_PAYMENTS = 0.
        acq_FASB143_ARO_TRUST_CASH_PAYMENTS = 0.
        acq_NET_OF_TAX_NUCL_FUND_RETURN = 0.
        ns_class_parameters%TAX_PREFERENCE_DEPRECIATION = 0.
                     INVESTMENT_INCOME = 0.
        ns_class_parameters%CASH_OTH_ASSET = 0.
        acq_CAPTURED_OPT_METHOD_REVENUES = 0.
        acq_RETIREMENT_MEDICAL_PAYMENTS = 0.
        acq_TOTAL_DERIVATIVE_EXPENSE = 0.
        acq_TOTAL_FUEL_DERIV_EXPENSES =0.
        acq_WVPA_MEMBER_ACCRUED_REVENUES = 0.
                     WVPA_PURCHASE_POWER_EXPENSE_ADJ = 0.
                     CASH_TO_ACCRD_MBR_REVENUES_BAL = 0.
                     CASH_TO_POST_RETIRE_MEDICAL_BAL = 0.
                     ST_INVESTMENT_EARNINGS = 0.
                     LT_INVESTMENTS_EARNINGS = 0.
                     RETIREMENT_MEDICAL_FUND_RETURN = 0.
        ns_class_parameters%NUCL_FUND_RETURN = 0.
                     INTEREST_INCOME_AFILLIATES = 0.
                     DEBT_FILE_INVESTMENT_INCOME = 0.
                     BTL_CASH_EARNINGS = 0.
                     NEW_FINANCING_ACCRUALS = 0.
                     COMMON_STOCK_DIV_ACCRUALS = 0.
        acq_REGULATED_REVENUES_12 = 0.
                     BTL_DEFERRED_TAXES_DR = 0.
                     DEFERRED_TAXES_DR = 0.
C
                     CALL EXPENSE_REVENUE_INFO(ASSET_YR,
     +                                ELIMINAITON_CLASS_ID_NUM,
     +                                EX_CLASS_EXISTS,
     +  acq_VARIABLE,
     +  acq_fuel_expense,
     +  acq_OTHER_PURCHASE_POWER_EXPENSE,
     +  acq_variable_expense,
     +  ACQ_FIXED_EXPENSE,
     +  acq_OTHER_EXPENSE_1,
     +  acq_OTHER_EXPENSE_2,
     +  acq_OTHER_EXPENSE_3,
     +  OWNED_NF_BURN_EXP_FILE,
     +  LEASED_NF_BURN_EXP_FILE,
     +  ACQ_DSM_EXPENSE,
     +  ACQ_DSM_REBATE,
!        REVENUES
     +  ACQ_ADJUSTMENT_CLAUSE_REVENUES,
     +  BASE_RATES_REVENUES,
     +  ns_class_assets_results_2%SECONDARY_SALES_REVENUES,
     +  SECONDARY_SALES_NOT_IN_RATES,
     +  OTH_REVENUE_loc(2,0),
     +  ns_class_parameters%CLASS_BTL_REVENUES,
     +  ns_class_parameters%CLASS_BTL_EXPENSES,
     +  ns_class_parameters%ATL_LEASE_PAYMENTS,
     +  ns_class_parameters%BTL_LEASE_PAYMENTS,
     +  EXP_SERVICE_TRANSACTIONS,
     +  CLASS_EXP_EMIS_EXPENSE,
     +  ACQ_DOE_NUC_FUEL_FEE,
     +  ACQ_NUC_DECOMMISSIONING_COST,
     +  CATAWBA_REVENUES,
     +  CATAWBA_EXPENSES,
     +  acq_GAS_REVENUES,
     +  acq_TRANSMISSION_OPERATION,
     +  acq_TRANSMISSION_MAINTENANCE,
     +  acq_DISTRIBUTION_OPERATION,
     +  acq_DISTRIBUTION_MAINTENANCE,
     +  acq_CUSTOMER_ACCOUNTS,
     +  acq_CUSTOMER_SERVICES,
     +  acq_SALES_EXPENSE,
     +  acq_AG_OPERATIONS,
     +  acq_AG_MAINTENANCE,
     +  acq_UNBILLED_REVENUES,
     +  acq_ATL_DEFERRED_REVENUES,
     +  acq_RELATIONSHIP_REVENUES,
     +  acq_RESIDENTIAL_REVENUES,
     +  acq_COMMERCIAL_REVENUES,
     +  acq_INDUSTRIAL_REVENUES,
     +  acq_LIGHTING_REVENUES,
     +  acq_BULK_POWER_REVENUES,
     +  ns_class_parameters%PARM_AMORTIZATION_ADJUSTMENT,
     +  ns_class_parameters%AMORT_DEF_REVENUES,
     +  acq_ATL_LEASE_AMORTIZATION,
     +  acq_BTL_LEASE_AMORTIZATION,
     +  BOOK_DEPRECIATION,
     +  acq_OTHER_INCOME_NET_OF_TAX,
     +  acq_CAPACITY_SALES_REVENUE,
     +  acq_GOVERNMENT_SALES_REVENUE,
     +  BTL_AMORTIZATION_EXP,
     +  acq_CHANGE_IN_ACCOUNTS_RECEIVABLE,
     +  acq_CHANGE_IN_ACCOUNTS_PAYABLE,
     +  acq_ATL_LEASE_INTEREST,
     +  acq_BTL_LEASE_INTEREST,
     +  BTL_NUC_FUEL_DECOM_LIABILITY,
     +  acq_DEFERRED_FUEL_EXPENSE,
     +  ACQ_VACATION_PAY_NON_CASH,
     +  acq_pension_expense_non_cash,
     +  ACQ_storm_expense_non_cash,
     +  acq_CLASS_GAS_ADJ_CLAUSE_REVENUE,
     +  STD_INTEREST_ADDEN,
     +  LTD_INTEREST_ADDEN,
     +  acq_WVPA_MEMBER_ACCRUED_REVENUES,
     +  acq_WVPA_NON_MEMBER_COST_OF_POWER,
     +  acq_WVPA_MEMBER_COST_OF_POWER,
     +  acq_WVPA_MEMBER_COST_OF_SERVICES,
     +  acq_WVPA_NON_MEMBER_COST_OF_SERVICES,
     +  acq_REGULATED_REVENUES_13,
     +  acq_NON_REG_REVENUES_10,
! No longer passing pension_expense_cash. Passing 
! exp_preferred_dividends in its place
! Merge2issue TODO: Evaluate consequence of this.
! todo: add tracing
     +  Exp_PreferredDividends,
     +  Exp_AFDCBorrowed,
     +  Exp_AFDCEquity)
! No longer passing Exp_interestIncome
! or Exp_dividends because they're not defined in
! the routine.
                     Mark_To_Market = acq_VARIABLE(786)
                     Payroll_Taxes = acq_VARIABLE(787)
       FE_NonCashPension = acq_VARIABLE(791)! to pension liability on BS
       FE_NonCashEarningsNonCorp = acq_VARIABLE(790)!to investment on BS
        ns_class_parameters%DEFERRED_REVENUES = 
     + ns_class_parameters%DEFERRED_REVENUES +
     +  acq_ATL_DEFERRED_REVENUES

                     CALL RETURN_TAX_INFO_ELIM(ASSET_YR,
     +                                 ELIMINAITON_CLASS_ID_NUM,
     +                                 CLASS_PROPERTY_TAXES,
     +                                 acq_OTHER_TAXES,
     +                                ACQ_OPERATING_REVENUE_TAX)

                   ns_class_parameters%BTL_EMISSION_CREDIT_EXPENSE = 0.
                     CLASS_INC_EMIS_EXPENSE = CLASS_EXP_EMIS_EXPENSE
                     ATL_EMISSION_CREDIT_EXPENSE=CLASS_INC_EMIS_EXPENSE
                     ns_class_parameters%ADJ_CLAUSE_EXPENSE_ALLOCATION =
     +                      ATL_EMISSION_CREDIT_EXPENSE *
     +  ns_class_parameters%ADJ_CLAUSE_EXPENSE_ALLOCATION/100.
     
       ns_class_parameters%BTL_EMISSION_CREDIT_REVENUE = 0.
       ATL_EMISSION_CREDIT_REVENUE = 0.
       
       ns_class_parameters%ADJ_CLAUSE_REVENUE_ALLOCATION = 0.
        ACQ_EMISSION_CREDIT_EXPENSE=ATL_EMISSION_CREDIT_EXPENSE
                     ns_class_parameters%NET_ADJ_CLAUS_EMIS_AMT =
     + ns_class_parameters%ADJ_CLAUSE_EXPENSE_ALLOCATION

                     ACQ_OWNED_NF_BURN = OWNED_NF_BURN_SALES_FILE
                     ACQ_LEASED_NF_BURN = LEASED_NF_BURN_SALES_FILE

                     CALL EXPENSE_REVENUE_ADJUSTMENTS(ASSET_YR,
     +        SEPARATE_ELIMINATIONS,
     +        acq_fuel_expense,
     +        acq_OTHER_PURCHASE_POWER_EXPENSE,
     +        acq_variable_expense,
     +        ACQ_FIXED_EXPENSE,
     +        acq_OTHER_EXPENSE_1,
     +        acq_OTHER_EXPENSE_2,
     +        acq_OTHER_EXPENSE_3,
     +        ACQ_OWNED_NF_BURN,
     +        ACQ_LEASED_NF_BURN,
     +        ACQ_DSM_EXPENSE,
     +        ACQ_DSM_REBATE,
!              REVENUES
     +      ACQ_ADJUSTMENT_CLAUSE_REVENUES,
     +        BASE_RATES_REVENUES,
     +        ns_class_assets_results_2%SECONDARY_SALES_REVENUES,
     +        SECONDARY_SALES_NOT_IN_RATES,
     +        OTH_REVENUE_loc(2,0),
     +        ns_class_parameters%CLASS_BTL_REVENUES,
     +        ns_class_parameters%CLASS_BTL_EXPENSES,
     +        ns_class_parameters%ATL_LEASE_PAYMENTS,
     +        ns_class_parameters%BTL_LEASE_PAYMENTS,
     +     ACQ_SERVICE_TRANSACTION_EXPENSE,
     +        ACQ_EMISSION_CREDIT_EXPENSE,
     +        ACQ_DOE_NUC_FUEL_FEE,
     +        ACQ_NUC_DECOMMISSIONING_COST,
     +        CATAWBA_REVENUES,
     +        CATAWBA_EXPENSES,
     +        acq_GAS_REVENUES,
     +        acq_TRANSMISSION_OPERATION,
     +        acq_TRANSMISSION_MAINTENANCE,
     +        acq_DISTRIBUTION_OPERATION,
     +        acq_DISTRIBUTION_MAINTENANCE,
     +        acq_CUSTOMER_ACCOUNTS,
     +        acq_CUSTOMER_SERVICES,
     +        acq_SALES_EXPENSE,
     +        acq_AG_OPERATIONS,
     +        acq_AG_MAINTENANCE,
     +        acq_UNBILLED_REVENUES,
     +        acq_ATL_DEFERRED_REVENUES,
     +        acq_RELATIONSHIP_REVENUES,
     +        acq_RESIDENTIAL_REVENUES,
     +        acq_COMMERCIAL_REVENUES,
     +        acq_INDUSTRIAL_REVENUES,
     +        acq_LIGHTING_REVENUES,
     +        acq_BULK_POWER_REVENUES,
     +        ns_class_parameters%PARM_AMORTIZATION_ADJUSTMENT,
     +        ns_class_parameters%AMORT_DEF_REVENUES,
     +        acq_ATL_LEASE_AMORTIZATION,
     +        acq_BTL_LEASE_AMORTIZATION,
     +        BOOK_DEPRECIATION,
     +        acq_OTHER_INCOME_NET_OF_TAX,
     +        acq_CAPACITY_SALES_REVENUE,
     +        acq_GOVERNMENT_SALES_REVENUE,
     +        BTL_AMORTIZATION_EXP,
     +        acq_ATL_LEASE_INTEREST,
     +        acq_BTL_LEASE_INTEREST,
     +        BTL_NUC_FUEL_DECOM_LIABILITY,
     +       acq_CHANGE_IN_ACCOUNTS_RECEIVABLE,
     +       acq_CHANGE_IN_ACCOUNTS_PAYABLE,
     +       ACQ_VACATION_PAY_NON_CASH,
     +       acq_pension_expense_non_cash,
     +       ACQ_storm_expense_non_cash,
     +       acq_WVPA_MEMBER_ACCRUED_REVENUES)

C VACATION, PENSION, STORM

                  IF(UI()) THEN
                 PENSION_TAX_DEDUCTION = acq_PENSION_EXPENSE_CASH ! 689
                  STORM_TAX_DEDUCTION = acq_STORM_EXPENSE_CASH ! 690
                  VACATION_TAX_DEDUCTION = acq_VACATION_PAY_CASH! 691
                  ELSE
        PENSION_TAX_DEDUCTION = acq_pension_expense_non_cash      ! 689
          STORM_TAX_DEDUCTION = ACQ_storm_expense_non_cash         ! 690
       VACATION_TAX_DEDUCTION = ACQ_VACATION_PAY_NON_CASH      ! 691
                  ENDIF

C INTRA COMPANY RECEIVABLES AND PAYABLES ADJUSTMENTS

                     ns_class_parameters%DEFERRED_REVENUES = 
     + ns_class_parameters%DEFERRED_REVENUES +
     + acq_ATL_DEFERRED_REVENUES
         IF(globecom_YEAR <= LAST_AVAILABLE_MONTHLY_YEAR .AND.
     +                    MONTHLY_MIDAS_ACTIVE) THEN
            CALL CHANGE_IN_RECD_PAYS_4_REV_FORC(INT2(-1),
     +                acq_CHANGE_IN_ACCOUNTS_RECEIVABLE,
     +                acq_CHANGE_IN_ACCOUNTS_PAYABLE)
            acq_CASH_TIMING_ADJUSTMENTS =
     +               acq_CHANGE_IN_ACCOUNTS_PAYABLE
     +               - acq_CHANGE_IN_ACCOUNTS_RECEIVABLE
                     ELSE
                        acq_CHANGE_IN_ACCOUNTS_PAYABLE = 0.
                        acq_CHANGE_IN_ACCOUNTS_RECEIVABLE = 0.
                        acq_CASH_TIMING_ADJUSTMENTS = 0.
                     ENDIF

                     CALL SERVICE_TRANS_INFO(INT2(-1),acq_fuel_expense,
     +                           acq_OTHER_PURCHASE_POWER_EXPENSE,
     +                           acq_variable_expense,
     +                           ACQ_FIXED_EXPENSE,
     +                           acq_OTHER_EXPENSE_1,
     +                           acq_OTHER_EXPENSE_2,
     +                           acq_OTHER_EXPENSE_3,
     +                           OWNED_NF_BURN_EXP_FILE,
     +                           LEASED_NF_BURN_EXP_FILE,
     +                           EXPENSE_COLLECT_VIA_ADJ_CLAUSE,
     +                           NF_BURN_IN_RATEBASE,
     +                           ACQ_DSM_EXPENSE,
     +                           ACQ_DSM_REBATE,
C REVENUES
     +   ACQ_ADJUSTMENT_CLAUSE_REVENUES,
     +   BASE_RATES_REVENUES,
     +   ns_class_assets_results_2%SECONDARY_SALES_REVENUES,
     +   OTH_REVENUE_loc(2,0) ,
     +   ns_class_parameters%CLASS_BTL_REVENUES,
     +   ns_class_parameters%CLASS_BTL_EXPENSES,
     +   ns_class_parameters%ATL_LEASE_PAYMENTS,
     +   ns_class_parameters%BTL_LEASE_PAYMENTS,
     +   EXP_SERVICE_TRANSACTIONS,
     +   CLASS_EXP_EMIS_EXPENSE,
     +   ACQ_DOE_NUC_FUEL_FEE,
     +   ACQ_NUC_DECOMMISSIONING_COST,
     +   CATAWBA_REVENUES,
     +   CATAWBA_EXPENSES,
     +   acq_CAPACITY_SALES_REVENUE)
                     IF(.NOT. ASSET_ANALYST_ONLY()) THEN
                        CALL RETURN_EL_INTRA_ADJUSTMENTS(
     + ns_class_assets_results_2%SECONDARY_SALES_REVENUES,
     +  acq_OTHER_PURCHASE_POWER_EXPENSE, ! acq_PURCHASE_POWER_EXPENSE,
     +                             acq_variable_expense,
     +                             ACQ_FIXED_EXPENSE)
                        VOID_LOGICAL =
     +                   RETURN_CL_INTRA_CLASS_REVENUES(INT2(0),
     +                               BASE_RATES_REVENUES,
     +                        ACQ_ADJUSTMENT_CLAUSE_REVENUES,
     + ns_class_assets_results_2%SECONDARY_SALES_REVENUES,
     +                               OTH_REVENUE_loc(2,0),
     +                               ACQ_INTRA_COMPANY_NF_BURN)
                     ENDIF

C                     IF(WVPA()) THEN
C                     ELSE
                        CALL RC_EXPENSE_REVENUE_INFO(INT2(-1),
     +    acq_fuel_expense,
     +   acq_AFILIATE_PURCHASE_POWER_EXPENSE,
     +    acq_variable_expense,
     +    ACQ_FIXED_EXPENSE,
     +    acq_OTHER_EXPENSE_1,
     +    acq_OTHER_EXPENSE_2,
     +    acq_OTHER_EXPENSE_3,
     +    OWNED_NF_BURN_SALES_FILE,
     +    LEASED_NF_BURN_SALES_FILE,
     +    EXPENSE_COLLECT_VIA_ADJ_CLAUSE,
     +    ACQ_DSM_EXPENSE,
     +    ACQ_DSM_REBATE,
C REVENUES
     +         ACQ_ADJUSTMENT_CLAUSE_REVENUES,
     +         BASE_RATES_REVENUES,
     +         ns_class_assets_results_2%SECONDARY_SALES_REVENUES,
     +         OTH_REVENUE_loc(2,0),
     +         ns_class_parameters%CLASS_BTL_REVENUES,
     +         ns_class_parameters%CLASS_BTL_EXPENSES,
     +         ns_class_parameters%ATL_LEASE_PAYMENTS,
     +         ns_class_parameters%BTL_LEASE_PAYMENTS,
     +         EXP_SERVICE_TRANSACTIONS,
     +         acq_GAS_REVENUES,
     +         CATAWBA_REVENUES,
     +         acq_RESIDENTIAL_REVENUES,
     +         acq_COMMERCIAL_REVENUES,
     +         acq_INDUSTRIAL_REVENUES,
     +         acq_LIGHTING_REVENUES,
     +         acq_BULK_POWER_REVENUES,
     +         acq_CAPACITY_SALES_REVENUE,
     +         acq_GOVERNMENT_SALES_REVENUE,
     +         acq_CLASS_GAS_ADJ_CLAUSE_REVENUE,
     +         acq_COMPETITIVE_SALES_REVENUE,
     +         acq_FE_Competitive_Unit_Sales,
     +         acq_FE_Intra_Company_Utility_Sales)
C                     ENDIF
                     ACQ_OWNED_NF_BURN = ACQ_OWNED_NF_BURN +
     +                       OWNED_NF_BURN_SALES_FILE
                     ACQ_LEASED_NF_BURN = ACQ_LEASED_NF_BURN +
     +                        LEASED_NF_BURN_SALES_FILE
                     ACQ_SERVICE_TRANSACTION_EXPENSE =
     +                           ACQ_SERVICE_TRANSACTION_EXPENSE
     +                               + EXP_SERVICE_TRANSACTIONS
                     VOID_INT2 = RETURN_ANNUL_CUSTOMER_VARIABLES(
     +  INT2(-1),
     + acq_AFILIATE_PURCHASE_POWER_EXPENSE,
     +  ns_class_assets_results_2%SECONDARY_SALES_REVENUES,
     +  acq_CAPACITY_SALES_REVENUE,
     +  acq_RELATIONSHIP_REVENUES,
     +  acq_RESIDENTIAL_REVENUES,
     +  acq_COMPETITIVE_SALES_REVENUE,
     +  acq_UTILITY_SALES_REVENUE,
     +  acq_COMMERCIAL_REVENUES,
     +  acq_INDUSTRIAL_REVENUES,
     +  acq_LIGHTING_REVENUES,
     +  acq_BULK_POWER_REVENUES,
     +  acq_GOVERNMENT_SALES_REVENUE,
     +  acq_FE_Competitive_Unit_Sales,
     +  acq_CAPACITY_PURCHASES_TO_LEVEL_RM)  ! 725

                  ENDIF
                  TEST_ELIMINATIONS = .FALSE.
                  CALL EXISTING_ASSET_INFO(ASSET_YR,
     +                       ELIMINAITON_CLASS_ID_NUM,
     +                       EA_CLASS_EXISTS,
     +                      ns_class_parameters%INCOME_TAX_DEPRECIATION,
     +                       BOOK_DEPRECIATION,
     +                       CLASS_GPV(2,0),
     +                       CLASS_CUMULATIVE_DEPRECIATION(2,0),
     +                             EA_TAX_BOOK_DEP,
     +                       DEFERRED_TAX_BASIS,
     +                             EA_PROPERTY_TAX_GPV,
     +                             EA_PROPERTY_TAX_NPV,
     +                             EA_DEFERRED_TAXES)

                  CALL DEBT_ELIM_INFO(ASSET_YR,
     +                      ELIMINAITON_CLASS_ID_NUM,
     +                      DB_CLASS_EXISTS,
     +            PSDIV(YR,0),
     +                  ACQ_PREFERRED_STOCK_RETIREMENTS,
     +                      PREFERRED_STOCK_ISSUED,
     +                      LONG_TERM_DEBT_ISSUED,
     +                      LTDINT(YR,0),
     +                      ACQ_LONG_TERM_DEBT_RETIREMENTS,
     +                      ANNINT(YR,0),
     +                      ANN_PS_DIV(YR,0),
     +                      ANN_LTD_INT(YR,0),

     +                      OTHER_INCOME_AFILLIATES,
     +                      INVESTMENT_IN_AFILLIATES,
     +                      INTEREST_INCOME_AFILLIATES,
     +                      LOANS_TO_AFILLIATES,
     +                      PS_PREM_BAL,
     +                      PS_PREM_AMORT,
     +                      LTD_PREM_BAL,
     +                      LTD_PREM_AMORT,
     +                      PS_ISSUING_BAL,
     +                      PS_ISSUING_AMORT,
     +                      LTD_ISSUING_BAL,
     +                      LTD_ISSUING_AMORT,
     +                      LTD_PS_ISSUE_TAX_EXPENSE,
     +                      CS_ISSUE_EXP_THIS_PERIOD,
     +                      MIPS_INCOME_TAX_DEDUCTION,
     +                      ACQ_STD_INTEREST,
     +                      DEBT_FILE_INVESTMENTS(0),
     +                      NOTES_RECEIVABLE(0),
     +                      NOTES_PAYABLE(0),
     +                      DIVIDEND_70_NONTAXABLE,
     +                      DEBT_FILE_INVESTMENT_INCOME,
     +                      acq_STD_INTEREST_CASH_PAYMENT,
     +                      acq_LTD_INTEREST_CASH_PAYMENTS,
     +                      acq_PS_DIVIDEND_CASH_PAYMENTS,
     +                      BTL_CASH_EARNINGS,
     +                      acq_CURRENT_LTD_RETIREMENTS)

                  IF(SALT_RIVER_PROJECT()) THEN
                  ! PASS DECOM RETURN THROUGH INCOME
                     INVESTMENT_INCOME = ST_INVESTMENT_EARNINGS
     +  + RETIREMENT_MEDICAL_FUND_RETURN
     +  + LT_INVESTMENTS_EARNINGS
     +  + ns_class_parameters%NUCL_FUND_RETURN
     +  + DEBT_FILE_INVESTMENT_INCOME
     +  + Exp_InterestIncome
     +  + Exp_Dividends
                     INVESTMENT_INCOME_RECEIVABLE =
     +                             ST_INVESTMENT_EARNINGS
     +                             + LT_INVESTMENTS_EARNINGS
     +                             + DEBT_FILE_INVESTMENT_INCOME
     +                             + Exp_InterestIncome
     +                             + Exp_Dividends
                  ELSE
                     INVESTMENT_INCOME = ST_INVESTMENT_EARNINGS
     +                          + RETIREMENT_MEDICAL_FUND_RETURN
     +                          + LT_INVESTMENTS_EARNINGS
     +                          + DEBT_FILE_INVESTMENT_INCOME
     +                          + Exp_InterestIncome
     +                          + Exp_Dividends
                     IF(RETAIN_POST_RETIREMENT_EARNINGS()) THEN
                        INVESTMENT_INCOME_RECEIVABLE =
     +                             ST_INVESTMENT_EARNINGS
     +                             + LT_INVESTMENTS_EARNINGS
     +                             + DEBT_FILE_INVESTMENT_INCOME
     +                             + Exp_InterestIncome
     +                             + Exp_Dividends
                     ELSE
                        INVESTMENT_INCOME_RECEIVABLE =
     +                          ST_INVESTMENT_EARNINGS
     +                          + RETIREMENT_MEDICAL_FUND_RETURN
     +                          + LT_INVESTMENTS_EARNINGS
     +                          + DEBT_FILE_INVESTMENT_INCOME
     +                          + Exp_InterestIncome
     +                          + Exp_Dividends
                     ENDIF
                  ENDIF
                  IF(ACCURAL_ACCOUNTING_ACTIVE) THEN
                     INTEREST_DIVIDENDS_ACCRUDED = LTDINT(YR,0)
     +                              - acq_LTD_INTEREST_CASH_PAYMENTS
     +                              + PSDIV(YR,0)
     +                              - acq_PS_DIVIDEND_CASH_PAYMENTS
                     acq_CHANGE_INVEST_INCOME_RECIVABLE =
     +                              INVESTMENT_INCOME_RECEIVABLE
     +                              - BTL_CASH_EARNINGS
                     NEW_FINANCING_ACCRUALS = ACQ_STD_INTEREST
     + - acq_STD_INTEREST_CASH_PAYMENT
                  ELSE
                     INTEREST_DIVIDENDS_ACCRUDED = 0.
                     acq_CHANGE_INVEST_INCOME_RECIVABLE = 0.
                     NEW_FINANCING_ACCRUALS = 0.
                     acq_LTD_INTEREST_CASH_PAYMENTS = LTDINT(YR,0)
                     acq_PS_DIVIDEND_CASH_PAYMENTS = PSDIV(YR,0)
                     BTL_CASH_EARNINGS = INVESTMENT_INCOME_RECEIVABLE
                  ENDIF

C INTRA COMPANY NOTES 1/19/05 MSG

                  acq_CHANGE_INTEREST_DIVS_ACCRUED =
     +                               INTEREST_DIVIDENDS_ACCRUDED
     +                               + NEW_FINANCING_ACCRUALS
     +                               + COMMON_STOCK_DIV_ACCRUALS


       acq_TAXABLE_INVESTMENT_INCOME=DEBT_FILE_INVESTMENT_INCOME
     + -.7*DIVIDEND_70_NONTAXABLE !ONLY 30% TAXABLE
                  acq_NOTES_RECEIVABLE_BALANCE = NOTES_RECEIVABLE(0)
                  acq_NOTES_PAYABLE_BALANCE = NOTES_PAYABLE(0)
                  DEBT_FILE_ISSUE_EXPENSE = LTD_PS_ISSUE_TAX_EXPENSE
     +                              + CS_ISSUE_EXP_THIS_PERIOD
                  acq_LTD_PS_ISSUE_EXPENSES = DEBT_FILE_ISSUE_EXPENSE
                  LTD_PS_RETIREMENTS = ACQ_LONG_TERM_DEBT_RETIREMENTS
     +                         + ACQ_PREFERRED_STOCK_RETIREMENTS
                  ns_class_master%FED_INCOME_TAX_DEDUCTIONS = 
     + ns_class_master%FED_INCOME_TAX_DEDUCTIONS
     +                                +MIPS_INCOME_TAX_DEDUCTION
     +                                + LTD_PS_ISSUE_TAX_EXPENSE
     +                                + CS_ISSUE_EXP_THIS_PERIOD

                  LTD_PS_DEFERRED_TAX_BASIS = LTD_PS_ISSUE_TAX_EXPENSE
     +                                + CS_ISSUE_EXP_THIS_PERIOD
     +                                - LTD_ISSUING_AMORT
     +                                - PS_ISSUING_AMORT
     +                                - CS_ISSUE_EXP_AMORT

                  ns_class_parameters%CLASS_BTL_REVENUES = 
     + ns_class_parameters%CLASS_BTL_REVENUES +
     + ns_class_parameters%BTL_EMISSION_CREDIT_REVENUE  +
C ADD THEN SUBSTRACTED FOR TAXES AND AT THE END OF THE FINANCING LOOP
     +                        acq_CATAWBA_OTHER_NET_REVENUES +
     +                        OTHER_INCOME_AFILLIATES +
     +                        acq_OTHER_INCOME_NET_OF_TAX
       ns_class_parameters%CASH_OTH_ASSET = 
     + ns_class_parameters%CASH_OTH_ASSET +
     +                     INVESTMENT_IN_AFILLIATES +
     +                     LOANS_TO_AFILLIATES
        OTHER_ASSETS(2,0) = OTHER_ASSETS(1,0) + 
     + ns_class_parameters%CASH_OTH_ASSET

                  CALL DEBIT_INFO(ASSET_YR,
     +                    ELIMINAITON_CLASS_ID_NUM,
     +                        DD_CLASS_EXISTS,
     +                        DD_BALANCE,
     +                    DEFERRED_DEBITS_RATE_BASE(2,0),
     +                    AMORTIZATION_EXPENSE,
     +                    NET_DD_BALANCE(2,0),
     +                        DD_CUM_AMORTIZATION,
     +                        DD_CUM_RB_AMORTIZATION,
     +                    INTEREST_AMORTIZATION,
     +                    acq_ATL_AMORTIZATION,
     +                    BTL_AMORTIZATION,
     +                    ATL_DEF_TAXES,
     +                    BTL_DEF_TAXES_CR,
     +                    UNAMORTIZED_INTEREST_BALANCE(2,0),
     +                    ns_class_parameters%DEFERRED_EXPENSE_CASH,
     +                    acq_VARIABLE_OM_AMORT,
     +                    DD_ATL_CURRENT_TAX_EXPENSE,
     +                    DD_BTL_CURRENT_TAX_EXPENSE,
     +                    acq_OTHER_OM_AMORT,
     +                    acq_PURCHASE_POWER_AMORT,
     +                    OTHER_DD_BALANCE(2,0),
     +                    GOODWILL(2,0),
     +                    acq_CLASS_REGULATORY_ASSETS,
     +                    acq_FASB_109,
     +                    acq_FASB_133,
     +                    acq_OTHER_DD_AMORT,
     +                    acq_GOODWILL_AMORT,
     +                    acq_CLASS_REGULATORY_ASSETS_AMORT,
     +                    acq_FASB_109_AMORT,
     +                    acq_FASB_133_AMORT,
     +                    UNAMORTIZED_ISSUE_EXP_BALANCE(2,0),
     +                    DEFERRED_CREDITS_IN_RATE_BASE(2,0),
     +                    OTHER_DEFERRED_CREDITS_BAL(2,0),
     +                    REGULATORY_DEFERRED_CREDITS_BAL(2,0),
     +                    GAIN_ON_REAQUIRED_DEBT_BAL(2,0),
     +                    DEFERRED_GAIN_FROM_SALES(2,0))
                  INTEREST_AMORTIZATION = INTEREST_AMORTIZATION  -
     +                            LTD_PREM_AMORT +
     +                            LTD_ISSUING_AMORT
                  acq_BTL_AMORTIZATION_IN_EXPENSES =
     +                           acq_BTL_AMORTIZATION_IN_EXPENSES +
     +                           BTL_AMORTIZATION
                  AMORTIZATION_EXPENSE = acq_ATL_AMORTIZATION
c    +                                 + BTL_AMORTIZATION
     +                         + INTEREST_AMORTIZATION
     +                         + acq_ATL_LEASE_AMORTIZATION
     +                         + acq_BTL_AMORTIZATION_IN_EXPENSES
     +                         + acq_PS_PREM_ISSUE_EXP_AMORT
     +                         + acq_VARIABLE_OM_AMORT
     +                         + acq_OTHER_OM_AMORT
     +                         + acq_PURCHASE_POWER_AMORT
     +                         + acq_FASB143_ARO_INTEREST_ACCREATION

                  CALL NUCLEAR_FUEL_INFO(ASSET_YR,
     +                ELIMINAITON_CLASS_ID_NUM,
     +                  NF_CLASS_EXISTS,
     +                  ACQ_NF_CASH,
     +                NF_IN_PROCESS(2,0),
     +                  ACQ_NF_ENTERING_SERVICE,
     +                NFIS(2,0),
     +                CLASS_NET_NF_VALUE(2,0),
     +                NUC_FUEL_RATE_BASE(2,0),
     +                  acq_NF_AFUDC_ON_CASH,
     +                  NF_AFUDC_CAPITIALIZED,
     +                  NF_CURRENT_TAX_EXPENSE,
     +                  NF_DEFERRED_DEBIT_BALANCE,
     +                DEFERRED_DEBITS_RATE_BASE(2,0),
     +                ACQ_NF_ATL_AMORTIZATION,
     +                  NF_EXTRAORDINARY_EXPENSE,
     +                  NAFEXP,
     +                  NF_CLASS_ADJAFC,
     +                  NWODFT,
     +                  NAFDCB,
     +                  NAFDCD,
     +                  acq_CLASS_LEASED_NFCE,
     +                acq_NF_CAPITIALIZED_INTEREST,
     +                acq_NF_TAX_DEPRECIATION,
     +                NF_SL_TAX_DEPRECIATION_loc,
     +                LEASOR_DEFERRED_TAX_BASIS,
     +                LEASOR_NF_AMORTIZATION,
     +                LEASOR_NF_SL_TAX_DEP,
     +                LEASOR_NF_TAX_DEP)
                  acq_ATL_AMORTIZATION = acq_ATL_AMORTIZATION +
     +                                 ACQ_NF_ATL_AMORTIZATION
                ACQ_CAPITIALIZED_INTEREST = ACQ_CAPITIALIZED_INTEREST +
     +                                  acq_NF_CAPITIALIZED_INTEREST
                  ACQ_NF_ENTERING_SERVICE = ACQ_NF_ENTERING_SERVICE +
     +                                     NF_AFUDC_CAPITIALIZED

                  CALL FUTURE_ASSET_INFO(ASSET_YR,
     +                ELIMINAITON_CLASS_ID_NUM,
     +                FA_CLASS_EXISTS,
     +                CLASS_GPV(2,0),
     +                  FA_CUMULATIVE_BOOK_DEP,
     +                  ACQ_FA_CASH,
     +                  FA_CAPITIALIZED,
     +                ns_class_parameters%INCOME_TAX_DEPRECIATION,
     +                BOOK_DEPRECIATION,
     +                  FA_AFDC_CASH,
     +                  FA_AFDC_CAPITIALIZED,
     +                CLASS_CWIP(2,0),
     +                CWIP_IN_RATE_BASE(2,0),
     +                  FA_CURRENT_TAX_EXPENSES,
     +                ACQ_CAPITIALIZED_INTEREST,
     +                  FA_PROPERTY_TAX_GPV,
     +                  FA_PROPERTY_TAX_NPV,
     +                acq_ATL_AMORTIZATION,
     +                  FA_EXTRAORDINARY_EXPENSE,
     +                  FA_NET_DEFERRED_DEBIT_BAL,
     +                DEFERRED_DEBITS_RATE_BASE(2,0),
     +                DEFERRED_TAX_BASIS, ! TTXDEF
     +                  FA_SL_TAX_DEP, ! TBKDPT(I)
     +                ns_class_parameters%TAX_PREFERENCE_DEPRECIATION,
     +                ns_class_parameters%ACE_TAX_DEPRECIATION,
     + ! Write-off adjustment to cumulative book depreciaton
     +                  FA_WO_ADJUSTMENT_2_CUM_BOOK_DEP,
     +                  FA_WO_ADJUSTMENT_2_CUM_AFDC_DEP,
     +                FA_AFDC_BORROWED,
     +                FA_WO_ADJUSTMENT_2_CUM_AFDC,
     + FA_WO_ADJUSTMENT_2_CUM_AFEXP,  ! TAFEXP(I)
     + FA_WO_ADJUSTMENT_2_CUM_DEF_TAX, ! TWODFT(I)
     +               FA_WO_ADJUSTMENT_2_CUM_AFDCF,  ! TAFDCF(I)
     +                  FA_ITC_CREDIT)

               VOID_LOGICAL = RETURN_CL_INTRA_EXPENSES(acq_fuel_expense,
     +                             ACQ_LEASED_NF_BURN,
     +                             ACQ_OWNED_NF_BURN,
     +                             CL_MARKET_PURCHASES,
     +                             ACQ_NUC_FUEL_OWNED_BURN,
     +                             ACQ_NUC_FUEL_LEASED_BURN)

C DSM INFORMATION

            CALL DSM_EXPENSE_INFO(ELIMINAITON_CLASS_ID_NUM,
     +                             DSM_EXPENSE_CLASS_EXISTS,
     +                             ACQ_DSM_EXPENSE,
     +                             ACQ_DSM_REBATE,
     + acq_OTHER_PURCHASE_POWER_EXPENSE,
     + ns_class_assets_results_2%SECONDARY_SALES_REVENUES,
     +  ns_class_parameters%CLASS_BTL_EXPENSES,
     +  ns_class_parameters%CLASS_BTL_REVENUES,
     +  DSM_ADJ_CLAUSE_COLLECTIONS,
     +  DSM_CAPITIAL,
     +  DSM_CAPACITY,
     +  DSM_ENERGY,
     +  DSM_PARTICIPANT_COSTS,
     +  DSM_UTIL_NON_ELEC_COSTS,
     +  DSM_THIRD_PARTY_COSTS,
     +  DSM_OTH_PARTICIPANT_COSTS)

            CALL DSM_ASSET_INFO(YR,
     +             ELIMINAITON_CLASS_ID_NUM,
     +               DSM_ASSET_CLASS_EXISTS,
     +             BOOK_DEPRECIATION,
     +               DSM_CUM_BOOK_DEP,
     +               CLASS_GPV(2,0),
     +               DSM_AFUDC,
     +               ns_class_parameters%INCOME_TAX_DEPRECIATION,
     +               DSM_TAX_EXPENSE,
     +             acq_ATL_AMORTIZATION,
     +               DSM_DEFERRED_DEBIT,
     +               DEFERRED_TAX_BASIS,
     +               DSM_TAX_PREF_DEP_ord,
     +               RB_DSM_AMRT_ord,
     +               RB_DSM_DFRD_TAX_BASIS,
     +               RB_DSM_AFUDC,
     +               RB_DSM_TAX_EXPENSE,
     +               DSM_REGLTD_BOOK_DEP,
     +               DSM_REGLTD_TAX_DEP,
     +               DSM_RGLTD_DEFERRED_DEBIT,
     +               DSM_REGULATED_NPV,
     +               DSM_GPV_PROP_TAX_loc,
     +               DSM_NPV_PROP_TAX_loc,
     +               DSM_SL_TAX_DEP_loc)

C ELIMINATION CLASS ADJUSTMENTS FOR CONSOLIDATING 11/21/02

            ns_class_parameters%GROSS_VALUE_OF_SOLD_ASSETS = 0.
            ns_class_parameters%CUMULATIVE_DEP_ON_SOLD_ASSETS = 0.
            ns_class_parameters%ATL_AMORT_OF_BOOK = 0.
            ns_class_parameters%BTL_AMORT_OF_BOOK = 0.
            ns_class_parameters%DEFERRED_TAX_ADJUSTMENT = 0.
            RETAINED_EARNINGS_ADJ = 0.
            EXTRA_ORDINARY_EXPENSE = 0.
            LT_LIAB_BAL_ADJ = 0.
            CWIP_BALANCE_ADJ = 0.
            ADJ_DEFERRED_TAX_DR_BALANCE = 0.
            CALL RETURN_TRANSFER_ADDENDUMS(YR,ELIMINAITON_CLASS_ID_NUM,
     +   ns_class_parameters%GROSS_VALUE_OF_SOLD_ASSETS,
     +   ns_class_parameters%CUMULATIVE_DEP_ON_SOLD_ASSETS,
     +   ADJUSTMENT_2_DEFERRED_TAXES_BAL,
     +   DEFERRED_DEBIT_ADJUSTMENT,
     +   NET_DEFERRED_DEBIT_ADJUSTMENT,
     +   ns_class_parameters%ATL_AMORT_OF_BOOK,
     +   ns_class_parameters%BTL_AMORT_OF_BOOK,
     +   ns_class_parameters%DEFERRED_TAX_ADJUSTMENT,
     +   ADJUSTMENT_2_DEFERRED_ITCS_BAL,
     +   NET_NUCLEAR_FUEL_ADJ(0),
     +   RETAINED_EARNINGS_ADJ,
     +   EXTRA_ORDINARY_EXPENSE,
     +   LT_LIAB_BAL_ADJ,
     +   CWIP_BALANCE_ADJ,
     +   ADJ_DEFERRED_TAX_DR_BALANCE,
     +   PAID_IN_CAPITAL,
     +   SUBSIDIARY_INVESTMENT_ADJ,
     +   GOODWILL_ADJUSTMENT,
     +   REG_ASSESTS_ADJUSTMENT,
     +   FASB109_ADJUSTMENT,
     +   FASB133_ADJUSTMENT,
     +   UNAMORT_INTEREST_ADJUSTMENT,
     +   NUCLEAR_DECOM_FUND_BAL_ADJ,
     +   CAP_LEASES_BAL_ADJ,
     +   ASSETS_NEC_BAL_ADJ,
     +   PREFERRED_STOCK_BAL_ADJ,
     +   LTD_BAL_ADJ,
     +   STD_BAL_ADJ,
     +   NUC_DECOM_LIAB_BAL_ADJ,
     +   LIABS_NEC_BAL_ADJ,
     +   OTHER_INVESTMENT_BAL_ADJ,
     +   NOTES_RECEIVABLE_BAL_ADJ,
     +   POST_RETIRE_MEDICAL_BAL_ADJ,
     +   DEFERRED_REVENUES_BAL_ADJ,
     +   DEFERRED_FUEL_BAL_ADJ,
     +   DEFERRED_PURCH_GAS_BAL_ADJ,
     +   LT_INVEST_BAL_ADJ,
     +   ST_INVEST_BAL_ADJ,
     +   FUEL_INVENTORY_BAL_ADJ,
     +   GAS_IN_STORAGE_BAL_ADJ,
     +   MATRIAL_SUPPLY_BAL_ADJ,
     +   ACCOUNTS_RECV_BAL_ADJ,
     +   UNBILLED_REV_BAL_ADJ,
     +   TAXES_RECEIVABLE_BAL_ADJ,
     +   CURRENT_LT_DEBT_BAL_ADJ,
     +   NOTES_PAYABLE_BAL_ADJ,
     +   CUSTOMER_DEPOSIT_BAL_ADJ,
     +   CICA_BAL_ADJ,
     +   POST_RETIRE_PAYABLE_BAL_ADJ,
     +   ACCRUED_PENSION_BAL_ADJ,
     +   DEFERRED_GAINS_BAL_ADJ,
     +   storm_RESERVE_BAL_ADJ,
     +   ACCOUNTS_PAYABLE_BAL_ADJ,
     +   ARO_NET_ASSETS_BAL_ADJ,
     +   ARO_LIABILITY_BAL_ADJ,
     +   DEFERRED_PURCHASE_POWER_ADJ,
     +   COI_EARNINGS_ADJ)

C FASB 87 ACCOUNTING FOR IPL

                  CALL MONTHLY_FASB87_CALCULATIONS(
     +                    ELIMINAITON_CLASS_ID_NUM,
     +                    YR,
     +             OTHER_COMPREHENSIVE_INCOME_BALANCE(0),  ! 730
     +                    FASB_87_INTANGIBLE_ASSETS(0),
     +                    PENSION_LIABILITY(2,0),
     +                    FASB_87_DEFERRED_TAX_ADJ_DR,
     +                    NORMALIZATION_TAX_RATE)

C END ROUTINE CALLS

       acq_PURCHASE_POWER_EXPENSE = acq_OTHER_PURCHASE_POWER_EXPENSE
     +                        + CL_MARKET_PURCHASES
     + + acq_AFILIATE_PURCHASE_POWER_EXPENSE
     +                        + acq_WVPA_NON_MEMBER_COST_OF_POWER
     +                        + acq_WVPA_MEMBER_COST_OF_POWER
     +                        + ODEC_NA3_PURCHASE_EXPENSE
                  acq_FE_EXP_PURCHASE_POWER_EXPENSE =
     +                              acq_OTHER_PURCHASE_POWER_EXPENSE
                  acq_OTHER_PURCHASE_POWER_EXPENSE =
     +                         acq_OTHER_PURCHASE_POWER_EXPENSE
     + + acq_AFILIATE_PURCHASE_POWER_EXPENSE
     +                         + ODEC_NA3_PURCHASE_EXPENSE
                  AFUDC = FA_AFDC_CASH + acq_NF_AFUDC_ON_CASH +
     +                              AI_AFUDC_ON_CASH + DSM_AFUDC
                  ACQ_AFUDC_EQUITY = (1.-CLASS_BORROWED_AFUDC_RATE) *
     +                   (AFUDC - FA_AFDC_CASH) +
     +                           FA_AFDC_CASH - FA_AFDC_BORROWED
                  ACQ_AFUDC_BORROWED = AFUDC - ACQ_AFUDC_EQUITY
              ACQ_SL_TAX_DEPRECIATION = EA_TAX_BOOK_DEP + FA_SL_TAX_DEP+
     +                     LEASOR_NF_SL_TAX_DEP + DSM_SL_TAX_DEP_loc

                  acq_REFERENCE_BASE_REVENUES = BASE_RATES_REVENUES
                  IF(ODEC()) THEN
                     ODEC_TIER_RETURN_ON_INTRAINTEREST =
     +(ns_class_parameters%MIN_COV_RATIO -1.) * (LTDINT(YR,0)
     + + INTEREST_AMORTIZATION
     + + ACQ_STD_INTEREST)
     + - ODEC_NA3_TIER_RETURN
       acq_REGULATED_REVENUES_12 = acq_REGULATED_REVENUES_12
     +   + ODEC_TIER_RETURN_ON_INTRAINTEREST
          ST_INVEST_BAL_ADJ = ST_INVEST_BAL_ADJ
     +     + ODEC_TIER_RETURN_ON_INTRAINTEREST
          IF(ODEC_NA3_ACTIVE) THEN
             acq_BULK_POWER_REVENUES = acq_BULK_POWER_REVENUES
     +            + ODEC_NA3_PURCHASE_EXPENSE
                     ENDIF
                  ENDIF
                  acq_TOTAL_BASE_RATES_REVENUES = BASE_RATES_REVENUES
     +                            + acq_UNBILLED_REVENUES
     +                            + acq_RESIDENTIAL_REVENUES
     +                            + acq_COMMERCIAL_REVENUES
     +                            + acq_INDUSTRIAL_REVENUES
     +                            + acq_LIGHTING_REVENUES
     +                            + acq_GOVERNMENT_SALES_REVENUE
     +                            + acq_CAPTURED_OPT_METHOD_REVENUES
     +                            + acq_WVPA_MEMBER_ACCRUED_REVENUES
     +                            + acq_REGULATED_REVENUES_11
     +                            + acq_REGULATED_REVENUES_12
     +                            + acq_REGULATED_REVENUES_13
     +                            + acq_REGULATED_REVENUES_14
     +                            + acq_REGULATED_REVENUES_15

C 10/9/96 OPERATING METHOD MAY NEED TO BE ADJUSTED HERE

      acq_NON_BASE_REVENUES = ACQ_ADJUSTMENT_CLAUSE_REVENUES
     +   + acq_CLASS_GAS_ADJ_CLAUSE_REVENUE
     +   + ns_class_assets_results_2%SECONDARY_SALES_REVENUES
     +   + CATAWBA_REVENUES
     +   + OTH_REVENUE_loc(2,0)
     +   + acq_GAS_REVENUES
     +   + acq_RELATIONSHIP_REVENUES
     +   + acq_BULK_POWER_REVENUES
     +   + acq_CAPACITY_SALES_REVENUE
     +   + acq_INC_CAPACITY_SALES_TO_LEVEL_RM ! 726
     +   + acq_TOTAL_DERIVATIVE_REVENUE
     +   + acq_TOTAL_FUEL_DERIV_REVENUES
     +   + acq_COMPETITIVE_SALES_REVENUE
     +   + acq_UTILITY_SALES_REVENUE
     +   + acq_ICAP_REVENUES
     +   + acq_FE_Competitive_Unit_Sales
     +   + acq_NON_REG_REVENUES_10
     +   + acq_NON_REG_REVENUES_11
     +   + acq_NON_REG_REVENUES_12
     +   + acq_NON_REG_REVENUES_13
     +   + acq_NON_REG_REVENUES_14
     +   + acq_NON_REG_REVENUES_15
        call write_trace_real(file_trace_aca, "2. NBR", 
     + acq_NON_BASE_REVENUES)

       OPERATING_REVENUES(2,0) = acq_TOTAL_BASE_RATES_REVENUES
     +                              + acq_NON_BASE_REVENUES

                  acq_GAV_OTHER_OPT_REVENUES = OPERATING_REVENUES(2,0) -
     +  acq_CAPACITY_SALES_REVENUE -
     +  ns_class_assets_results_2%SECONDARY_SALES_REVENUES

                  ACQ_CLASS_NUCLEAR_FUEL_EXPENSE = ACQ_OWNED_NF_BURN +
     +                                 ACQ_LEASED_NF_BURN +
     +                                 LEASOR_NF_AMORTIZATION +
     +                                 ACQ_DOE_NUC_FUEL_FEE +
     +                           ACQ_NUC_DECOMMISSIONING_COST
                  ACQ_NUC_FUEL_TOTAL_BURN = ACQ_NUC_FUEL_OWNED_BURN +
     +                          ACQ_NUC_FUEL_LEASED_BURN +
     +                          LEASOR_NF_AMORTIZATION
                  ACQ_NF_NON_CASH_EXPENSE = ACQ_NUC_FUEL_OWNED_BURN +
     +                          LEASOR_NF_AMORTIZATION +
     +                          BTL_NUC_FUEL_DECOM_LIABILITY +
     +                          ACQ_NUC_DECOMMISSIONING_COST
       ACQ_NF_CASH_EXPENSE = ACQ_LEASED_NF_BURN + ACQ_DOE_NUC_FUEL_FEE +
     +               ACQ_OWNED_NF_BURN - ACQ_NUC_FUEL_OWNED_BURN
          ACQ_OWNED_NF_BURN = LEASOR_NF_AMORTIZATION + ACQ_OWNED_NF_BURN

                  CUMULATIVE_NUCLEAR_BURN(0) =
     +                              CUMULATIVE_NUCLEAR_BURN(0) +
     +                              ACQ_NUC_FUEL_TOTAL_BURN
                  CLASS_NET_NF_VALUE(2,0) = CLASS_NET_NF_VALUE(2,0) -
     +                              CUMULATIVE_NUCLEAR_BURN(0)
                  acq_TRANS_NUKE_FUEL_BAL = 0.
                  NUC_FUEL_RATE_BASE(2,0) = NUC_FUEL_RATE_BASE(2,0) -
     +                              CUMULATIVE_NUCLEAR_BURN(0)

                  CLASS_CUMULATIVE_DEPRECIATION(2,0) =
     +                      CLASS_CUMULATIVE_DEPRECIATION(2,0) +
     +                      CUMULATIVE_BOOK_DEP_ADJUSTMENTS(0)

C END CONSOLIDATION CALCULATION ADJUSTMENTS

                  EXCLUDE_STATE_TAXES = 0.
                  CALL SUM_CASH_EXPENSES(acq_TOTAL_CASH_EXPENSES)

                  IF(USE_BURN_4_NUC_FUEL_TAX_EXP) THEN
                     acq_NF_TAX_EXPENSE = ACQ_LEASED_NF_BURN
     +                        + ACQ_OWNED_NF_BURN
     +                        + ACQ_DOE_NUC_FUEL_FEE
                     acq_NF_TAX_DEPRECIATION = LEASOR_NF_TAX_DEP
                   ACQ_NF_DEFERRED_TAX_BASIS = LEASOR_DEFERRED_TAX_BASIS
                  ELSE
                     acq_NF_TAX_EXPENSE = ACQ_LEASED_NF_BURN
     +                        + ACQ_OWNED_NF_BURN
     +                        - ACQ_NUC_FUEL_OWNED_BURN
     +                        + ACQ_DOE_NUC_FUEL_FEE
                     ACQ_NF_DEFERRED_TAX_BASIS = acq_NF_TAX_DEPRECIATION
     +                               - ACQ_OWNED_NF_BURN
     +                               + LEASOR_DEFERRED_TAX_BASIS
                     acq_NF_TAX_DEPRECIATION = acq_NF_TAX_DEPRECIATION
     +                             + LEASOR_NF_TAX_DEP
                  ENDIF
        ns_class_parameters%INCOME_TAX_DEPRECIATION = 
     + ns_class_parameters%INCOME_TAX_DEPRECIATION
     +                              + acq_NF_TAX_DEPRECIATION
C NON-CASH EXPENSES
                  acq_ATL_AMORTIZATION = acq_ATL_AMORTIZATION
     +  + ns_class_parameters%PARM_AMORTIZATION_ADJUSTMENT
     +  + ns_class_parameters%DEFERRED_EXPENSE_AMORT
     +  + ns_class_parameters%AMORT_DEF_REVENUES
     +  - CIAC_AMORTIZATION
     +  - ns_class_parameters%ATL_AMORT_OF_BOOK
     +  + acq_FASB143_ARO_INTEREST_ACCREATION
                  TOTAL_NON_CASH_EXPENSES = BOOK_DEPRECIATION
     +  + acq_ATL_AMORTIZATION
     +  + ACQ_NF_NON_CASH_EXPENSE
     +  - BTL_NUC_FUEL_DECOM_LIABILITY
     +  - ACQ_CATAWBA_LEVEL_CAP_PAYMENTS
     +  + acq_ATL_LEASE_AMORTIZATION
     +  + acq_VARIABLE_OM_AMORT
     +  + acq_OTHER_OM_AMORT
     +  + acq_PURCHASE_POWER_AMORT
     +  + acq_DEFERRED_FUEL_EXPENSE
     +  + acq_EXPENSING_MATRIALS_INVENTORY
     +  + acq_EXPENSING_GAS_INVENTORY
     +  + acq_EXPENSING_FUEL_INVENTORY
     +  + ACQ_VACATION_PAY_NON_CASH
     +  + acq_pension_expense_non_cash
     +  + ACQ_storm_expense_non_cash
     +  + acq_ExecBenefitsNonCash
     +  + acq_IncentiveCompensationNonCash
                  TOTAL_EXPENSES_B4_TAXES = acq_TOTAL_CASH_EXPENSES
     +                              + TOTAL_NON_CASH_EXPENSES
                  acq_AMORTIZATION_B4_CAP_SERVICE = acq_ATL_AMORTIZATION
     +   + acq_ATL_LEASE_AMORTIZATION
     +   + acq_BTL_AMORTIZATION_IN_EXPENSES
     +   + acq_VARIABLE_OM_AMORT
     +   + acq_OTHER_OM_AMORT
     +   + acq_PURCHASE_POWER_AMORT
     +   + acq_EXPENSING_MATRIALS_INVENTORY
     +   + acq_EXPENSING_GAS_INVENTORY
     +   + acq_EXPENSING_FUEL_INVENTORY
                  acq_FEDERAL_NOL_GENERATED = CONSOLIDATED_FED_NOL_GEN
                  acq_FEDERAL_NOLS_USED = CONSOLIDATED_FED_NOL_USED
                  acq_FED_CREDITS_USED = acq_SUBSIDARY_VARIABLES(341)
     +                       - CONSOLIDATED_FED_CREDITS_USED
                  ATL_CONSOLIDATED_FEDERAL_TAXES =
     +                           CONSOLIDATED_FEDERAL_TAXES
     +                           - SUB_TOTAL_BTL_FEDERAL_TAXES
     +                           - PARENT_BTL_FEDERAL_TAX
     +                           + SUB_TOTAL_BTL_INTRA_FED_TAXES
     +                           + PARENT_BTL_INTRA_FED_TAXES

                  BTL_CONSOLIDATED_FEDERAL_TAXES =
     +                            CONSOLIDATED_FEDERAL_TAXES -
     +                            ATL_CONSOLIDATED_FEDERAL_TAXES
                  ns_class_master%BTL_FEDERAL_TAXES =
     + ns_class_master%BTL_FEDERAL_TAXES
     +                        + SUB_TOTAL_BTL_INTRA_FED_TAXES
     +                        + PARENT_BTL_INTRA_FED_TAXES
       ns_class_master%BTL_FEDERAL_TAXES = SUB_TOTAL_BTL_FEDERAL_TAXES
     +                        + PARENT_BTL_FEDERAL_TAX
     +                        - BTL_CONSOLIDATED_FEDERAL_TAXES
                  ACQ_ATL_FEDERAL_TAXES = PARENT_ATL_FEDERAL_TAX
     +                        + SUB_TOTAL_ATL_FEDERAL_TAXES
     +                        - ATL_CONSOLIDATED_FEDERAL_TAXES
                  ACQ_ATL_STATE_TAXES = EXCLUDE_STATE_TAXES
     +                      - CONSOLIDATED_STATE_TAX_ADJ
     +                      - SUB_TOTAL_BTL_INTRA_STATE_TAXES
     +                      - PARENT_BTL_INTRA_STATE_TAXES
       ns_class_master%BTL_STATE_TAXES = SUB_TOTAL_BTL_INTRA_STATE_TAXES
     +                      + PARENT_BTL_INTRA_STATE_TAXES
                  BTL_INCOME_TAXES =
     + ns_class_master%BTL_STATE_TAXES +
     + ns_class_master%BTL_FEDERAL_TAXES
                  DEFERRED_TAXES_DR = CON_FED_DEFERRED_TAX_DR_ADJ
                  acq_FED_DEFERRED_TAXES_FROM_NOL =
     +                               CON_FED_DEFERRED_TAX_DR_ADJ
                  ACQ_TOTAL_EXPENSE_AND_TAXES = TOTAL_EXPENSES_B4_TAXES
     +                              + ACQ_ATL_STATE_TAXES
     +                              + ACQ_ATL_FEDERAL_TAXES
     +                              + DEFERRED_TAXES_DR
     +                              + EXCLUDE_TAX_DEFERRALS_CR
     +                              + EXCLUDE_ITC
     +                              + CLASS_PROPERTY_TAXES
     +                              + acq_OTHER_TAXES
     +                              + ACQ_OPERATING_REVENUE_TAX
     +                              + Payroll_Taxes
                  ACQ_OPERATING_INCOME = OPERATING_REVENUES(2,0) -
     +                       ACQ_TOTAL_EXPENSE_AND_TAXES
                  BTL_INCOME_TAXES=BTL_INCOME_TAXES + EXCLUDE_BTL_TAXES
                  ACQ_INCOME_B4_INTEREST = ACQ_OPERATING_INCOME
     +                         + ns_class_parameters%DEFERRED_REVENUES
     +                         + ns_class_parameters%CLASS_BTL_REVENUES
     +                         + INVESTMENT_INCOME
     +                         + Mark_to_Market
     +                         + FE_NonCashEarningsNonCorp
     +                         - ns_class_parameters%CLASS_BTL_EXPENSES
c    +                                 - BTL_NUC_FUEL_DECOM_LIABILITY
     +                         - BTL_DEF_TAXES_CR
     +                         - BTL_DEFERRED_TAXES_DR
     +                         - BTL_INCOME_TAXES
     +                         + ACQ_AFUDC_EQUITY
     +                         - acq_BTL_AMORTIZATION_IN_EXPENSES
                  INTEREST_ON_SHORT_TERM_DEBT(2,0) = ACQ_STD_INTEREST
                  ACQ_INTEREST_ON_LONG_TERM_DEBT = LTDINT(YR,0)
                  ACQ_LTD_INTEREST_AND_AMORTIZATION =
     +                          ACQ_INTEREST_ON_LONG_TERM_DEBT +
     +                              INTEREST_AMORTIZATION
                  ACQ_INCOME_AFTER_INTEREST = ACQ_INCOME_B4_INTEREST -
     +                          ACQ_INTEREST_ON_LONG_TERM_DEBT -
     +                            INTEREST_AMORTIZATION -
     +                            ACQ_STD_INTEREST +
     +                            ACQ_AFUDC_BORROWED
        ns_class_parameters%SUBSIDIARY_INCOME = 
     + ns_class_parameters%SUBSIDIARY_INCOME
     +                        + EXCLUDE_SUB_INCOME
                  NET_OF_TAX_EXEXP = FA_EXTRAORDINARY_EXPENSE +
     +                       NF_EXTRAORDINARY_EXPENSE -
     +                       ns_class_parameters%BTL_AMORT_OF_BOOK
                  ACQ_NET_PROFIT_OR_LOSS = ACQ_INCOME_AFTER_INTEREST +
     +                         ns_class_parameters%SUBSIDIARY_INCOME -
     +                         NET_OF_TAX_EXEXP
                  PREFERRED_DIVIDENDS = PSDIV(YR,0)
                  acq_PS_DIVIDEND_PLUS_AMORT = PSDIV(YR,0) +
     +                           acq_PS_PREM_ISSUE_EXP_AMORT
             ACQ_EARNINGS_AVAILABLE_TO_COMMON = ACQ_NET_PROFIT_OR_LOSS -
     +                                   PREFERRED_DIVIDENDS -
     +                                   acq_PS_PREM_ISSUE_EXP_AMORT
                  RETAINED_EARNINGS = ACQ_EARNINGS_AVAILABLE_TO_COMMON -
     +                                  EXCLUDE_COMMON_DIVIDENDS
                  acq_VARIABLE_EXPENSE_PLUS_AMORT = acq_variable_expense
     +                                  + acq_VARIABLE_OM_AMORT
                  acq_OTHER_OM_EXPENSE_PLUS_AMORT = acq_OTHER_EXPENSE_1
     +                                  + acq_OTHER_OM_AMORT
      acq_PUR_POWER_EXPENSE_PLUS_AMORT = acq_PURCHASE_POWER_EXPENSE
     +                                   + acq_PURCHASE_POWER_AMORT
                  acq_FUEL_EXPENSE_PLUS_AMORT = acq_fuel_expense
     +                        + acq_EXPENSING_FUEL_INVENTORY
       acq_PURCHASE_GAS_EXPENSE_PLUS_AMORT = ACQ_purchased_gas
     +  + acq_EXPENSING_GAS_INVENTORY

                  IF(CREDITS_ARE_IN_INCOME_STATEMENT) THEN
                     acq_UNUSED_FEDERAL_TAX_CREDITS =
     +                            CONSOLD_AVAIL_FED_TAX_CREDIT -
     +                            CONSOLIDATED_FED_CREDITS_USED
                     ACQ_NET_PROFIT_OR_LOSS = ACQ_NET_PROFIT_OR_LOSS -
     +                            acq_UNUSED_FEDERAL_TAX_CREDITS
                     ACQ_EARNINGS_AVAILABLE_TO_COMMON =
     +                        ACQ_EARNINGS_AVAILABLE_TO_COMMON -
     +                           acq_UNUSED_FEDERAL_TAX_CREDITS
                     RETAINED_EARNINGS = RETAINED_EARNINGS -
     +                           acq_UNUSED_FEDERAL_TAX_CREDITS
                     acq_UNUSED_CONSOLD_TAX_CREDITS =
     + -acq_UNUSED_FEDERAL_TAX_CREDITS
                     YEAR_END_UNUSED_CREDIT_BAL =
     +                              YEAR_END_UNUSED_CREDIT_BAL
     + + acq_UNUSED_CONSOLD_TAX_CREDITS
                  ELSE
                     acq_UNUSED_FEDERAL_TAX_CREDITS = 0.
                  ENDIF

                  DEFERRED_PURCHASE_POWER(2,0) =
     +                             DEFERRED_PURCHASE_POWER(2,0)
     +                             + DEFERRED_PURCHASE_POWER_ADJ
                  CLASS_DEFERRED_PURCHASE_GAS(0) =
     +                            CLASS_DEFERRED_PURCHASE_GAS(0)
     +                            + DEFERRED_PURCH_GAS_BAL_ADJ

                  CUM_DEF_REVENUES(2,0) = CUM_DEF_REVENUES(2,0)
     +                            + DEFERRED_REVENUES_BAL_ADJ
                  DEFERRED_FUEL_BALANCE(0) = DEFERRED_FUEL_BALANCE(0)
     +                               + DEFERRED_FUEL_BAL_ADJ

                  FASB143_NET_ASSET_VALUE(2,0) =
     +                              FASB143_NET_ASSET_VALUE(2,0)
     +                              + ARO_NET_ASSETS_BAL_ADJ
                  FASB143_LT_LIABILITY_VALUE(2,0) =
     +                           FASB143_LT_LIABILITY_VALUE(2,0)
     +                           + ARO_LIABILITY_BAL_ADJ

!TODO:  Remark about reused variable (GROSS_VALUE_OF_SOLD_ASSETS) is
! concerning. Explore; possibly replace with new variable.
                  CLASS_GPV(2,0) = CLASS_GPV(2,0)
     +          ! Reused variable
     +        + ns_class_parameters%GROSS_VALUE_OF_SOLD_ASSETS 
                  CLASS_CWIP(2,0) = CLASS_CWIP(2,0)
     +                      + CWIP_BALANCE_ADJ
                  CLASS_CUMULATIVE_DEPRECIATION(2,0) =
     +                        CLASS_CUMULATIVE_DEPRECIATION(2,0)
     + + ns_class_parameters%CUMULATIVE_DEP_ON_SOLD_ASSETS
                  NUC_DECOM_FUND_BAL(2,0) = NUC_DECOM_FUND_BAL(2,0)
     +                           + NET_NUCLEAR_FUEL_ADJ(0)
     +                           + NUCLEAR_DECOM_FUND_BAL_ADJ
                  OTHER_ASSETS(2,0) = OTHER_ASSETS(2,0)
     +                        + OTHER_INVESTMENT_BAL_ADJ
                  CAPITIALZIED_LEASES(2,0) = CAPITIALZIED_LEASES(2,0)
     +                               + CAP_LEASES_BAL_ADJ
                  CUMTXNORM(2,0) = CUMTXNORM(2,0)
     +                     + ADJ_DEFERRED_TAX_DR_BALANCE
                  CUM_DEF_REVENUES(2,0) = CUM_DEF_REVENUES(2,0)
     +                            + DEFERRED_REVENUES_BAL_ADJ
                  LIQUID_INVESTMENTS(2,0) = LIQUID_INVESTMENTS(2,0)
     +                              + ST_INVEST_BAL_ADJ
                  LONG_TERM_INVESTMENTS(0) = LONG_TERM_INVESTMENTS(0)
     +                               + LT_INVEST_BAL_ADJ
                  ACCOUNTS_RECEIVABLE(0) = ACCOUNTS_RECEIVABLE(0)
     +                             + ACCOUNTS_RECV_BAL_ADJ
                  FUEL_INVENTORY(0) = FUEL_INVENTORY(0)
     +                        + FUEL_INVENTORY_BAL_ADJ
                  POST_RETIREMENT_MEDICAL_FUND(0) =
     +                           POST_RETIREMENT_MEDICAL_FUND(0)
     +                           + POST_RETIRE_MEDICAL_BAL_ADJ
                  NOTES_RECEIVABLE(0) = NOTES_RECEIVABLE(0)
     +                          + NOTES_RECEIVABLE_BAL_ADJ
                  CLASS_MATERIALS_N_SUPPLIES(0) =
     +                             CLASS_MATERIALS_N_SUPPLIES(0)
     +                             + MATRIAL_SUPPLY_BAL_ADJ
                  CLASS_GAS_STORAGE(0) = CLASS_GAS_STORAGE(0)
     +                           + GAS_IN_STORAGE_BAL_ADJ
                  GOODWILL(2,0) = GOODWILL(2,0) + GOODWILL_ADJUSTMENT
                  acq_FASB_133 = acq_FASB_133 + FASB133_ADJUSTMENT
                  acq_FASB_109 = acq_FASB_109 + FASB109_ADJUSTMENT
                  CUM_REG_ASSET_ADJ_AT(0) = REG_ASSESTS_ADJUSTMENT
     +                              + CUM_REG_ASSET_ADJ_AT(0)
              acq_CLASS_REGULATORY_ASSETS = acq_CLASS_REGULATORY_ASSETS
     +                              + CUM_REG_ASSET_ADJ_AT(0)
                  OTHER_DD_BALANCE(2,0) = OTHER_DD_BALANCE(2,0)
     +                            + DEFERRED_DEBIT_ADJUSTMENT
                  NET_DD_BALANCE(2,0) = NET_DD_BALANCE(2,0)
     +                          + acq_CLASS_REGULATORY_ASSETS
     +                          + acq_FASB_133 ! FASB133_ADJUSTMENT
     +                          + acq_FASB_109 ! FASB109_ADJUSTMENT
     +                    + GOODWILL(2,0) ! GOODWILL_ADJUSTMENT
     +       + OTHER_DD_BALANCE(2,0) ! DEFERRED_DEBIT_ADJUSTMENT
                  INVESTMENT_IN_SUBSIDIARIES(2,0) =
     +                   INVESTMENT_IN_SUBSIDIARIES(2,0)
     +                   + SUBSIDIARY_INVESTMENT_ADJ
       ACQ_TOTAL_CAPITAL_SERVICE = acq_STD_INTEREST_CASH_PAYMENT
     +  + ACQ_INTEREST_ON_LONG_TERM_DEBT
     +     + PREFERRED_DIVIDENDS
     +     + EXCLUDE_COMMON_DIVIDENDS
                  PREFERRED_STOCK(2,0) = PREFERRED_STOCK(1,0)
     +                           + PREFERRED_STOCK_ISSUED
     +                        - ACQ_PREFERRED_STOCK_RETIREMENTS
     +                           + SBU_PS_ELIM
     +                           - PS_PREM_AMORT
     +                           + PREFERRED_STOCK_BAL_ADJ
                  LONG_TERM_DEBT(2,0) = LONG_TERM_DEBT(1,0)
     +                          + LONG_TERM_DEBT_ISSUED
     +                          - ACQ_LONG_TERM_DEBT_RETIREMENTS
     +                          + SBU_LTD_ELIM
     +                          - LTD_PREM_AMORT
     +                          + LTD_BAL_ADJ
                  NET_UTILITY_PLANT(2,0) = CLASS_GPV(2,0)
     +                      + CLASS_CWIP(2,0)
     +                      - CLASS_CUMULATIVE_DEPRECIATION(2,0)
     +                      + CLASS_NET_NF_VALUE(2,0)
                  LINEC(2,0) = LINEC(1,0)
     +                 + LIABS_NEC_BAL_ADJ
                  WCCUM(2,0) = WCCUM(1,0)

               ACQ_CHANGE_IN_WORKING_CAPITIAL = WCCUM(2,0) - WCCUM(1,0)

               COMMON_STOCK_2_ELIMINATE = acq_SUBSIDARY_VARIABLES(101) -
     +                                PARENT_COMMON_STOCK_ISSUED
                  COMMON_STOCK(2,0) = COMMON_STOCK(1,0)
     +                        + COMMON_STOCK_2_ELIMINATE
     +                        + PARENT_LEVEL_CS_ACQUISIONS
     +                        - SUB_COMMON_BUYBACK_CS_ADJ
     +                        + PAID_IN_CAPITAL
       ns_class_master%COMMON_STOCK_ISSUED = COMMON_STOCK_2_ELIMINATE
       ns_class_master%COMMON_STOCK_BOUGHT = 
     + SUB_COMMON_BUYBACK_CS_ADJ
                  LONG_TERM_DEBT_ISSUED = LONG_TERM_DEBT_ISSUED
     +                            + SBU_LTD_ELIM
                  ACQ_SHORT_TERM_DEBT_ISSUED = SBU_STD_ELIM
                  PREFERRED_STOCK_ISSUED = PREFERRED_STOCK_ISSUED +
     +                                               SBU_PS_ELIM
                  REARNC(2,0) = REARNC(1,0) + RETAINED_EARNINGS
     +                              + PARENT_LEVEL_RE_ACQUISIONS
     +                              - SUB_COMMON_BUYBACK_RE_ADJ
     +                              + RETAINED_EARNINGS_ADJ

                  OTHER_COMPREHENSIVE_INCOME_BALANCE(0) =
     +                     OTHER_COMPREHENSIVE_INCOME_BALANCE(0)
     +                     + EXCLUDE_SUB_OCI_EARNINGS
                  acq_CLASS_OCI_BALANCE =
     +             OTHER_COMPREHENSIVE_INCOME_BALANCE(0)  ! 730
                  COMMON_EQUITY(2,0) = REARNC(2,0) + COMMON_STOCK(2,0)
                  SHORT_TERM_DEBT(2,0) = SHORT_TERM_DEBT(1,0)
     +                           + SBU_STD_ELIM
     +                           + STD_BAL_ADJ
       acq_NUCLEAR_FUEL_LEASE_PAYMENTS = LEASED_NF_BURN_EXP_FILE
     +                               + LEASED_NF_BURN_SALES_FILE
     +                               + ACQ_NUC_FUEL_LEASED_BURN
                  ACQ_ELIMINATION_CASH_ADJUSTMENT = 0.

                  ! 3/15/98 THERE ISN'T AN ELIM FOR THIS.
                  CLASS_OTH_LIAB_SALE_ASSETS = 0
                  OTHER_LT_LIABILITY(2,0) = OTHER_LT_LIABILITY(1,0)

     + + acq_CLASS_LEASED_NFCE
     + - acq_NUCLEAR_FUEL_LEASE_PAYMENTS
     + + ns_class_parameters%CAPITIALIZED_LEASE_ADDITIONS
     + - (ns_class_parameters%ATL_LEASE_PAYMENTS +
     +                ns_class_parameters%BTL_LEASE_PAYMENTS)
C SALE OF ASSETS
     +                        + LT_LIAB_BAL_ADJ

                  NUC_DECOM_FUND_LIABILITY(0) =
     +                             NUC_DECOM_FUND_LIABILITY(0)
     +                             + NUC_DECOM_LIAB_BAL_ADJ

C REPORTING SECTION

                  ITC_USED = EXCLUDE_ITC ! removed for testing 1/19/09
                  ITC_AMORTIZATION = 0.
                  DEFERRED_TAXES_DR = CON_FED_DEFERRED_TAX_DR_ADJ
                  DEFERRED_TAXES_CR = EXCLUDE_TAX_DEFERRALS_CR
     +                        + EA_DEFERRED_TAXES
                  DEF_TAX_CR_BALANCE(2,0) = DEF_TAX_CR_BALANCE(1,0)
     +                         + ADJUSTMENT_2_DEFERRED_TAXES_BAL
     +                         + acq_TOTAL_DEF_TAXES_CR
                  acq_TOTAL_DEF_TAXES_CR = DEFERRED_TAXES_CR
     +                         + BTL_DEF_TAXES_CR
                  ACQ_AVERAGE_EQUITY =(COMMON_EQUITY(1,0) +
     +                                    COMMON_EQUITY(2,0))/2.

                  CUMTXNORM(2,0) = CUMTXNORM(1,0) - DEFERRED_TAXES_DR
     +                     - BTL_DEFERRED_TAXES_DR

     +  + acq_UNUSED_CONSOLD_TAX_CREDITS

                  acq_FED_TAXABLE_INCOME_AFTER_NOLS =
     +                           acq_SUBSIDARY_VARIABLES(136)
     +                           - CONSOLD_FED_INCOME_AFTER_NOLS
                  FEDERAL_TAXES = CONSOLIDATED_TAX_LIB_ADJUSTMENT
       ns_class_assets_results_2%ATL_INCOME_TAXES = 
     + CONSOLIDATED_TAX_LIB_ADJUSTMENT
     +                       - CONSOLIDATED_STATE_TAX_ADJ
      ns_class_master%COMMON_DIVIDENDS = EXCLUDE_COMMON_DIVIDENDS
       acq_COMMON_STOCK_CASH_DIVIDENDS = EXCLUDE_COMMON_DIVIDENDS
       ns_class_parameters%SUBSIDIARY_DIVIDEND=
     + SUB_DIVIDEND_PAYMENTS_2_PARENT(0)
                  ns_class_parameters%NEW_SUBSIDIARY_INVESTMENT =
     +                           SUB_EQUITY_NEEDS_FROM_PARENT(0)
       ns_class_parameters%NEW_SUBSIDIARY_INVESTMENT = 
     + acq_SUBSIDARY_VARIABLES(126)
                  acq_NEW_SUB_INVESTMENT = 0.
                  acq_goodwill_of_new_sub_investment = 0.

                  acq_INCOME_TAX_TIMING_ADJS = ACQ_ATL_FEDERAL_TAXES
     +                          + ACQ_ATL_STATE_TAXES
     + + ns_class_master%BTL_FEDERAL_TAXES
     + + ns_class_master%BTL_STATE_TAXES
     +                          - acq_FUNDS_CONSOLIDATING_ADJUSTMENT
     +                          + INTRA_TAXES_PAYABLE
                  acq_INCOME_TAX_TIMING_ADJS =
     +                         PARENT_STATE_TAXES_ACCRUAL_ADJ
     +                         + PARENT_FEDERAL_TAX_ACCRUAL_ADJ
     +                         + PARENT_NON_INCOME_TAX_ACCRL_ADJ
     +                         + SUB_TAXES_ACCRUAL
     +                         - CONSOLID_FED_INCOME_TAX_ACCRUAL
     +                         - CONSOLID_STATE_INC_TAX_ACCRUAL
     +                         - CONSOLID_NON_INCOME_TAX_ACCRUAL
                  IF(SALT_RIVER_PROJECT() .OR.
     +                   RETAIN_POST_RETIREMENT_EARNINGS()) THEN
                     ACCOUNTS_RECEIVABLE(0) = ACCOUNTS_RECEIVABLE(0)
     +                          + INTRA_TAXES_PAYABLE
     +                          + acq_CHANGE_IN_ACCOUNTS_RECEIVABLE
     + + acq_CHANGE_INVEST_INCOME_RECIVABLE

                  ELSE
                      ACCOUNTS_RECEIVABLE(0) = ACCOUNTS_RECEIVABLE(0)
     +                          + INTRA_TAXES_PAYABLE
     + + acq_CHANGE_INVEST_INCOME_RECIVABLE

                  ENDIF

       acq_FEDERAL_TAXES_ACCRUAL_ADJ = acq_SUBSIDARY_VARIABLES(444)
     +                         - INTRA_TAXES_PAYABLE

                  acq_FEDERAL_TAXES_ACCRUAL_ADJ = INTRA_TAXES_PAYABLE
                  acq_INCOME_TAX_PAYABLE_4_AFFILIATES =
     +                           CONSOLIDATED_TAX_LIB_ADJUSTMENT

         IF(globecom_YEAR <= LAST_AVAILABLE_MONTHLY_YEAR) THEN
            acq_ANNUAL_CASH_FLOW_TIMING_ADJUSTMENTS =
     + -acq_CHANGE_INVEST_INCOME_RECIVABLE
         ELSE
            acq_ANNUAL_CASH_FLOW_TIMING_ADJUSTMENTS =
     + -acq_CHANGE_INVEST_INCOME_RECIVABLE

         ENDIF
                  ACCOUNTS_PAYABLE(0) = ACCOUNTS_PAYABLE(0)
     +                         + acq_FEDERAL_TAXES_ACCRUAL_ADJ
     +                         + acq_CHANGE_IN_ACCOUNTS_PAYABLE
     + + acq_INCOME_TAX_PAYABLE_4_AFFILIATES

     + + acq_CHANGE_INTEREST_DIVS_ACCRUED
                  acq_INTRA_TAXES_PAYABLE_OUTPUT = INTRA_TAXES_PAYABLE
              ACQ_FEDERAL_TAXABLE_INCOME =CON_FEDERAL_TAXABLE_INCOME_ADJ
                  CALL SUMMARIZE_VARIABLES(INT2(0),YR)
                  CALL SET_NON_EQUIVALENCED_VARIABLES

               acq_VARIABLE(300) = 0. ! State BTL taxes are pass through
        ! Federal BTL Taxes passes Sub BTL and Parent
        acq_VARIABLE(302) = 0.
                  acq_VARIABLE(300) = ns_class_master%BTL_STATE_TAXES
                  acq_VARIABLE(302) = ns_class_master%BTL_FEDERAL_TAXES
                  acq_VARIABLE(138) = acq_SUBSIDARY_VARIABLES(138)
     +                    - CONSOLIDATED_FED_TAX_ADJ
                  acq_VARIABLE(134) = acq_VARIABLE(134)
     +                    - CONSOLIDATED_STATE_TAX_ADJ
       acq_VARIABLE(212) = acq_VARIABLE(134)! CONSOLIDATED_STATE_TAX_ADJ
                  acq_VARIABLE(24) = ACQ_ATL_STATE_TAXES
                  CALL RETURN_ALL_ELIMINATIONS_FOR(YR,acq_VARIABLE)
            acq_VARIABLE(225) = 
     + ns_class_parameters%STD_INTEREST_RATE * acq_VARIABLE(84)
                  acq_VARIABLE(226) = ns_class_parameters%ROEQU 
     + * acq_VARIABLE(79)
                  CALL CAL_ANNUALIZED_CAPTIAL_COSTS(acq_VARIABLE)
                  IF(ACQ_STATE_TAXABLE_INCOME_AFTER_NOLS /= 0.) THEN
                     CONSOLIDATED_STATE_TAX_RATE =

     +                     100.*acq_VARIABLE(345)/
     +                      ACQ_STATE_TAXABLE_INCOME_AFTER_NOLS
                  ELSE
       CONSOLIDATED_STATE_TAX_RATE = ns_class_parameters%STATE_TAX_RATE
                  ENDIF

C ADD SBU AND SUB TOGETHER

                  acq_FED_TAXABLE_INCOME_AFTER_NOLS = acq_VARIABLE(136)
       acq_VARIABLE(340) = ns_class_parameters%FEDERAL_TAX_RATE *
     +                             acq_FED_TAXABLE_INCOME_AFTER_NOLS
                  CALL INTRA_COMPANY_ADJUSTMENT(VARS_2_PASS,
     +                     acq_VARIABLE,acq_SUBSIDARY_VARIABLES)
                  CALL SET_NOT_AVAILABLE_VALUES(acq_VARIABLE)
                  IF(acq_FED_TAXABLE_INCOME_AFTER_NOLS > 0.) THEN
                     acq_VARIABLE(213) = 100. * acq_VARIABLE(340)/
     +                             acq_FED_TAXABLE_INCOME_AFTER_NOLS
                  ELSE
       acq_VARIABLE(213) = 100. * ns_class_parameters%FEDERAL_TAX_RATE
                  ENDIF
                  acq_VARIABLE(141) = CONSOLIDATED_STATE_TAX_RATE
                  acq_VARIABLE(29) = acq_VARIABLE(681)
     +                   + acq_VARIABLE(682)
     +                   + acq_VARIABLE(733)
        acq_TOTAL_EQUITY_WITH_OCI = acq_CLASS_OCI_BALANCE ! 730
     +                            + acq_VARIABLE(79)
          acq_TOTAL_CAPITIAL_BAL_WO_CURRENT_LTD = ACQ_TOTAL_CAPITIAL_BAL
                  acq_LTD_BALANCE_WO_CURRENT_LTD = acq_VARIABLE(81)
     +                                 - acq_CURRENT_LTD_RETIREMENTS
          acq_TOTAL_CAPITIAL_BAL_WO_CURRENT_LTD = ACQ_TOTAL_CAPITIAL_BAL
     +                                 - acq_CURRENT_LTD_RETIREMENTS
                  ASSET_CLASS_NAME = 'Consolidating Adjustments (-)'
                  IF(globecom_YEAR <= LAST_AVAILABLE_MONTHLY_YEAR .AND.
     +                                     MONTHLY_MIDAS_ACTIVE)
     +               CALL MONTHLY_EOY_ELIMINATIONS(acq_VARIABLE)
                  IF(ASSET_REPORTS_ACTIVE) THEN

C BASE YEAR SHAREHOLDER VALUE

                    ns_class_parameters%EQRATO = PARENT_EQUITY_RATIO
                    ns_class_parameters%ROEQU = PARENT_EQUITY_RATE
       ns_class_parameters%COST_OF_CAPITAL_RISK_ADJUSTMENT =
     + PARENT_EQUITY_RISK_ADJ
                    ns_class_parameters%PSRATE = PARENT_PS_RATE
                    ns_class_parameters%PSRATO = PARENT_PS_RATIO
                    ns_class_parameters%LTDRTE = PARENT_LTD_RATE
                ns_class_parameters%STD_INTEREST_RATE = PARENT_STD_RATE
       ns_class_parameters%STATE_TAX_RATE = PARENT_STATE_TAX_RATE

                     CALL CLASS_SHAREHOLDER_VALUE(acq_VARIABLE,
     +                                ZERO,
     +                                EMBEDDED_PARENT_LTD_COST,
     +                                EMBEDDED_PARENT_PS_COST)
                     CALL GRE_DSC_REPORT(acq_VARIABLE)
                     CALL EBITDA_REPORT(acq_VARIABLE)
                     CALL SUB_SEC_RATIOS(acq_VARIABLE)
                     IF(FirstEnergy_Is_Active) THEN
                        CALL FIRST_ENERGY_PandL_REPORT(INT2(-2),
     +                                      acq_VARIABLE,
     +                                      CL_ANN_CLASS_ENERGY,
     +  ZERO,
     + ZERO,
     + ZERO,
     + ZERO)
                     ENDIF
                     CALL CLASS_SHAREHOLDER_VALUE_NA(acq_VARIABLE)

                     CALL CONSOLIDATING_ADJS_NA(acq_VARIABLE)
                     acq_VARIABLE(641) = acq_VARIABLE(76)
     +                    - acq_VARIABLE(90) ! acq_ASSET_MINUS_LIABS
                     acq_VARIABLE(642) = acq_VARIABLE(641)
     +                       - CONSOLIDATING_PRIOR_INBALANCE
                     CONSOLIDATING_PRIOR_INBALANCE = acq_VARIABLE(641)

                     acq_OUTPUT_CLASS_ID = -2
                     CALL MG_LOCATE_WRITE(8,15,ASSET_CLASS_NAME,3,4)
                     WRITE(INCOME_UNIT,REC=OUTPUT_RCD_loc)
     +                     PRT_ENDPOINT(),
     +                     FLOAT(get_BASE_YEAR()+globecom_YEAR),
     +                     ASSET_CLASS_NAME,
     +                     acq_VARIABLE
                     IF(FirstEnergy_Is_Active)
     +  CALL FE_PCA_LEGAL_REPORTS(FLOAT(get_BASE_YEAR()+globecom_YEAR),
     +                            ASSET_CLASS_NAME,
     +                            OUTPUT_RCD_loc,
     +                            acq_VARIABLE)
          IF(get_BASE_YEAR()+globecom_year >= 2011 .and. .false.) THEN
             write(37673,1021) OUTPUT_RCD_loc,
     +                 ASSET_CLASS_NAME,
     +                 acq_VARIABLE
                  ENDIF
                     OUTPUT_RCD_loc = OUTPUT_RCD_loc - 1
                  ENDIF

C CONSOLIDATED ADJUSTMENTS TO PARENT


          acq_SUBSIDARY_VARIABLES(226)=
     + ns_class_parameters%ROEQU*acq_SUBSIDARY_VARIABLES(79)
               acq_SUBSIDARY_VARIABLES(51) = PARENT_STOCK_BOOK_VALUE
                 acq_SUBSIDARY_VARIABLES(52) = PARENT_STOCK_MARKET_PRICE
                  acq_SUBSIDARY_VARIABLES(53) = PARENT_AVERAGE_SHARES
                  acq_SUBSIDARY_VARIABLES(54) = PARENT_MARKET_TO_BOOK

            acq_SUBSIDARY_VARIABLES(56) = PARENT_DIVIDEND_PER_SHARE
                  acq_SUBSIDARY_VARIABLES(299) = PARENT_YEAR_END_SHARES
        acq_SUBSIDARY_VARIABLES(303) = PARENT_AVERAGE_STOCK_PRICE
                  acq_SUBSIDARY_VARIABLES(43) = PARENT_SUBSIDIARY_INCOME
     +                             + SUB_COLUMN_TOTAL_SUB_INCOME
     + - ns_class_parameters%SUBSIDIARY_INCOME
      ns_class_master%COMMON_DIVIDENDS = acq_SUBSIDARY_VARIABLES(48)
       ACQ_EARNINGS_AVAILABLE_TO_COMMON = acq_SUBSIDARY_VARIABLES(47)
        acq_SUBSIDARY_VARIABLES(59) = (CONSOLD_COMMON_EQUITY_BAL +
     +                   acq_SUBSIDARY_VARIABLES(79))/2.
              CONSOLD_COMMON_EQUITY_BAL = acq_SUBSIDARY_VARIABLES(79)
                  ACQ_AVERAGE_EQUITY = acq_SUBSIDARY_VARIABLES(59)
                  IF(ABS(ACQ_AVERAGE_EQUITY) >= 0.0001) THEN
            ACQ_RETURN_ON_EQUITY=100.*ACQ_EARNINGS_AVAILABLE_TO_COMMON/
     +                                 ACQ_AVERAGE_EQUITY
                  ELSE
                     ACQ_RETURN_ON_EQUITY = NOT_AVAIL
                  ENDIF
               IF(ABS(ACQ_EARNINGS_AVAILABLE_TO_COMMON) >= 0.0001) THEN
       ACQ_DIVIDEND_PAYOUT = 100.*
     + ns_class_master%COMMON_DIVIDENDS/
     +  ACQ_EARNINGS_AVAILABLE_TO_COMMON
                  ELSE
                     ACQ_DIVIDEND_PAYOUT = NOT_AVAIL
                  ENDIF
                  IF(ABS(PARENT_AVERAGE_SHARES) >= 0.0001) THEN
              ACQ_EARNINGS_PER_SHARE = ACQ_EARNINGS_AVAILABLE_TO_COMMON/
     +                                   PARENT_AVERAGE_SHARES
                  ELSE
                     ACQ_EARNINGS_PER_SHARE = NOT_AVAIL
                  ENDIF
                  ACQ_RETURN_ON_RATEBASE = acq_SUBSIDARY_VARIABLES(62)
                  ACQ_OPERATING_INCOME = acq_SUBSIDARY_VARIABLES(31)
                  IF(ABS(ACQ_RETURN_ON_RATEBASE) >= 0.0001) THEN
       ACQ_RETURN_ON_RATEBASE = 100. * ACQ_OPERATING_INCOME/
     +  ACQ_RETURN_ON_RATEBASE
                  ELSE
                     ACQ_RETURN_ON_RATEBASE = NOT_AVAIL
                  ENDIF
                  acq_SUBSIDARY_VARIABLES(61) = ACQ_RETURN_ON_RATEBASE
                  acq_SUBSIDARY_VARIABLES(55) = ACQ_EARNINGS_PER_SHARE
                  acq_SUBSIDARY_VARIABLES(58) = ACQ_RETURN_ON_EQUITY
                  acq_SUBSIDARY_VARIABLES(57) = ACQ_DIVIDEND_PAYOUT

              acq_SUBSIDARY_VARIABLES(341)=CONSOLIDATED_FED_CREDITS_USED
                  acq_SUBSIDARY_VARIABLES(139) = CONSOLIDATED_AMT_INCOME
              acq_SUBSIDARY_VARIABLES(355) = .20*CONSOLIDATED_AMT_INCOME
           acq_SUBSIDARY_VARIABLES(375) = acq_SUBSIDARY_VARIABLES(342) -
     +                              acq_SUBSIDARY_VARIABLES(341)
                  CONSOLID_RETAINED_EARNINGS_BAL =
     +                            acq_SUBSIDARY_VARIABLES(49)
     +                          + CONSOLID_RETAINED_EARNINGS_BAL
     +                          + BAL_SHEET_RE_SUB_ADJ
     +                          + CS_BUYBACK_ADJ_RETAINED_ERNING
                  acq_SUBSIDARY_VARIABLES(78) =
     +                            CONSOLID_RETAINED_EARNINGS_BAL


      acq_FED_TAXABLE_INCOME_AFTER_NOLS=acq_SUBSIDARY_VARIABLES(136)
              IF(ABS(acq_FED_TAXABLE_INCOME_AFTER_NOLS) >= 0.0001) THEN
                     acq_SUBSIDARY_VARIABLES(213) =
     +                      100.* acq_SUBSIDARY_VARIABLES(340)/
     +                             acq_FED_TAXABLE_INCOME_AFTER_NOLS
                  ELSE
               acq_SUBSIDARY_VARIABLES(213) = 
     + ns_class_parameters%FEDERAL_TAX_RATE*100.
                  ENDIF
                  ACQ_STATE_TAXABLE_INCOME_AFTER_NOLS =
     +                              acq_SUBSIDARY_VARIABLES(132)
              IF(ABS(ACQ_STATE_TAXABLE_INCOME_AFTER_NOLS) >= 0.0001)THEN
                     acq_SUBSIDARY_VARIABLES(141) =

     +                     100.*acq_SUBSIDARY_VARIABLES(345)/
     +                    ACQ_STATE_TAXABLE_INCOME_AFTER_NOLS
                  ELSE
      acq_SUBSIDARY_VARIABLES(141) = ns_class_parameters%STATE_TAX_RATE
                  ENDIF
                  CALL CAL_SUMMED_VALUES(acq_SUBSIDARY_VARIABLES)

                  ASSET_CLASS_NAME =
     +                trim(PARENT_CLASS_NAME)//' Consolidated'
      ns_class_parameters%ADJUSTMENT_2_ECONOMIC_ASSETS=
     + acq_SUBSIDARY_VARIABLES(262)
                  CALL CLASS_SHAREHOLDER_VALUE(acq_SUBSIDARY_VARIABLES,
     +                                CONSLD_YEAR_END_OP_ASSETS,
     +                                EMBEDDED_PARENT_LTD_COST,
     +                                EMBEDDED_PARENT_PS_COST)
                  acq_SUBSIDARY_VARIABLES(342) =
     +                              CONSOLIDATED_FED_TAX_CREDITS
                  acq_SUBSIDARY_VARIABLES(371) =
     +                           CONSOLID_FED_SEC_29_TAX_CREDITS
                  acq_SUBSIDARY_VARIABLES(372) =
     +                           CONSOLID_FED_SEC_42_TAX_CREDITS
                  acq_SUBSIDARY_VARIABLES(347) =
     +                            CONSOLIDATED_STATE_TAX_CREDITS

                  acq_VARIABLE = acq_SUBSIDARY_VARIABLES

                  IF(USE_ACTUAL_CON_DEFERRED_TAX_DR) THEN
                     DEFERRED_TAXES_DR = ACTUAL_CON_DEFERRED_TAXES_DR
               ACQ_TOTAL_EXPENSE_AND_TAXES = ACQ_TOTAL_EXPENSE_AND_TAXES
     +                                 - DEFERRED_TAXES_DR
                     acq_VARIABLE(28) = ACTUAL_CON_DEFERRED_TAXES_DR
                  ELSE
                     DEFERRED_TAXES_DR = acq_VARIABLE(28)

                  ENDIF
                  acq_AMT_CREDITS_USED = CONSOLID_AMT_CREDITS_USED
                  acq_AMT_CREDITS_CREATED = CONSOLID_AMT_CREDITS_CREATED
            acq_FED_TAX_CREDIT_PASSED_UP =CONSOLD_AVAIL_FED_TAX_CREDIT
                  ITC_USED = acq_FED_TAX_CREDIT_PASSED_UP
                  acq_SEC_29_CREDITS_PASSED_UP =
     +                           CONSOLID_FED_SEC_29_TAX_CREDITS
                  acq_SEC_42_CREDITS_PASSED_UP =
     +                           CONSOLID_FED_SEC_42_TAX_CREDITS
       acq_UNUSED_FEDERAL_TAX_CREDITS = acq_FED_TAX_CREDIT_PASSED_UP-
     +                                 acq_FED_CREDITS_USED
                  acq_LOST_SEC_29_CREDITS = CONSOLID_LOST_SEC_29_CREDITS
      acq_SEC_29_CREDITS_USED = acq_CONSOLID_SEC_29_CREDITS_USED

                  acq_TOTAL_EQUITY_WITH_OCI = acq_VARIABLE(730)! 731
     +                            + acq_VARIABLE(77)
     +                            + acq_VARIABLE(78)
                  CALL CONSOLIDATED_RATIOS()

                  IF(globecom_YEAR <= LAST_AVAILABLE_MONTHLY_YEAR .AND.
     +                                MONTHLY_MIDAS_ACTIVE) THEN
                     WRITE_MONTHLY_INFOR = ASSET_REPORTS_ACTIVE

          CALL CONSOLIDATED_MONTHLY_ANALYSIS(globecom_YEAR,CLASS,
     +               ASSET_CLASS_NAME,
     +               CLASS_POS,
     +               'C',
     +               INT2(-1), ! CLASS_LEVEL,
     +               WRITE_MONTHLY_INFOR,
     +               DONT_TALLY_THIS_CLASS,
     +               ELIMINAITON_CLASS_ID_NUM,
     +               THIS_IS_REPORTING_CLASS,
     +               acq_VARIABLE,
     +               CONSOLD_BOY_DEFERRED_TAXES_DR,
     +               CONSOLD_BOY_OTHER_LT_LIABS,
     +               CONSOLD_BOY_ACCOUNTS_PAYABLE,
     +               CONSOLD_BOY_DEFERRED_TAXES_CR,
     +               CONSOLD_BOY_SUB_INVESTMENT,
     +               CONSOLIDATED_FED_TAX_ADJ,
     +               CONSOLIDATED_STATE_TAX_ADJ,
     +               CONSOLD_BOY_RETAINED_EARNINGS,
     +               CONSOLD_BOY_ACCOUNTS_RECIABLE,
     +               CONSOLD_BOY_CWIP,
     +               CONSOLD_BOY_OTHER_ASSETS,
     +               CONSOLD_BOY_NET_DEFERRED_DEBITS,
     +               CONSOLD_BOY_CURRENT_ASSETS,
     +               CONSOLIDATED_LTD_BALANCE,
     +               CONSOLIDATED_BOY_FUNDS_BALANCE,
     +     CONSOLIDATED_INVESTMENT_INCOME_RECEIVABLE,
     +       CONSOLIDATED_LTD_BALANCE_WO_CURRENT_LTD)
             acq_SUBSIDARY_VARIABLES(390) = acq_SUBSIDARY_VARIABLES(390)
     +              - CONSOLIDATED_INVESTMENT_INCOME_RECEIVABLE
                  ENDIF

                  IF(REPORTING_CLASS_ID == -2) THEN
                     CALL STORE_REPORTING_VALUES(acq_VARIABLE)
                     THIS_IS_REPORTING_CLASS = .FALSE.
                  ENDIF
                  acq_VARIABLE(641) = acq_VARIABLE(76)
     +                    - acq_VARIABLE(90)
                  acq_VARIABLE(29) = acq_VARIABLE(681)
     +                   + acq_VARIABLE(682)
     +                   + acq_VARIABLE(733)
                  IF(ASSET_REPORTS_ACTIVE) THEN
                     CALL GRE_DSC_REPORT(acq_VARIABLE)
                     CALL EBITDA_REPORT(acq_VARIABLE)
                     CALL SUB_SEC_RATIOS(acq_VARIABLE)
                     IF(FirstEnergy_Is_Active) THEN
                        CALL FIRST_ENERGY_PandL_REPORT(INT2(-1),
     +                                      acq_VARIABLE,
     +                                      CL_ANN_CLASS_ENERGY,
     +                                 ZERO, ! EXP_FUEL_EXPENSE,
     +                        ZERO, ! EXP_PURCHASE_POWER_EXPENSE
     +                       ZERO, ! EXP_FILE_VARIABLE_EXPENSE
     +                           ZERO) !EXP_FILE_FIXED_EXPENSE
                     ENDIF
                     acq_VARIABLE(641) = acq_VARIABLE(76)
     +                    - acq_VARIABLE(90) ! acq_ASSET_MINUS_LIABS
                     acq_VARIABLE(642) = acq_VARIABLE(641)
     +                       - CONSOLIDATED_PRIOR_INBALANCE
                     CONSOLIDATED_PRIOR_INBALANCE = acq_VARIABLE(641)

                     IF(WVPA()) THEN
                        CALL WVPA_ANNUAL_RISK_VALUES(
     + acq_WVPA_MEMBER_RATES_WITH_SDI,    !744
     + acq_WVPA_MEMBER_RATES_WITHOUT_SDI, ! 745
     + acq_WVPA_MEMBER_ENERGY_SALES, ! 751
     + acq_WVPA_SDI_ENERGY_SALES) ! 752
                        CALL WVPA_ANNUAL_MARGINS(acq_VARIABLE)
                     ENDIF
                     IF(IMPA()) CALL IMPA_ANNUAL_RATIOS(PARENT_CLASS,
     +                                       CLASS,acq_VARIABLE,
     +                                         OPERATING_METHOD)
                     acq_VARIABLE(742) = acq_VARIABLE(731)
     +                       + acq_VARIABLE(80)
     +                       + acq_VARIABLE(741)
                     acq_OUTPUT_CLASS_ID = -1
                     CALL MG_LOCATE_WRITE(8,15,ASSET_CLASS_NAME,3,4)
                     WRITE(INCOME_UNIT,REC=OUTPUT_RCD_loc)
     +                      PRT_ENDPOINT(),
     +                      FLOAT(get_BASE_YEAR()+globecom_YEAR),
     +                      ASSET_CLASS_NAME,
     +                      acq_VARIABLE
                     IF(FirstEnergy_Is_Active)
     +  CALL FE_PCA_LEGAL_REPORTS(FLOAT(get_BASE_YEAR()+globecom_YEAR),
     +                            ASSET_CLASS_NAME,
     +                            OUTPUT_RCD_loc,
     +                            acq_VARIABLE)
       IF(get_BASE_YEAR()+globecom_year >= 2011 .and. .false.) THEN
          write(37673,1021) OUTPUT_RCD_loc,
     +              ASSET_CLASS_NAME,
     +              acq_VARIABLE
                     ENDIF
                     OUTPUT_RCD_loc = OUTPUT_RCD_loc - 1
                  ENDIF
                  CONSOLID_OCI_EARNINGS_BAL = acq_VARIABLE(730)
                  CONSOLD_BOY_DEFERRED_TAXES_DR = acq_VARIABLE(73)
                  CONSOLD_BOY_NET_DEFERRED_DEBITS = acq_VARIABLE(71)
                  CONSOLD_BOY_CWIP = acq_VARIABLE(64)
                  CONSOLD_BOY_OTHER_ASSETS = acq_VARIABLE(69)
                  CONSOLD_BOY_CURRENT_ASSETS = acq_VARIABLE(75)
                  CONSOLD_BOY_DEFERRED_TAXES_CR = acq_VARIABLE(87)
                  CONSOLD_BOY_OTHER_LT_LIABS =  acq_VARIABLE(83)
                  CONSOLD_BOY_ACCOUNTS_PAYABLE = acq_VARIABLE(389)
                  CONSOLD_BOY_ACCOUNTS_RECIABLE= acq_VARIABLE(390)
                  CONSOLD_BOY_RETAINED_EARNINGS = acq_VARIABLE(78)
                  CONSOLD_BOY_OTHER_DEFERRED_CREDITS = acq_VARIABLE(712)
              CONSOLD_BOY_REGULATORY_DEFERRED_CREDITS =acq_VARIABLE(711)
                  CONSOLD_BOY_GAIN_ON_REAQUIRED_DEBT = acq_VARIABLE(710)
                  CONSOLIDATED_BOY_FUNDS_BALANCE = acq_VARIABLE(74)
              CONSOLIDATED_LTD_BALANCE_WO_CURRENT_LTD =acq_VARIABLE(741)
                  CONSOLIDATED_LTD_BALANCE = acq_VARIABLE(81)
                  CONSOLD_BOY_SUB_INVESTMENT = 0.
                  R_TEMP = CLOSE_CONSOLIDATED_TAX_INFO()
                  EXIT
               ENDIF
            ENDIF
            LAST_CLASS_LEVEL = CLASS_LEVEL
         ENDDO
         IF(WVPA()) THEN
            CALL WVPA_ZERO_ACTUAL_DATA_BASE()
            VOID_LOGICAL = WVPA_SET_FUEL_TRACKER()
         ENDIF

         CALL MG_CLEAR_LINE(12,26,31,ALL_VERSIONS,0)
         CALL MG_LOCATE_WRITE(18,70,' ',3,2)
         CALL MG_LOCATE_WRITE(15,70," ",3,0)
         IF(ASSET_REPORTS_ACTIVE) READ(INCOME_UNIT,REC=START_RECORD-1)
         DEALLOCATE(SUB_EQUITY_NEEDS_FROM_PARENT,
     +      SUB_EARNINGS_2_COMMON,
     +      SUB_EARNINGS_2_EXCLUDE,
     +      SUB_DIVIDEND_PAYMENTS_2_PARENT,
     +      SUB_TOTAL_SUB_INCOME,
     +      SUB_SBU_ACE_TAX_DEPRECIATION,
     +      SUB_SBU_TAX_PRE_DEPRECIATION,
     +      SBU_RETIREE_MEDICAL_PAYMENTS,
     +      SBU_CASH_OTH_ASSET,
     +      SBU_DSM_CAPITIAL,
     +      SBU_BTL_LEASE_PAYMENTS,
     +      SBU_ATL_LEASE_PAYMENTS,
     +      SBU_CHANGE_DECOMMISSIONING_LIAB,
     +      PARENT_ACQUISITION_OF_SUB_COST,
     +      PARENT_ACQUISITION_GOODWILL,STAT=IOS)
         DEALLOCATE(PROPERTY_VALUE_GPV_WITH_CWIP,
     +      PROPERTY_VALUE_GPV_NO_CWIP,
     +      PROPERTY_VALUE_NPV_WITH_CWIP,
     +      PROPERTY_VALUE_NPV_NO_CWIP,
     +      EXCLUDED_SBU_PROPERTY_TAX,
     +      NUC_FUEL_RATE_BASE_AT,
     +      CWIP_IN_RATE_BASE_AT,
     +      SBU_ATL_TAX_EXPENSE,
     +      SBU_BTL_TAX_EXPENSE,
     +      SBU_CLASS_OTH_LIAB_SALE_ASSETS,
     +      SBU_DEFERRED_CREDIT_RATEBASE,
     +      SBU_DEFERRED_DEBIT_RATEBASE,STAT=IOS)
         DEALLOCATE(EXCLUDED_REVENUE_TAX_BASIS,
     +      EXCLUDED_REVENUE_TAX_BASIS_A,
     +      EXCLUDED_REVENUE_TAX_BASIS_B,
     +      EXCLUDED_REVENUE_TAX,
     +      EXCLUDED_OTHER_TAXES_REV,
     +      EXCLUDED_OTHER_TAXES_EXP,
     +      EXCLUDED_OTHER_TAXES,
     +      EXCLUDE_CAPITAL_TAXES_STATE,
     +      EXCLUDE_CAPITAL_TAXES_FED,
     +      EXCLUDE_CAPITAL_TAX_FED_BASIS,
     +      EXCLUDE_CAPITAL_TAX_STATE_BASIS,STAT=IOS)

      RETURN

      ENTRY NUC_FUEL_VALUES(R_NUC_FUEL_TAX_EXPENSE,
     +              R_NF_DEFERRED_TAX_BASIS,
     +              R_INC_NUCLEAR_FUEL_EXPENSE,
     +              R_NF_OWNED,
     +              R_NF_CASH_EXPENSE,
     +              R_NF_NON_CASH_EXPENSE,
     +              R_NF_SL_DEF_TAX_DEP)

         R_NUC_FUEL_TAX_EXPENSE = acq_SUBSIDARY_VARIABLES(227)
         R_NF_DEFERRED_TAX_BASIS = acq_SUBSIDARY_VARIABLES(238)
         R_INC_NUCLEAR_FUEL_EXPENSE = acq_SUBSIDARY_VARIABLES(16)
         R_NF_OWNED = acq_SUBSIDARY_VARIABLES(219)
         R_NF_CASH_EXPENSE = acq_SUBSIDARY_VARIABLES(237)
         R_NF_NON_CASH_EXPENSE = acq_SUBSIDARY_VARIABLES(231)
         R_NF_SL_DEF_TAX_DEP = acq_SUBSIDARY_VARIABLES(236)
      RETURN

      ENTRY RETURN_AI_CLASS_VALUES(R_AI_LAGGED_GPV,
     +                     R_AI_CLASS_CASH,
     +                     R_AI_ANNUAL_CLASS_DEP,
     +                     R_AI_AFUDC_ON_CASH,
     +                     R_AI_CLASS_EXPENSE)

         R_AI_LAGGED_GPV = AI_LAGGED_GPV
         R_AI_CLASS_CASH = AI_CLASS_CASH
         R_AI_ANNUAL_CLASS_DEP = AI_ANNUAL_CLASS_DEP
         R_AI_AFUDC_ON_CASH = AI_AFUDC_ON_CASH
         R_AI_CLASS_EXPENSE = AI_CLASS_EXPENSE
      RETURN

      ENTRY TRANSFER_ZERO_ASSETS(R_CLASS_POS)



C     ENTRY TRANSFER_ZERO_ASSETS(R_CLASS_POS)


C TRANSFER

         CLASS_GPV(1,R_CLASS_POS) = CLASS_GPV(2,R_CLASS_POS)
         CLASS_CWIP(1,R_CLASS_POS) = CLASS_CWIP(2,R_CLASS_POS)
         CWIP_IN_RATE_BASE(1,R_CLASS_POS) =
     +                          CWIP_IN_RATE_BASE(2,R_CLASS_POS)
         CLASS_CUMULATIVE_DEPRECIATION(1,R_CLASS_POS) =
     +              CLASS_CUMULATIVE_DEPRECIATION(2,R_CLASS_POS)

         CLASS_NET_NF_VALUE(1,R_CLASS_POS) =
     +                         CLASS_NET_NF_VALUE(2,R_CLASS_POS)
         RATE_BASE_loc(1,R_CLASS_POS) = RATE_BASE_loc(2,R_CLASS_POS)
         CAPITIALIZED_LEASES_RATE_BASE(1,R_CLASS_POS) =
     +              CAPITIALIZED_LEASES_RATE_BASE(2,R_CLASS_POS)
         DEFERRED_DEBITS_RATE_BASE(1,R_CLASS_POS) =
     +                  DEFERRED_DEBITS_RATE_BASE(2,R_CLASS_POS)
         NUC_FUEL_RATE_BASE(1,R_CLASS_POS) =
     +                         NUC_FUEL_RATE_BASE(2,R_CLASS_POS)
         CUM_ITC_DEF_RATEBASE(1,R_CLASS_POS) =
     +                       CUM_ITC_DEF_RATEBASE(2,R_CLASS_POS)
         CUM_DEF_TAX_RATEBASE(1,R_CLASS_POS) =
     +                       CUM_DEF_TAX_RATEBASE(2,R_CLASS_POS)
         NUC_DECOM_RATE_BASE(1,R_CLASS_POS) =
     +                        NUC_DECOM_RATE_BASE(2,R_CLASS_POS)
         CIAC_RATE_BASE(1,R_CLASS_POS) = CIAC_RATE_BASE(2,R_CLASS_POS)
         PLANT_IN_SERVICE_RATE_BASE(1,R_CLASS_POS) =
     +                 PLANT_IN_SERVICE_RATE_BASE(2,R_CLASS_POS)
         ASSET_NEC_IN_RATE_BASE(1,R_CLASS_POS) =
     +                     ASSET_NEC_IN_RATE_BASE(2,R_CLASS_POS)
         NET_UTILITY_PLANT(1,R_CLASS_POS) =
     +                          NET_UTILITY_PLANT(2,R_CLASS_POS)
         OTHER_ASSETS(1,R_CLASS_POS) = OTHER_ASSETS(2,R_CLASS_POS)
         CAPITIALZIED_LEASES(1,R_CLASS_POS) =
     +                        CAPITIALZIED_LEASES(2,R_CLASS_POS)
         OTHER_LT_LIABILITY(1,R_CLASS_POS) =
     +                         OTHER_LT_LIABILITY(2,R_CLASS_POS)
         FASB143_NET_ASSET_VALUE(1,R_CLASS_POS) =
     +                    FASB143_NET_ASSET_VALUE(2,R_CLASS_POS)
         FASB143_LT_LIABILITY_VALUE(1,R_CLASS_POS) =
     +                 FASB143_LT_LIABILITY_VALUE(2,R_CLASS_POS)
         INVESTMENT_IN_SUBSIDIARIES(1,R_CLASS_POS) =
     +                 INVESTMENT_IN_SUBSIDIARIES(2,R_CLASS_POS)
         LIQUID_INVESTMENTS(1,R_CLASS_POS) =
     +                         LIQUID_INVESTMENTS(2,R_CLASS_POS)
         DEF_TAX_CR_BALANCE(1,R_CLASS_POS) =
     +                         DEF_TAX_CR_BALANCE(2,R_CLASS_POS)
         DEF_ITC_BALANCE(1,R_CLASS_POS) = DEF_ITC_BALANCE(2,R_CLASS_POS)
         REARNC(1,R_CLASS_POS) = REARNC(2,R_CLASS_POS)
         COMMON_STOCK(1,R_CLASS_POS) = COMMON_STOCK(2,R_CLASS_POS)
         COMMON_EQUITY(1,R_CLASS_POS) = COMMON_EQUITY(2,R_CLASS_POS)
         PREFERRED_STOCK(1,R_CLASS_POS) = PREFERRED_STOCK(2,R_CLASS_POS)
         LONG_TERM_DEBT(1,R_CLASS_POS) = LONG_TERM_DEBT(2,R_CLASS_POS)
         COMMON_SHARES(1,R_CLASS_POS) = COMMON_SHARES(2,R_CLASS_POS)
         SHORT_TERM_DEBT(1,R_CLASS_POS)=SHORT_TERM_DEBT(2,R_CLASS_POS)
         OTHER_DEFERRED_CREDITS_BAL(1,R_CLASS_POS) =
     +                 OTHER_DEFERRED_CREDITS_BAL(2,R_CLASS_POS)
         REGULATORY_DEFERRED_CREDITS_BAL(1,R_CLASS_POS) =
     +            REGULATORY_DEFERRED_CREDITS_BAL(2,R_CLASS_POS)
         GAIN_ON_REAQUIRED_DEBT_BAL(1,R_CLASS_POS) =
     +                 GAIN_ON_REAQUIRED_DEBT_BAL(2,R_CLASS_POS)
         INTEREST_ON_SHORT_TERM_DEBT(1,R_CLASS_POS) =
     +                INTEREST_ON_SHORT_TERM_DEBT(2,R_CLASS_POS)
         BOOK_VALUE_STOCK(1,R_CLASS_POS)=BOOK_VALUE_STOCK(2,R_CLASS_POS)
         STOCK_PRICE_YEAR_END(1,R_CLASS_POS) =
     +                       STOCK_PRICE_YEAR_END(2,R_CLASS_POS)
         LINEC(1,R_CLASS_POS) = LINEC(2,R_CLASS_POS)
         OPERATING_REVENUES(1,R_CLASS_POS) =
     +                         OPERATING_REVENUES(2,R_CLASS_POS)
            call write_trace_real(file_trace_aca, "9. OR", 
     +           OPERATING_REVENUES(1, CLASS_POS))
         WCCUM(1,R_CLASS_POS) = WCCUM(2,R_CLASS_POS)
         CUMTXNORM(1,R_CLASS_POS) = CUMTXNORM(2,R_CLASS_POS)
         CUSTOMER_DEPOSITS_BAL(1,R_CLASS_POS) =
     +                      CUSTOMER_DEPOSITS_BAL(2,R_CLASS_POS)
         STD_RATE(1,R_CLASS_POS) = STD_RATE(2,R_CLASS_POS)
         CUM_DEF_REVENUES(1,R_CLASS_POS)=CUM_DEF_REVENUES(2,R_CLASS_POS)
         NFIS(1,R_CLASS_POS) = NFIS(2,R_CLASS_POS)
         NUC_DECOM_FUND_BAL(1,R_CLASS_POS) =
     +                         NUC_DECOM_FUND_BAL(2,R_CLASS_POS)
         CIAC_BALANCE(1,R_CLASS_POS) = CIAC_BALANCE(2,R_CLASS_POS)
         NET_DD_BALANCE(1,R_CLASS_POS) = NET_DD_BALANCE(2,R_CLASS_POS)
         OTHER_DD_BALANCE(1,R_CLASS_POS)=OTHER_DD_BALANCE(2,R_CLASS_POS)
         GOODWILL(1,R_CLASS_POS) = GOODWILL(2,R_CLASS_POS)
         UNAMORTIZED_INTEREST_BALANCE(1,R_CLASS_POS) =
     +               UNAMORTIZED_INTEREST_BALANCE(2,R_CLASS_POS)
         UNAMORTIZED_ISSUE_EXP_BALANCE(1,R_CLASS_POS) =
     +              UNAMORTIZED_ISSUE_EXP_BALANCE(2,R_CLASS_POS)
         PENSION_LIABILITY(1,R_CLASS_POS) =
     +                          PENSION_LIABILITY(2,R_CLASS_POS)
         DEFERRED_GAIN_FROM_SALES(1,R_CLASS_POS) =
     +                   DEFERRED_GAIN_FROM_SALES(2,R_CLASS_POS)
         STORM_RESERVE_BALANCE(1,R_CLASS_POS) =
     +                      STORM_RESERVE_BALANCE(2,R_CLASS_POS)
         ExecBenefitsBalance(1,R_CLASS_POS) =
     +                        ExecBenefitsBalance(2,R_CLASS_POS)
         IncentiveCompBalance(1,R_CLASS_POS) =
     +                       IncentiveCompBalance(2,R_CLASS_POS)
         ACCRUED_VACATION_PAY_BALANCE(1,R_CLASS_POS) =
     +               ACCRUED_VACATION_PAY_BALANCE(2,R_CLASS_POS)
         RB_INCLUDE_DEFERRED_TAX_DR(1,R_CLASS_POS) =
     +                 RB_INCLUDE_DEFERRED_TAX_DR(2,R_CLASS_POS)
         RB_INCLUDE_DEFERRED_REVENUES(1,R_CLASS_POS) =
     +               RB_INCLUDE_DEFERRED_REVENUES(2,R_CLASS_POS)
         RB_EXCLUDED_PENSION_LIABILITY(1,R_CLASS_POS) =
     +              RB_EXCLUDED_PENSION_LIABILITY(2,R_CLASS_POS)
         RB_EXCLUDED_DEFERRED_ASSET_GAIN
     + (1,R_CLASS_POS) =
     + RB_EXCLUDED_DEFERRED_ASSET_GAIN(2,R_CLASS_POS)
         RB_EXCLUDED_STORM_RESERVE(1,R_CLASS_POS) =
     +                  RB_EXCLUDED_STORM_RESERVE(2,R_CLASS_POS)
         RB_EXCLUDE_ACCRUED_VACATION_PAY(1,R_CLASS_POS) =
     +            RB_EXCLUDE_ACCRUED_VACATION_PAY(2,R_CLASS_POS)

C ZERO

         SHORT_TERM_DEBT(2,R_CLASS_POS) = 0.
         LINEC(2,R_CLASS_POS) = 0.
         WCCUM(2,R_CLASS_POS) = 0.
         CLASS_GPV(2,R_CLASS_POS) = 0.
         CWIP_IN_RATE_BASE(2,R_CLASS_POS) = 0.
         CLASS_CWIP(2,R_CLASS_POS) = 0.
         CLASS_CUMULATIVE_DEPRECIATION(2,R_CLASS_POS) = 0.
         CLASS_NET_NF_VALUE(2,R_CLASS_POS) = 0.
         NET_DD_BALANCE(2,R_CLASS_POS) = 0.
         OTHER_DD_BALANCE(2,R_CLASS_POS) = 0.
         GOODWILL(2,R_CLASS_POS) = 0.
         UNAMORTIZED_INTEREST_BALANCE(2,R_CLASS_POS) = 0.
         UNAMORTIZED_ISSUE_EXP_BALANCE(2,R_CLASS_POS) = 0.
         DEFERRED_DEBITS_RATE_BASE(2,R_CLASS_POS) = 0.
         DEFERRED_GAIN_FROM_SALES(2,R_CLASS_POS) = 0.
      RETURN

      ENTRY SUMMARIZE_4_MONTHLY_NEEDS(R_CLASS_POS)


         ACQ_TOTAL_INCOME_TAXES = 
     + ns_class_assets_results_2%ATL_INCOME_TAXES + BTL_INCOME_TAXES
     

         REVENUES_OTHER = OTH_REVENUE_loc(2,R_CLASS_POS)
         REVS_OPNG_loc = OPERATING_REVENUES(2,R_CLASS_POS)
         ACQ_STD_INTEREST = INTEREST_ON_SHORT_TERM_DEBT(2,R_CLASS_POS)
         ACQ_GROSS_PLANT_VALUE = CLASS_GPV(2,R_CLASS_POS)

         ACQ_CWIP = CLASS_CWIP(2,R_CLASS_POS)
         ACQ_GROSS_PLANT_VALUE_PLUS_CWIP = CLASS_GPV(2,R_CLASS_POS) +
     +                             CLASS_CWIP(2,R_CLASS_POS)

         ACQ_CUMULATIVE_DEPRECIATION =
     +                      CLASS_CUMULATIVE_DEPRECIATION(2,R_CLASS_POS)
         acq_ENDING_NF_RATE_BASE = NUC_FUEL_RATE_BASE(2,R_CLASS_POS)
         acq_ENDING_CWIP_RATE_BASE = CWIP_IN_RATE_BASE(2,R_CLASS_POS)
         ACQ_NET_NF_VALUE = CLASS_NET_NF_VALUE(2,R_CLASS_POS)
         ACQ_UTILITY_PLANT_NET = NET_UTILITY_PLANT(2,R_CLASS_POS)

         ACQ_TAX_CREDITS = ITC_USED - ITC_AMORTIZATION
         ACQ_ASSETS_OTHER = OTHER_ASSETS(2,R_CLASS_POS)
         acq_RETIREMENT_MEDICAL_FUND =
     +                         POST_RETIREMENT_MEDICAL_FUND(R_CLASS_POS)
         acq_CLASS_ACCOUNTS_PAYABLE = ACCOUNTS_PAYABLE(R_CLASS_POS)
        acq_CLASS_ACCOUNTS_RECEIVABLE = ACCOUNTS_RECEIVABLE(R_CLASS_POS)
         acq_CLASS_FUEL_INVENTORY = FUEL_INVENTORY(R_CLASS_POS)
         acq_MATERIALS_N_SUPPLIES =
     + CLASS_MATERIALS_N_SUPPLIES(R_CLASS_POS)
         acq_GAS_IN_STORAGE = CLASS_GAS_STORAGE(R_CLASS_POS)
         acq_DEFERRED_PURCHASED_GAS=
     + CLASS_DEFERRED_PURCHASE_GAS(R_CLASS_POS)

        acq_RETIREMENT_MED_PAYABLE=
     + POST_RETIREMENT_MED_PAYABLE(R_CLASS_POS)
        acq_DECOM_FUND_LIABILITY = NUC_DECOM_FUND_LIABILITY(R_CLASS_POS)
         ACQ_SUBSIDIARY_INVESTMENT =
     +                         INVESTMENT_IN_SUBSIDIARIES(2,R_CLASS_POS)
         ACQ_LEASES_CAPITALIZED = CAPITIALZIED_LEASES(2,R_CLASS_POS)
               
         ACQ_DECOMMISIONING_FUND_BAL = NUC_DECOM_FUND_BAL(2,R_CLASS_POS)
         ACQ_DD_BALANCE_NET = NET_DD_BALANCE(2,R_CLASS_POS)
         acq_OTHER_NET_DEFERRALS = OTHER_DD_BALANCE(2,R_CLASS_POS)
         acq_CLASS_UNAMORTIZED_INTEREST_BAL =
     +               UNAMORTIZED_INTEREST_BALANCE(2,R_CLASS_POS)
     +               + DEBT_FILE_UNAMORT_INTR_BAL(R_CLASS_POS)
         acq_CLASS_UNAMORTIZED_ISSUE_EXP_BALANCE =
     +              UNAMORTIZED_ISSUE_EXP_BALANCE(2,R_CLASS_POS)
     +              + DEBT_FILE_UNAMORT_ISS_EXP_BAL(R_CLASS_POS)
         acq_NET_GOODWILL = GOODWILL(2,R_CLASS_POS)
         ACQ_DEFERRED_REVENUES_CUM = CUM_DEF_REVENUES(2,R_CLASS_POS)
         ACQ_DEFERRED_TAXES_DR_BAL = CUMTXNORM(2,R_CLASS_POS)
         ACQ_ASSET_NEC = WCCUM(2,R_CLASS_POS) + LINEC(2,R_CLASS_POS)
     +       + ASSETS_NEC_BAL_ADJ
         ACQ_COMMON_STOCK_BAL = COMMON_STOCK(2,R_CLASS_POS)
         acq_YEAR_END_SHARES = COMMON_SHARES(2,R_CLASS_POS)
         acq_BOY_SHARES = COMMON_SHARES(1,R_CLASS_POS)
         ACQ_RETAINED_EARNINGS_BAL = REARNC(2,R_CLASS_POS)
         ACQ_COMMON_EQUITY_BAL = COMMON_EQUITY(2,R_CLASS_POS)
         ACQ_PREFERRED_STOCK_BAL = PREFERRED_STOCK(2,R_CLASS_POS)
         ACQ_LONG_TERM_DEBT_BAL = LONG_TERM_DEBT(2,R_CLASS_POS)
         acq_CLASS_OCI_BALANCE =
     +   OTHER_COMPREHENSIVE_INCOME_BALANCE(R_CLASS_POS)  ! 730
         acq_TOTAL_EQUITY_WITH_OCI = acq_CLASS_OCI_BALANCE
     +                   + ACQ_COMMON_EQUITY_BAL
         acq_TOTAL_CAPITIAL_WITH_OCI = acq_TOTAL_EQUITY_WITH_OCI
     +                     + PREFERRED_STOCK(2,R_CLASS_POS)
     +                     + LONG_TERM_DEBT(2,R_CLASS_POS)
         ACQ_TOTAL_CAPITIAL_BAL = COMMON_EQUITY(2,R_CLASS_POS)
     +                + PREFERRED_STOCK(2,R_CLASS_POS)
     +                + LONG_TERM_DEBT(2,R_CLASS_POS)
         acq_CLASS_DEFERRED_PURCHASE_POWER =
     +                            DEFERRED_PURCHASE_POWER(2,R_CLASS_POS)
         acq_CLASS_PENSION_LIABILITY = PENSION_LIABILITY(2,R_CLASS_POS)
         acq_CLASS_DEFERRED_GAIN_FROM_SALES =
     +                           DEFERRED_GAIN_FROM_SALES(2,R_CLASS_POS)
         acq_CLASS_STORM_RESERVE_BALANCE =
     +                              STORM_RESERVE_BALANCE(2,R_CLASS_POS)
         acq_Class_ExecBenefits_Balance =
     + -ExecBenefitsBalance(2,R_CLASS_POS)
         acq_Class_IncentiveComp_Balance=
     + IncentiveCompBalance(2,R_CLASS_POS)
         acq_CLASS_VACATION_PAY_BALANCE =
     +                       ACCRUED_VACATION_PAY_BALANCE(2,R_CLASS_POS)
         acq_OTHER_LT_LIABILITY_BAL = OTHER_LT_LIABILITY(2,R_CLASS_POS)
         acq_FASB143_ARO_NET_ASSET_BAL =
     +           FASB143_NET_ASSET_VALUE(2,R_CLASS_POS)
     +           + BALANCE_SHEET_ROLLUPS(2,ARO_Net_Assets,CLASS_LEVEL)
         acq_FASB143_ARO_LIABLILITY_BAL =
     +          FASB143_LT_LIABILITY_VALUE(2,R_CLASS_POS)
     +          + BALANCE_SHEET_ROLLUPS(2,aro_liabilities,CLASS_LEVEL)
         acq_CLASS_FASB87_BALANCE = 
     +      FASB_87_INTANGIBLE_ASSETS(R_CLASS_POS)
         acq_CLASS_OCI_BALANCE =
     +      OTHER_COMPREHENSIVE_INCOME_BALANCE(R_CLASS_POS) ! 103
         ACQ_SHORT_TERM_DEBT_BAL = SHORT_TERM_DEBT(2,R_CLASS_POS)
         ACQ_CUSTOMER_DEPOSITS_BALANCE =
     +                              CUSTOMER_DEPOSITS_BAL(2,R_CLASS_POS)
         ACQ_CIAC_BAL = CIAC_BALANCE(2,R_CLASS_POS)
         ACQ_DEF_TAX_CR_BAL = DEF_TAX_CR_BALANCE(2,R_CLASS_POS)
         ACQ_DEF_ITC_BAL = DEF_ITC_BALANCE(2,R_CLASS_POS)
         ACQ_LIABILITIES_NEC = LINEC(2,R_CLASS_POS)
         acq_FASB143_TOTAL_ARO_CASH_PAYMENTS =  ! 748
     +                acq_FASB143_ARO_CASH_PAYMENTS          ! 746
     +                + acq_FASB143_ARO_TRUST_CASH_PAYMENTS  ! 747
         OTHER_DEFERRED_CREDITS_BAL_BOY =
     +                 OTHER_DEFERRED_CREDITS_BAL(1,R_CLASS_POS)
     +                 + BALANCE_SHEET_ROLLUPS(1,Other_Deferred_Credits,
     +                                                      CLASS_LEVEL)
         REGULATORY_DEFERRED_CREDITS_BAL_BOY =
     +            REGULATORY_DEFERRED_CREDITS_BAL(1,R_CLASS_POS)
     +            + BALANCE_SHEET_ROLLUPS(1,Regulatory_Deferred_Credits,
     +                                                      CLASS_LEVEL)
         GAIN_ON_REAQUIRED_DEBT_BAL_BOY =
     +                    GAIN_ON_REAQUIRED_DEBT_BAL(1,R_CLASS_POS)
     +                   + BALANCE_SHEET_ROLLUPS(1,Reaquired_Debt_Gain ,
     +                                                      CLASS_LEVEL)


     
      RETURN

      ENTRY SUMMARIZE_VARIABLES(R_CLASS_POS,R_YR)


         IF(WE_ARE_CONSOLIDATING) THEN
            ACQ_DIVIDEND_FROM_SUBSIDIARY = 
     + ns_class_parameters%SUBSIDIARY_DIVIDEND +
     +                             SUB_COLUMN_TOTAL_SUB_DIVIDEND
            ACQ_TAX_PAYMENTS_2_PARENT_FROM_SUB =
     +                           SUB_FED_TAX_PAYMENTS_2_PARENT

         ACQ_INCOME_TAXES_CONSOLIDATED = CONSOLIDATED_INCOME_TAXES_PAID
            TAXES_PAID_BY_PARENT = PARENT_TAXES_PAID
         ELSE
            ns_class_master%COMMON_STOCK_ISSUED = 
     + ns_class_master%COMMON_STOCK_ISSUED
     + + ns_class_master%COMMON_STOCK_BOUGHT
            IF(PARENT_CLASS) THEN
               ACQ_DIVIDEND_FROM_SUBSIDIARY = 
     + ns_class_parameters%SUBSIDIARY_DIVIDEND
               ACQ_TAX_PAYMENTS_2_PARENT_FROM_SUB =
     +                           SUB_FED_TAX_PAYMENTS_2_PARENT

      ACQ_INCOME_TAXES_CONSOLIDATED=CONSOLIDATED_INCOME_TAXES_PAID
               TAXES_PAID_BY_PARENT = PARENT_TAXES_PAID
            ELSEIF(SUBSIDIARY_CLASS) THEN
               ACQ_DIVIDEND_FROM_SUBSIDIARY = 
     + ns_class_parameters%SUBSIDIARY_DIVIDEND
            ELSE
               ACQ_DIVIDEND_FROM_SUBSIDIARY = 0.
               ACQ_TAX_PAYMENTS_2_PARENT_FROM_SUB = 0.
               ACQ_INCOME_TAXES_CONSOLIDATED = 0.
               TAXES_PAID_BY_PARENT = 0.
            ENDIF
         ENDIF


       acq_FASB143_TOTAL_ARO_CASH_PAYMENTS =  ! 748
     + acq_FASB143_ARO_CASH_PAYMENTS          ! 746
     +                + acq_FASB143_ARO_TRUST_CASH_PAYMENTS  ! 747
     +                + acq_FASB143_ARO_TRUST_CASH_PAYMENTS  ! 747
     
         acq_NET_DERIVATIVES_INCOME = acq_TOTAL_DERIVATIVE_REVENUE
     +                    - acq_TOTAL_DERIVATIVE_EXPENSE
         acq_NET_FUEL_DERIV_MARGIN = acq_TOTAL_FUEL_DERIV_REVENUES
     +                   - acq_TOTAL_FUEL_DERIV_EXPENSES
         acq_OTHER_DD_AMORT =  acq_ATL_AMORTIZATION
     +             - acq_GOODWILL_AMORT
     +             - acq_CLASS_REGULATORY_ASSETS_AMORT
     +             - acq_FASB_109_AMORT
     +             - acq_FASB_133_AMORT
     +             - acq_FASB143_ARO_INTEREST_ACCREATION
     +             + CIAC_AMORTIZATION

         acq_NF_EXPENSE_WO_DECOM_DISPOSAL =
     + ACQ_CLASS_NUCLEAR_FUEL_EXPENSE
     +                          - ACQ_DOE_NUC_FUEL_FEE
     +                          - ACQ_NUC_DECOMMISSIONING_COST
         acq_NF_NON_CASH_WO_DECOMMISSIONING = ACQ_NF_NON_CASH_EXPENSE
     +                            - ACQ_NUC_DECOMMISSIONING_COST

         ACQ_TOTAL_INCOME_TAXES = 
     + ns_class_assets_results_2%ATL_INCOME_TAXES + 
     + BTL_INCOME_TAXES
     
         REVENUES_OTHER = OTH_REVENUE_loc(2,R_CLASS_POS)
         REVS_OPNG_loc = OPERATING_REVENUES(2,R_CLASS_POS)
         ACQ_STD_INTEREST = INTEREST_ON_SHORT_TERM_DEBT(2,R_CLASS_POS)
         ACQ_GROSS_PLANT_VALUE = CLASS_GPV(2,R_CLASS_POS)

         ACQ_CWIP = CLASS_CWIP(2,R_CLASS_POS)
         ACQ_GROSS_PLANT_VALUE_PLUS_CWIP = CLASS_GPV(2,R_CLASS_POS) +
     +                     CLASS_CWIP(2,R_CLASS_POS)

         ACQ_CUMULATIVE_DEPRECIATION =
     +                      CLASS_CUMULATIVE_DEPRECIATION(2,R_CLASS_POS)
         acq_ENDING_NF_RATE_BASE = NUC_FUEL_RATE_BASE(2,R_CLASS_POS)
         acq_ENDING_CWIP_RATE_BASE = CWIP_IN_RATE_BASE(2,R_CLASS_POS)
         ACQ_NET_NF_VALUE = CLASS_NET_NF_VALUE(2,R_CLASS_POS)
         ACQ_UTILITY_PLANT_NET = NET_UTILITY_PLANT(2,R_CLASS_POS)

         ACQ_ASSETS_OTHER = OTHER_ASSETS(2,R_CLASS_POS)
         acq_RETIREMENT_MEDICAL_FUND =
     +                         POST_RETIREMENT_MEDICAL_FUND(R_CLASS_POS)
         acq_CLASS_ACCOUNTS_PAYABLE = ACCOUNTS_PAYABLE(R_CLASS_POS)
        acq_CLASS_ACCOUNTS_RECEIVABLE = ACCOUNTS_RECEIVABLE(R_CLASS_POS)
         acq_CLASS_FUEL_INVENTORY = FUEL_INVENTORY(R_CLASS_POS)
      acq_MATERIALS_N_SUPPLIES = CLASS_MATERIALS_N_SUPPLIES(R_CLASS_POS)
         acq_GAS_IN_STORAGE = CLASS_GAS_STORAGE(R_CLASS_POS)
         acq_DEFERRED_PURCHASED_GAS=
     + CLASS_DEFERRED_PURCHASE_GAS(R_CLASS_POS)
         acq_RETIREMENT_MED_PAYABLE=
     + POST_RETIREMENT_MED_PAYABLE(R_CLASS_POS)
        acq_DECOM_FUND_LIABILITY = NUC_DECOM_FUND_LIABILITY(R_CLASS_POS)
     +                          + NUC_DECOM_LIAB_BAL_ADJ
         ACQ_SUBSIDIARY_INVESTMENT =
     +                         INVESTMENT_IN_SUBSIDIARIES(2,R_CLASS_POS)

         ACQ_LEASES_CAPITALIZED = CAPITIALZIED_LEASES(2,R_CLASS_POS)
               
         ACQ_DECOMMISIONING_FUND_BAL = NUC_DECOM_FUND_BAL(2,R_CLASS_POS)
         ACQ_DD_BALANCE_NET = NET_DD_BALANCE(2,R_CLASS_POS)
         acq_OTHER_NET_DEFERRALS = OTHER_DD_BALANCE(2,R_CLASS_POS)
         acq_NET_GOODWILL = GOODWILL(2,R_CLASS_POS)

         acq_UNAMORT_DEBIT_INTEREST_BAL =
     +                       UNAMORTIZED_INTEREST_BALANCE(2,R_CLASS_POS)
      acq_CLASS_UNAMORTIZED_INTEREST_BAL = acq_UNAMORT_DEBT_INTEREST_BAL
     +                            + acq_UNAMORT_DEBIT_INTEREST_BAL
         ACQ_DEFERRED_REVENUES_CUM = CUM_DEF_REVENUES(2,R_CLASS_POS)
         ACQ_DEFERRED_TAXES_DR_BAL = CUMTXNORM(2,R_CLASS_POS)
         ACQ_ASSET_NEC = WCCUM(2,R_CLASS_POS) + LINEC(2,R_CLASS_POS)
     +       + ASSETS_NEC_BAL_ADJ
         ACQ_COMMON_STOCK_BAL = COMMON_STOCK(2,R_CLASS_POS)
         acq_YEAR_END_SHARES = COMMON_SHARES(2,R_CLASS_POS)
         acq_BOY_SHARES = COMMON_SHARES(1,R_CLASS_POS)
         acq_COMMON_SHARES_ISSUE_THIS_PERIOD = acq_YEAR_END_SHARES
     +   - acq_BOY_SHARES
     
    
         ACQ_RETAINED_EARNINGS_BAL = REARNC(2,R_CLASS_POS)
         ACQ_PREFERRED_STOCK_BAL = PREFERRED_STOCK(2,R_CLASS_POS)
     +                         + PREFERRED_STOCK_BAL_ADJ
         ACQ_LONG_TERM_DEBT_BAL = LONG_TERM_DEBT(2,R_CLASS_POS)
     +                        + LTD_BAL_ADJ
         ACQ_COMMON_EQUITY_BAL = COMMON_EQUITY(2,R_CLASS_POS)
         acq_CLASS_OCI_BALANCE =
     +         OTHER_COMPREHENSIVE_INCOME_BALANCE(R_CLASS_POS)  ! 730
         acq_TOTAL_EQUITY_WITH_OCI = acq_CLASS_OCI_BALANCE
     +                   + ACQ_COMMON_EQUITY_BAL
         acq_TOTAL_CAPITIAL_WITH_OCI = acq_TOTAL_EQUITY_WITH_OCI
     +                     + ACQ_PREFERRED_STOCK_BAL
     +                     + ACQ_LONG_TERM_DEBT_BAL
         ACQ_TOTAL_CAPITIAL_BAL = COMMON_EQUITY(2,R_CLASS_POS)
     +                + ACQ_PREFERRED_STOCK_BAL
     +                + ACQ_LONG_TERM_DEBT_BAL
         acq_LTD_BALANCE_WO_CURRENT_LTD = ACQ_LONG_TERM_DEBT_BAL
     +                        - acq_CURRENT_LTD_RETIREMENTS
         acq_TOTAL_CAPITIAL_BAL_WO_CURRENT_LTD =
     +         acq_TOTAL_CAPITIAL_WITH_OCI
     +                               - acq_CURRENT_LTD_RETIREMENTS
         acq_OTHER_LT_LIABILITY_BAL = OTHER_LT_LIABILITY(2,R_CLASS_POS)
         acq_FASB143_ARO_NET_ASSET_BAL = 
     +             FASB143_NET_ASSET_VALUE(2,R_CLASS_POS)
     +             + BALANCE_SHEET_ROLLUPS(2,ARO_Net_Assets,CLASS_LEVEL)
         acq_FASB143_ARO_LIABLILITY_BAL =  ! acq_SBU_VARIABLES(637)
     +            FASB143_LT_LIABILITY_VALUE(2,R_CLASS_POS)
     +            + BALANCE_SHEET_ROLLUPS(2,aro_liabilities,CLASS_LEVEL)
       acq_CLASS_FASB87_BALANCE = FASB_87_INTANGIBLE_ASSETS(R_CLASS_POS)
         acq_CLASS_OCI_BALANCE =
     +   OTHER_COMPREHENSIVE_INCOME_BALANCE(R_CLASS_POS)   ! 103
         ACQ_SHORT_TERM_DEBT_BAL = SHORT_TERM_DEBT(2,R_CLASS_POS)
         ACQ_CUSTOMER_DEPOSITS_BALANCE =
     +                      CUSTOMER_DEPOSITS_BAL(2,R_CLASS_POS)
         ACQ_CIAC_BAL = CIAC_BALANCE(2,R_CLASS_POS)
         ACQ_DEF_TAX_CR_BAL = DEF_TAX_CR_BALANCE(2,R_CLASS_POS)
         ACQ_DEF_ITC_BAL = DEF_ITC_BALANCE(2,R_CLASS_POS)
         acq_PRIOR_CAUSE_OF_ITC_AMORT = DEF_ITC_BALANCE(1,R_CLASS_POS)
     +                      + ITC_USED

         LINEC(2,R_CLASS_POS) = LINEC(2,R_CLASS_POS) + LIABS_NEC_BAL_ADJ
         ACQ_LIABILITIES_NEC = LINEC(2,R_CLASS_POS)
         acq_ANNUALIZED_PS_DIVIDENDS = ANN_PS_DIV(R_YR,R_CLASS_POS) +
     +                     acq_PS_PREM_ISSUE_EXP_AMORT
         acq_ANNUALIZED_LTD_INTEREST = ANN_LTD_INT(R_YR,R_CLASS_POS) +
     +                     INTEREST_AMORTIZATION
         acq_ANNUALIZED_STD_INTEREST =
     + ns_class_parameters%STD_INTEREST_RATE*ACQ_SHORT_TERM_DEBT_BAL
         acq_ANNUALIZED_EQUITY_COST = ns_class_parameters%ROEQU * 
     + ACQ_COMMON_EQUITY_BAL
         acq_EMBED_COST_CAPITAL_W_STD = 0.
         acq_EMBED_COST_CAPITAL_WO_STD = 0.
         acq_NET_TAX_EMBED_COST_CAPTL_W_STD = 0.
         acq_NET_TAX_EMBED_COST_CAPTL_WO_STD = 0.
         EFFECTIVE_TAX_RATE = ns_class_parameters%FEDERAL_TAX_RATE *
     +  (1.-ns_class_parameters%STATE_TAX_RATE)+
     + ns_class_parameters%STATE_TAX_RATE
         IF(ACQ_TOTAL_CAPITIAL_BAL+ACQ_SHORT_TERM_DEBT_BAL /= 0.) THEN
      acq_EMBED_COST_CAPITAL_W_STD = 100.*(acq_ANNUALIZED_EQUITY_COST +
     +  acq_ANNUALIZED_PS_DIVIDENDS +
     + acq_ANNUALIZED_LTD_INTEREST +
     +                             acq_ANNUALIZED_STD_INTEREST)/
     +          (ACQ_TOTAL_CAPITIAL_BAL+ACQ_SHORT_TERM_DEBT_BAL)
        acq_NET_TAX_EMBED_COST_CAPTL_W_STD=100.
     + *(acq_ANNUALIZED_EQUITY_COST+
     +  acq_ANNUALIZED_PS_DIVIDENDS +
     + (1.-EFFECTIVE_TAX_RATE)*(acq_ANNUALIZED_LTD_INTEREST +
     +  acq_ANNUALIZED_STD_INTEREST))/
     +  (ACQ_TOTAL_CAPITIAL_BAL+ACQ_SHORT_TERM_DEBT_BAL)
         ENDIF
         IF(ACQ_TOTAL_CAPITIAL_BAL /= 0.) THEN
          acq_EMBED_COST_CAPITAL_WO_STD = 100.
     + *(acq_ANNUALIZED_EQUITY_COST +
     +  acq_ANNUALIZED_PS_DIVIDENDS +
     +  acq_ANNUALIZED_LTD_INTEREST)/
     +  ACQ_TOTAL_CAPITIAL_BAL
            acq_NET_TAX_EMBED_COST_CAPTL_WO_STD =
     +  100.*(acq_ANNUALIZED_EQUITY_COST + acq_ANNUALIZED_PS_DIVIDENDS +
     + (1.-EFFECTIVE_TAX_RATE)*acq_ANNUALIZED_LTD_INTEREST)/
     +                                ACQ_TOTAL_CAPITIAL_BAL
         ENDIF
         IF(UI()) THEN
       acq_PENSION_TAX_DEDUCTION_NONBOOK = acq_PENSION_EXPENSE_CASH! 689
           acq_STORM_TAX_DEDUCTION_NONBOOK = acq_STORM_EXPENSE_CASH! 690
         acq_VACATION_TAX_DEDUCTION_NONBOOK = acq_VACATION_PAY_CASH! 691
            acq_PENSION_TAX_DEDUCTION_BOOK = 0.! 714
            acq_STORM_TAX_DEDUCTION_BOOK = 0.! 715
            acq_VACATION_TAX_DEDUCTION_BOOK = 0.! 716
         ELSE
      acq_PENSION_TAX_DEDUCTION_BOOK = acq_pension_expense_non_cash! 689
         acq_STORM_TAX_DEDUCTION_BOOK = ACQ_storm_expense_non_cash! 690
        acq_VACATION_TAX_DEDUCTION_BOOK = ACQ_VACATION_PAY_NON_CASH! 691
            acq_PENSION_TAX_DEDUCTION_NONBOOK = 0.! 714
            acq_STORM_TAX_DEDUCTION_NONBOOK = 0.! 715
            acq_VACATION_TAX_DEDUCTION_NONBOOK = 0.! 716
         ENDIF
         PENSIN_VAC_STRM_TAX_EXP_NONBOOK =
     + acq_PENSION_TAX_DEDUCTION_NONBOOK
     + + acq_STORM_TAX_DEDUCTION_NONBOOK
     +                     + acq_VACATION_TAX_DEDUCTION_NONBOOK
     +                          + acq_ExecBenefitsCash
     +                          + acq_IncentiveCompensationCash
         PENSIN_VAC_STRM_TAX_EXP_BOOK = acq_PENSION_TAX_DEDUCTION_BOOK
     +                          + acq_STORM_TAX_DEDUCTION_BOOK
     +                         + acq_VACATION_TAX_DEDUCTION_BOOK
         ACQ_TAXABLE_INCOME_B4_DEDUCTIONS = ACQ_CAPITIALIZED_INTEREST
     +                         + REVS_OPNG_loc
     +                         + acq_OTHER_TAXABLE_INCOME
     +                         + acq_TAXABLE_INVESTMENT_INCOME
     +                         - acq_SALVAGE_TRANSACTIONS
     +                         - PENSIN_VAC_STRM_TAX_EXP_NONBOOK
         ACQ_TAX_DEDUCTIBLE_EXPENSES_BOOK = acq_fuel_expense
     +                         + acq_PURCHASE_POWER_EXPENSE
     +                      + acq_INC_CAPACITY_PURCHASES_TO_LEVEL_RM
     +                         + acq_variable_expense
     +                         + ACQ_FIXED_EXPENSE
     +                         + ACQ_SERVICE_TRANSACTION_EXPENSE
     +                         + acq_OTHER_EXPENSE_1
     +                         + acq_OTHER_EXPENSE_2
     +                         + KEPCO_WC_CURENT_MAINT_ENRG_COST
     +                         + acq_OTHER_EXPENSE_3
     +                         + acq_ATL_LEASE_INTEREST
     +                         + ACQ_DSM_EXPENSE
     +                         + ACQ_DSM_REBATE
     +                         + ACQ_EMISSION_CREDIT_EXPENSE
     +                         + acq_NF_TAX_EXPENSE
     +                         + ACQ_OPERATING_REVENUE_TAX
     +                         + Payroll_Taxes
     +                         + acq_OTHER_TAXES
     +                         + ENVIRONMENTAL_TAX
     +                         + CLASS_PROPERTY_TAXES
     +                         + STATE_TAX_ON_CAPITAL
     +                         + ns_class_parameters%CLASS_BTL_EXPENSES
     +                         + ACQ_INTEREST_ON_LONG_TERM_DEBT
     +                         + ACQ_STD_INTEREST
     +                         + ACQ_CATAWBA_CAPACITY_PAYMENTS
     +                         + CATAWBA_EXPENSES
     +                         + acq_TRANSMISSION_OPERATION
     +                         + acq_TRANSMISSION_MAINTENANCE
     +                         + acq_DISTRIBUTION_OPERATION
     +                         + acq_DISTRIBUTION_MAINTENANCE
     +                         + acq_CUSTOMER_ACCOUNTS
     +                         + acq_CUSTOMER_SERVICES
     +                         + acq_SALES_EXPENSE
     +                         + acq_AG_OPERATIONS
     +                         + acq_AG_MAINTENANCE
     +                         + acq_RETIREMENT_MEDICAL_PAYMENTS
     +                         + acq_TOTAL_DERIVATIVE_EXPENSE
     +                         + acq_TOTAL_FUEL_DERIV_EXPENSES
     +                         + PENSIN_VAC_STRM_TAX_EXP_BOOK

         acq_TAXES_NON_INCOME = ACQ_OPERATING_REVENUE_TAX
     +              + acq_OTHER_TAXES
     +              + Payroll_Taxes
     +              + ENVIRONMENTAL_TAX
     +              + CLASS_PROPERTY_TAXES
     +              + STATE_TAX_ON_CAPITAL
     +              + FEDERAL_TAX_ON_CAPITAL
         acq_CATAWBA_TAX_DEDUCTIBLE_EXPENSE =
     + ACQ_CATAWBA_CAPACITY_PAYMENTS
     +                            + CATAWBA_EXPENSES
         ACQ_OTHER_AND_ENVIRONMENTAL_TAXES =
     + acq_OTHER_TAXES + ENVIRONMENTAL_TAX
         ns_class_parameters%STATE_TAX_RATE = 
     + ns_class_parameters%STATE_TAX_RATE*100.
         ACQ_INCOME_BEFORE_CAPITAL_SERVICE = ACQ_INCOME_B4_INTEREST
     +                           + ACQ_AFUDC_BORROWED
         ACQ_TAX_CREDITS = ITC_USED - ITC_AMORTIZATION


         acq_OTHER_PAYMENTS_TO_TRUST_FUNDS = 
     +  CASH_TO_POST_RETIRE_MEDICAL_BAL  ! 755
     +                             + CASH_TO_ACCRD_MBR_REVENUES_BAL
         acq_GROSS_CASH_FLOW = acq_INCOME_BEFORE_CAPITAL_SERVICE
     +                     + VACATION_PAY_NON_CASH
     +                     + PENSION_EXPENSE_NON_CASH
     +                     + STORM_EXPENSE_NON_CASH
     +                     + acq_ExecBenefitsNonCash
     +                     + acq_IncentiveCompensationNonCash
     +                     + NF_NON_CASH_EXPENSE
     +                     + BOOK_DEPRECIATION
     +                     + acq_DEFERRED_FUEL_EXPENSE
     +                     + acq_AMORTIZATION_B4_CAP_SERVICE
     +                     + acq_ELIMINATION_CASH_ADJUSTMENT
     +                     + CIAC_AMORTIZATION
     +                     - ns_class_parameters%DEFERRED_REVENUES
     +                     - acq_AFUDC_EQUITY
     +                     - acq_AFUDC_BORROWED
     +                     - Mark_To_Market
     +                     - FE_NonCashEarningsNonCorp
     +                     + DEFERRED_TAXES_DR
     +                     + BTL_DEFERRED_TAXES_DR
     +                     + acq_TOTAL_DEF_TAXES_CR
     +                     + acq_tax_credits
     +                     - acq_STD_INTEREST_CASH_PAYMENT
     +         - acq_LTD_INTEREST_CASH_PAYMENTS ! CASH INTEREST PAYMENTS
     +                     + acq_DIVIDEND_FROM_SUBSIDIARY
     +                     + TAXES_PAID_BY_PARENT
     +                     + ACQ_TAX_PAYMENTS_2_PARENT_FROM_SUB
     +                     - ACQ_INCOME_TAXES_CONSOLIDATED
     +                     - ACQ_CATAWBA_LEVEL_CAP_PAYMENTS
     +                     - acq_NON_CASH_ATL_REVENUES
     +                + acq_ANNUAL_CASH_FLOW_TIMING_ADJUSTMENTS ! 8/26/04
     +                     + acq_INCOME_TAX_TIMING_ADJS



         ACQ_FUNDS_FROM_OPERATIONS = acq_GROSS_CASH_FLOW_PER_AVE_SHARE
     +                   - acq_PS_DIVIDEND_CASH_PAYMENTS
     +                   - acq_COMMON_STOCK_CASH_DIVIDENDS
     +                   + ns_class_parameters%CASH_FROM_SALE_OF_ASSETS
     +                   + ns_class_parameters%CIAC_CASH
     +                   + CUSTOMER_DEPOSITS
     +                   - acq_VACATION_PAY_CASH
     +                   - acq_PENSION_EXPENSE_CASH
     +                   - acq_STORM_EXPENSE_CASH
     +                   - acq_ExecBenefitsCash
     +                   - acq_IncentiveCompensationCash
     +                   - acq_LEASE_PRINCIPAL_PAYMENTS
     +                   - acq_OTHER_PAYMENTS_TO_TRUST_FUNDS



         acq_INVESTMENT_SALVAGE_OTHER = 
     + ns_class_parameters%CASH_OTH_ASSET
     +                              + DSM_CAPITIAL
         acq_CASH_2_LT_INVESTMENTS = acq_CASH_2_LT_INVESTMENTS
     +                           + INVESTMENTS_MADE
     +                           - INVESTMENTS_SOLD
         ACQ_CONSTRUCTION_AND_NET_INVESTMENT = ACQ_FA_CASH
     +  + ACQ_NF_CASH
     +  - acq_CAPX_PENSION_ADJUSTMENT
     +  + acq_INVESTMENT_SALVAGE_OTHER
     +  + ns_class_parameters%NEW_SUBSIDIARY_INVESTMENT
     +  + ns_class_parameters%CAPITIALIZED_LEASE_ADDITIONS
     +  + acq_SALVAGE_TRANSACTIONS
     +  + acq_NEW_SUB_INVESTMENT
     +  + acq_goodwill_of_new_sub_investment
         CHANGE_IN_FUNDS_B4_FINANCING = ACQ_FUNDS_FROM_OPERATIONS
     +              - ACQ_CONSTRUCTION_AND_NET_INVESTMENT
     +  - ns_class_parameters%NUCL_DECOM_FUND
     +  - acq_CASH_2_LT_INVESTMENTS
     +  - ACQ_CHANGE_IN_WORKING_CAPITIAL
     +  - ACQ_LONG_TERM_DEBT_RETIREMENTS
     +  - ACQ_PREFERRED_STOCK_RETIREMENTS
     +  - acq_LTD_PS_ISSUE_EXPENSES
     +  - ns_class_master%COMMON_STOCK_BOUGHT
     +  - ns_class_parameters%DEFERRED_EXPENSE_CASH
     +                               - RATE_BASE_CASH_ADJ
     +  - acq_CATAWBA_OTHER_NET_REVENUES
     +  - acq_CASH_CHANGE_IN_NOTES_PAY_REC
     +  - acq_CASH_ADDS_2_INVENTORIES
     +  - acq_FASB143_ARO_CASH_PAYMENTS
     +  - acq_FASB143_ARO_TRUST_CASH_PAYMENTS

         acq_LEASE_RECEIPTS = 
     + ns_class_parameters%CAPITIALIZED_LEASE_ADDITIONS +
     +            acq_CLASS_LEASED_NFCE
     

         ACQ_EXTERNAL_FINANCING_PERFORMED = 
     + ns_class_master%COMMON_STOCK_ISSUED
     + + LONG_TERM_DEBT_ISSUED
     + + PREFERRED_STOCK_ISSUED
     + + ACQ_SHORT_TERM_DEBT_ISSUED
     + + acq_LEASE_RECEIPTS
         ACQ_CHANGE_IN_CASH = ACQ_EXTERNAL_FINANCING_PERFORMED
     +                    + CHANGE_IN_FUNDS_B4_FINANCING

         acq_GROSS_CASH_FLOW_PER_AVE_SHARE =THE_RATIO_OF_A_TO_B(
     +           acq_GROSS_CASH_FLOW,acq_AVERAGE_SHARES)
         acq_CBIDT = acq_GROSS_CASH_FLOW
     +           + acq_STD_INTEREST_CASH_PAYMENT
     +       + acq_LTD_INTEREST_CASH_PAYMENTS ! CASH INTEREST PAYMENTS
         acq_CBIDT_PER_AVE_SHARE =
     + THE_RATIO_OF_A_TO_B(acq_CBIDT,acq_AVERAGE_SHARES)
         ACQ_TOTAL_DEBT =  ACQ_LONG_TERM_DEBT_BAL
     +         + acq_NOTES_PAYABLE_BALANCE
     +         + SHORT_TERM_DEBT(2,R_CLASS_POS)
       acq_GROSS_CASH_2_DEBT =
     + THE_PERCENT_OF_A_TO_B(acq_GROSS_CASH_FLOW_PER_AVE_SHARE,
     + ACQ_TOTAL_DEBT)
     

         ACQ_CASH_BALANCE = LIQUID_INVESTMENTS(2,R_CLASS_POS)
         acq_LT_INVESTMENTS = LONG_TERM_INVESTMENTS(R_CLASS_POS) +
     +                    DEBT_FILE_INVESTMENTS(R_CLASS_POS)
         acq_CLASS_DEFERRED_PURCHASE_POWER =
     +                            DEFERRED_PURCHASE_POWER(2,R_CLASS_POS)
         acq_CLASS_PENSION_LIABILITY = PENSION_LIABILITY(2,R_CLASS_POS)
         acq_CLASS_DEFERRED_GAIN_FROM_SALES =
     +                           DEFERRED_GAIN_FROM_SALES(2,R_CLASS_POS)
         acq_CLASS_STORM_RESERVE_BALANCE =
     +                              STORM_RESERVE_BALANCE(2,R_CLASS_POS)
         acq_Class_ExecBenefits_Balance =
     + ExecBenefitsBalance(2,R_CLASS_POS)
         acq_Class_IncentiveComp_Balance=
     + IncentiveCompBalance(2,R_CLASS_POS)
         acq_CLASS_VACATION_PAY_BALANCE =
     +                       ACCRUED_VACATION_PAY_BALANCE(2,R_CLASS_POS)
         acq_OTHER_DEFERRED_CREDITS_BAL_EOY =
     +                 OTHER_DEFERRED_CREDITS_BAL(2,R_CLASS_POS)
     +                 + BALANCE_SHEET_ROLLUPS(2,Other_Deferred_Credits,
     +                                                      CLASS_LEVEL)
         acq_REGULATORY_DEFERRED_CREDITS_BAL_EOY =
     +            REGULATORY_DEFERRED_CREDITS_BAL(2,R_CLASS_POS)
     +            + BALANCE_SHEET_ROLLUPS(2,Regulatory_Deferred_Credits,
     +                                                      CLASS_LEVEL)
         acq_GAIN_ON_REAQUIRED_DEBT_BAL_EOY =
     +                   GAIN_ON_REAQUIRED_DEBT_BAL(2,R_CLASS_POS)
     +                   + BALANCE_SHEET_ROLLUPS(2,Reaquired_Debt_Gain ,
     +                                                      CLASS_LEVEL)
C
         acq_TOTAL_DEFERRED_CREDITS_BAL =
     +                           DEFERRED_GAIN_FROM_SALES(2,R_CLASS_POS)
     +                           + CIAC_BALANCE(2,R_CLASS_POS)
     +                           + DEF_TAX_CR_BALANCE(2,R_CLASS_POS)
     +                           + DEF_ITC_BALANCE(2,R_CLASS_POS)
     +               + acq_OTHER_DEFERRED_CREDITS_BAL_EOY      ! 712
     +               + acq_REGULATORY_DEFERRED_CREDITS_BAL_EOY ! 711
     +               + acq_GAIN_ON_REAQUIRED_DEBT_BAL_EOY      ! 710
         ACQ_TOTAL_LIABILITIES = REARNC(2,R_CLASS_POS)
     +                     + COMMON_STOCK(2,R_CLASS_POS)
     +             + acq_CLASS_OCI_BALANCE
     +             + ACQ_PREFERRED_STOCK_BAL
     +             + ACQ_LONG_TERM_DEBT_BAL
     +                     + OTHER_LT_LIABILITY(2,R_CLASS_POS)
     +             + acq_FASB143_ARO_LIABLILITY_BAL
     +             + acq_NOTES_PAYABLE_BALANCE
     +                     + SHORT_TERM_DEBT(2,R_CLASS_POS)
     +                     + CUSTOMER_DEPOSITS_BAL(2,R_CLASS_POS)
     +                     + PENSION_LIABILITY(2,R_CLASS_POS)
     +                     + STORM_RESERVE_BALANCE(2,R_CLASS_POS)
     +                     + ExecBenefitsBalance(2,R_CLASS_POS)
     +                     + IncentiveCompBalance(2,R_CLASS_POS)
     +                     + ACCRUED_VACATION_PAY_BALANCE(2,R_CLASS_POS)
     +             + acq_RETIREMENT_MED_PAYABLE
     +             + acq_DECOM_FUND_LIABILITY
     +             + acq_CLASS_ACCOUNTS_PAYABLE
     +             + acq_TOTAL_DEFERRED_CREDITS_BAL
     +             + ACQ_LIABILITIES_NEC
         ACQ_TOTAL_ASSETS = NET_UTILITY_PLANT(2,R_CLASS_POS)

     +                  + OTHER_ASSETS(2,R_CLASS_POS)
     +          + ACQ_SUBSIDIARY_INVESTMENT
     +                  + CAPITIALZIED_LEASES(2,R_CLASS_POS)
     +                  + NUC_DECOM_FUND_BAL(2,R_CLASS_POS)
     +                  + NET_DD_BALANCE(2,R_CLASS_POS)
     +                  + CUM_DEF_REVENUES(2,R_CLASS_POS)
     +                  + CUMTXNORM(2,R_CLASS_POS)
     +          + acq_NOTES_RECEIVABLE_BALANCE
     +          + acq_LT_INVESTMENTS
     +          + acq_RETIREMENT_MEDICAL_FUND
     +                  + LIQUID_INVESTMENTS(2,R_CLASS_POS)
     +          + acq_CLASS_ACCOUNTS_RECEIVABLE
     +          + acq_CLASS_FUEL_INVENTORY
     +          + acq_CLASS_DEFERRED_FUEL_BALANCE
     +          + acq_CLASS_DEFERRED_PURCHASE_POWER
     +          + ACQ_ASSET_NEC
     +          + acq_MATERIALS_N_SUPPLIES
     +          + acq_GAS_IN_STORAGE
     +          + acq_DEFERRED_PURCHASED_GAS
     +          + acq_FASB143_ARO_NET_ASSET_BAL
     +          + acq_CLASS_FASB87_BALANCE


C RATIOS

         ACQ_TOTAL_CAPITIAL_BAL = ACQ_TOTAL_CAPITIAL_BAL
     +                             + acq_CLASS_OCI_BALANCE
         acq_TOTAL_EQUITY_WITH_OCI = acq_CLASS_OCI_BALANCE ! 730
     +                   + COMMON_EQUITY(2,R_CLASS_POS)
      ENTRY CONSOLIDATED_RATIOS
         IF(IPALCO() .AND. ABS(ACQ_TOTAL_CAPITIAL_BAL
     + + ACQ_SHORT_TERM_DEBT_BAL + acq_CLASS_OCI_BALANCE) > .00001) THEN

            CAPITAL_MULTIPILER = 100./(ACQ_TOTAL_CAPITIAL_BAL
     +                         + ACQ_SHORT_TERM_DEBT_BAL)
            acq_COMMON_EQUITY_BAL_IN_CAP = CAPITAL_MULTIPILER  *
     +             (ACQ_COMMON_EQUITY_BAL + acq_CLASS_OCI_BALANCE)
         ELSEIF(ABS(ACQ_TOTAL_CAPITIAL_BAL+
     + ACQ_SHORT_TERM_DEBT_BAL)>.00001) THEN
            CAPITAL_MULTIPILER = 100./
     +       (ACQ_TOTAL_CAPITIAL_BAL + ACQ_SHORT_TERM_DEBT_BAL)
            acq_COMMON_EQUITY_BAL_IN_CAP = ACQ_COMMON_EQUITY_BAL *
     +                                        CAPITAL_MULTIPILER
         ELSE
            CAPITAL_MULTIPILER = 0.
            acq_COMMON_EQUITY_BAL_IN_CAP = 0.
         ENDIF
         acq_PREFERRED_STOCK_IN_CAP =
     + ACQ_PREFERRED_STOCK_BAL*CAPITAL_MULTIPILER
         acq_LONG_TERM_DEBT_IN_CAP =
     + ACQ_LONG_TERM_DEBT_BAL * CAPITAL_MULTIPILER
         acq_SHORT_TERM_DEBT_IN_CAP =
     + ACQ_SHORT_TERM_DEBT_BAL*CAPITAL_MULTIPILER

         IF(ACQ_CONSTRUCTION_AND_NET_INVESTMENT /= 0.) THEN
            acq_FUNDS_4_CONSTRUCTION = ACQ_FUNDS_FROM_OPERATIONS/
     +                    ACQ_CONSTRUCTION_AND_NET_INVESTMENT
         ELSE
            acq_FUNDS_4_CONSTRUCTION = 0.
         ENDIF
         acq_GROSS_CASH_2_DEBT =
     + THE_PERCENT_OF_A_TO_B(acq_GROSS_CASH_FLOW_PER_AVE_SHARE,
     + ACQ_TOTAL_DEBT)
        acq_EBITDA_2_DEBT =
     + THE_PERCENT_OF_A_TO_B(acq_EBITDA,ACQ_TOTAL_DEBT)
      RETURN

      ENTRY SET_NON_EQUIVALENCED_VARIABLES


         acq_VARIABLE(2) = 
     + ns_class_assets_results_2%SECONDARY_SALES_REVENUES
         acq_VARIABLE(17) = BOOK_DEPRECIATION
         acq_VARIABLE(19) = CIAC_AMORTIZATION


         IF(REALLY_KEPCO) THEN
         acq_VARIABLE(18)=acq_ATL_AMORTIZATION-
     + KEPCO_WC_DEF_MAINT_ENRG_AMORT
         ELSE
            acq_VARIABLE(18) = acq_ATL_AMORTIZATION
         ENDIF

         acq_VARIABLE(60) =
     +     acq_ATL_LEASE_AMORT_EXPENSE + acq_ATL_LEASE_INTEREST
         acq_VARIABLE(20) = TOTAL_EXPENSES_B4_TAXES
         acq_VARIABLE(216) = ENVIRONMENTAL_TAX
         acq_VARIABLE(217) = CLASS_PROPERTY_TAXES
         acq_VARIABLE(23) = LOCAL_TAXES
         acq_VARIABLE(25) = STATE_TAX_ON_CAPITAL
         acq_VARIABLE(27) = FEDERAL_TAX_ON_CAPITAL
         acq_VARIABLE(28) = DEFERRED_TAXES_DR
         acq_VARIABLE(682) = DEFERRED_TAXES_CR
         acq_VARIABLE(32) = ns_class_parameters%DEFERRED_REVENUES
         acq_VARIABLE(33) = ns_class_parameters%CLASS_BTL_REVENUES
         acq_VARIABLE(34) = INVESTMENT_INCOME
         acq_VARIABLE(35) = ns_class_parameters%CLASS_BTL_EXPENSES
         acq_VARIABLE(36) = BTL_INCOME_TAXES
         acq_VARIABLE(300) = ns_class_master%BTL_STATE_TAXES
         acq_VARIABLE(302) = ns_class_master%BTL_FEDERAL_TAXES
         acq_VARIABLE(43) = ns_class_parameters%SUBSIDIARY_INCOME
         acq_VARIABLE(44) = NET_OF_TAX_EXEXP
         acq_VARIABLE(46) = PREFERRED_DIVIDENDS
         acq_VARIABLE(48) = ns_class_master%COMMON_DIVIDENDS
         acq_VARIABLE(49) = RETAINED_EARNINGS
         acq_VARIABLE(54) = ABS(ns_class_parameters%MARKET_2_BOOK)
         acq_VARIABLE(56) = ns_class_parameters%DIVIDEND_PER_SHARE
         acq_VARIABLE(130) = ns_class_parameters%INCOME_TAX_DEPRECIATION
         acq_VARIABLE(133) = ns_class_master%STATE_INCOME_TAX_DEDUCTIONS
         acq_VARIABLE(212) = STATE_TAXES
         acq_VARIABLE(141) = ns_class_parameters%STATE_TAX_RATE
         acq_VARIABLE(137) = ns_class_master%FED_INCOME_TAX_DEDUCTIONS
         acq_VARIABLE(211) = FEDERAL_TAXES
         acq_VARIABLE(139) = ns_class_amt1%AMTINCOME
         acq_VARIABLE(145) = ns_class_parameters%ADDENDUM_2_RATE_BASE
         acq_VARIABLE(101) = ns_class_master%COMMON_STOCK_ISSUED
         acq_VARIABLE(102) = LONG_TERM_DEBT_ISSUED
         acq_VARIABLE(103) = PREFERRED_STOCK_ISSUED
         acq_VARIABLE(106) = 
     + ns_class_parameters%CASH_FROM_SALE_OF_ASSETS
     
       acq_VARIABLE(113)=ns_class_parameters%CIAC_CASH
       acq_VARIABLE(126) = ns_class_parameters%NEW_SUBSIDIARY_INVESTMENT
       acq_VARIABLE(114) = 
     + ns_class_parameters%CAPITIALIZED_LEASE_ADDITIONS ! Capital Leases
         ! Leased Nuclear Fuel Payments
         acq_VARIABLE(116) = ACQ_LEASED_NF_BURN
         ! Nuclear Decommissioning Fund Payment
         acq_VARIABLE(117) = ns_class_parameters%NUCL_DECOM_FUND
         ! Common Stock Buyback
         acq_VARIABLE(120) = ns_class_master%COMMON_STOCK_BOUGHT

C ADDED CATAWBA STUFF IN BODY OF PROGRAM 4/15/97

         acq_VARIABLE(127) = ns_class_parameters%DEFERRED_EXPENSE_CASH +
     +       acq_CATAWBA_OTHER_NET_REVENUES ! Deferred cash expense
C        acq_VARIABLE(127) = ns_class_parameters%DEFERRED_EXPENSE_CASH
         acq_VARIABLE(292) = BTL_AMORTIZATION
         acq_VARIABLE(902) = BTL_DEF_TAXES_CR
         acq_VARIABLE(903) = BTL_DEFERRED_TAXES_DR
         acq_VARIABLE(294) = BTL_DEF_TAXES_CR + BTL_DEFERRED_TAXES_DR
         acq_VARIABLE(904) = TOTAL_DEFERRED_TAXES_DR

C KEPCO STUFF 5/29/97

         acq_VARIABLE(312) = KEPCO_WC_CURENT_MAINT_ENRG_COST +
     +           KEPCO_WC_DEF_MAINT_ENRG_AMORT
         acq_VARIABLE(313) = KEPCO_WC_CURENT_MAINT_ENRG_COST
         acq_VARIABLE(314) = KEPCO_WC_DEF_MAINT_ENRG_AMORT
         acq_VARIABLE(384) = INTEREST_AMORTIZATION

C EMISSIONS REPORT INFORMATION


      RETURN

      ENTRY ZERO_NON_EQUIVALENT_VALUES


         ENVIRONMENTAL_TAX = 0.
         CLASS_PROPERTY_TAXES = 0.
         LOCAL_TAXES = 0.
         STATE_TAX_ON_CAPITAL = 0.
         FEDERAL_TAX_ON_CAPITAL = 0.
         DEFERRED_TAXES_DR = 0.
         DEFERRED_TAXES_CR = 0.
         ns_class_parameters%DEFERRED_REVENUES = 0.
         ns_class_parameters%CLASS_BTL_REVENUES = 0.
         INVESTMENT_INCOME = 0.
         ns_class_parameters%CLASS_BTL_EXPENSES = 0.
         BTL_INCOME_TAXES = 0.
         ns_class_parameters%SUBSIDIARY_INCOME = 0.
         NET_OF_TAX_EXEXP = 0.
         PREFERRED_DIVIDENDS = 0.
         ns_class_master%COMMON_DIVIDENDS = 0.
         RETAINED_EARNINGS = 0.
         ns_class_parameters%INCOME_TAX_DEPRECIATION = 0.
         ns_class_master%STATE_INCOME_TAX_DEDUCTIONS = 0.
         STATE_TAXES = 0.
         ns_class_master%FED_INCOME_TAX_DEDUCTIONS = 0.
         FEDERAL_TAXES = 0.
         ns_class_amt1%AMTINCOME = 0.
         ns_class_parameters%ADDENDUM_2_RATE_BASE = 0.
         ns_class_master%COMMON_STOCK_ISSUED = 0.
         LONG_TERM_DEBT_ISSUED = 0.
         PREFERRED_STOCK_ISSUED = 0.
         ACQ_LEASED_NF_BURN = 0.
         ns_class_parameters%NUCL_DECOM_FUND = 0.
         ACQ_LONG_TERM_DEBT_RETIREMENTS = 0.
         ns_class_master%COMMON_STOCK_BOUGHT = 0.
         ns_class_parameters%DEFERRED_EXPENSE_CASH = 0.
         ns_class_parameters%CAPITIALIZED_LEASE_ADDITIONS = 0.
         BTL_AMORTIZATION = 0.
         BTL_DEF_TAXES_CR = 0.
         BTL_DEFERRED_TAXES_DR = 0.
         TOTAL_DEFERRED_TAXES_DR = 0.
      RETURN

c      ENTRY SBU_2_SBU_ADJUSTMENTS_BY(R_CLASS_POS)


C        LIQUID_INVESTMENTS(2,R_CLASS_POS) = acq_SBU_VARIABLES(74) +
C    +                                 LIQUID_INVESTMENTS(2,R_CLASS_POS)
C        LONG_TERM_INVESTMENTS(R_CLASS_POS) = acq_SBU_VARIABLES(289) +
C    +                                LONG_TERM_INVESTMENTS(R_CLASS_POS)
C        COMMON_STOCK(2,R_CLASS_POS) = acq_SBU_VARIABLES(77) +
C    +                                       COMMON_STOCK(2,R_CLASS_POS)
C        REARNC(2,R_CLASS_POS) = acq_SBU_VARIABLES(78) +
C    +                                             REARNC(2,R_CLASS_POS)
C        COMMON_EQUITY(2,R_CLASS_POS) = acq_SBU_VARIABLES(79) +
C    +                                      COMMON_EQUITY(2,R_CLASS_POS)
C        PREFERRED_STOCK(2,R_CLASS_POS) = acq_SBU_VARIABLES(80) +
C    +                                    PREFERRED_STOCK(2,R_CLASS_POS)
C        LONG_TERM_DEBT(2,R_CLASS_POS) = acq_SBU_VARIABLES(81) +
C    +                                     LONG_TERM_DEBT(2,R_CLASS_POS)

      ENTRY SBU_2_PARENT_ADJUSTMENTS(R_CLASS_POS,BASE_YEAR_ACTIVE)


      IF(BASE_YEAR_ACTIVE) THEN
         DEF_TAX_CR_BALANCE(2,R_CLASS_POS) = acq_SBU_VARIABLES(87) +
     +                         DEF_TAX_CR_BALANCE(2,R_CLASS_POS)
         DEF_ITC_BALANCE(2,R_CLASS_POS) = acq_SBU_VARIABLES(88) +
     +                            DEF_ITC_BALANCE(2,R_CLASS_POS)
         NUC_DECOM_FUND_BAL(2,R_CLASS_POS) = acq_SBU_VARIABLES(70) +
     +                         NUC_DECOM_FUND_BAL(2,R_CLASS_POS)
         CIAC_BALANCE(2,R_CLASS_POS) = acq_SBU_VARIABLES(86) +
     +                               CIAC_BALANCE(2,R_CLASS_POS)
         CAPITIALZIED_LEASES(2,R_CLASS_POS) = acq_SBU_VARIABLES(92) +
     +                        CAPITIALZIED_LEASES(2,R_CLASS_POS)
         OTHER_ASSETS(2,R_CLASS_POS) = acq_SBU_VARIABLES(69) +
     +                               OTHER_ASSETS(2,R_CLASS_POS)
        NUC_DECOM_FUND_LIABILITY(R_CLASS_POS) = acq_SBU_VARIABLES(288) +
     +                     NUC_DECOM_FUND_LIABILITY(R_CLASS_POS)
         POST_RETIREMENT_MEDICAL_FUND(R_CLASS_POS) =
     + acq_SBU_VARIABLES(286)+
     +                 POST_RETIREMENT_MEDICAL_FUND(R_CLASS_POS)
         ACCOUNTS_PAYABLE(R_CLASS_POS) = acq_SBU_VARIABLES(389) +
     +                             ACCOUNTS_PAYABLE(R_CLASS_POS)
         ACCOUNTS_RECEIVABLE(R_CLASS_POS) = acq_SBU_VARIABLES(390) +
     +                          ACCOUNTS_RECEIVABLE(R_CLASS_POS)
         FUEL_INVENTORY(R_CLASS_POS) = acq_SBU_VARIABLES(391) +
     +                               FUEL_INVENTORY(R_CLASS_POS)
         CLASS_MATERIALS_N_SUPPLIES(R_CLASS_POS) =
     +                   CLASS_MATERIALS_N_SUPPLIES(R_CLASS_POS)
     +                   + acq_SBU_VARIABLES(469)
         CLASS_GAS_STORAGE(R_CLASS_POS) = CLASS_GAS_STORAGE(R_CLASS_POS)
     +                            + acq_SBU_VARIABLES(468)
         CLASS_DEFERRED_PURCHASE_GAS(R_CLASS_POS) =
     +                  CLASS_DEFERRED_PURCHASE_GAS(R_CLASS_POS)
     +                  + acq_SBU_VARIABLES(467)

         ! need to add to the base year
         DEFERRED_FUEL_BALANCE(R_CLASS_POS) = acq_SBU_VARIABLES(392) +
     +                        DEFERRED_FUEL_BALANCE(R_CLASS_POS)
         POST_RETIREMENT_MED_PAYABLE(R_CLASS_POS) =
     + acq_SBU_VARIABLES(287) +
     +                  POST_RETIREMENT_MED_PAYABLE(R_CLASS_POS)

         DEFERRED_PURCHASE_POWER(2,R_CLASS_POS) = acq_SBU_VARIABLES(410)
     +                  + DEFERRED_PURCHASE_POWER(2,R_CLASS_POS)
         PENSION_LIABILITY(2,R_CLASS_POS) = acq_SBU_VARIABLES(411)
     +                        + PENSION_LIABILITY(2,R_CLASS_POS)
        DEFERRED_GAIN_FROM_SALES(2,R_CLASS_POS) = acq_SBU_VARIABLES(412)
     +                 + DEFERRED_GAIN_FROM_SALES(2,R_CLASS_POS)
         STORM_RESERVE_BALANCE(2,R_CLASS_POS) = acq_SBU_VARIABLES(413)
     +                    + STORM_RESERVE_BALANCE(2,R_CLASS_POS)
         ExecBenefitsBalance(2,R_CLASS_POS) = acq_SBU_VARIABLES(905)
     +                      + ExecBenefitsBalance(2,R_CLASS_POS)
         IncentiveCompBalance(2,R_CLASS_POS) = acq_SBU_VARIABLES(906)
     +                     + IncentiveCompBalance(2,R_CLASS_POS)
         ACCRUED_VACATION_PAY_BALANCE(2,R_CLASS_POS)=
     + acq_SBU_VARIABLES(414)
     +             + ACCRUED_VACATION_PAY_BALANCE(2,R_CLASS_POS)
         RB_INCLUDE_DEFERRED_TAX_DR(2,R_CLASS_POS) =
     + acq_SBU_VARIABLES(415)
     +               + RB_INCLUDE_DEFERRED_TAX_DR(2,R_CLASS_POS)
         RB_INCLUDE_DEFERRED_REVENUES(2,R_CLASS_POS)=
     + acq_SBU_VARIABLES(416)
     +             + RB_INCLUDE_DEFERRED_REVENUES(2,R_CLASS_POS)
         RB_EXCLUDED_PENSION_LIABILITY(2,R_CLASS_POS)=
     + acq_SBU_VARIABLES(417)
     +            + RB_EXCLUDED_PENSION_LIABILITY(2,R_CLASS_POS)
         RB_EXCLUDED_DEFERRED_ASSET_GAIN
     + (2,R_CLASS_POS) =
     +          acq_SBU_VARIABLES(418)
     + + RB_EXCLUDED_DEFERRED_ASSET_GAIN(
     + 2,R_CLASS_POS)
       RB_EXCLUDED_STORM_RESERVE(2,R_CLASS_POS) = acq_SBU_VARIABLES(419)
     +                + RB_EXCLUDED_STORM_RESERVE(2,R_CLASS_POS)
         RB_EXCLUDE_ACCRUED_VACATION_PAY(2,R_CLASS_POS) =
     +          acq_SBU_VARIABLES(420)
     +          + RB_EXCLUDE_ACCRUED_VACATION_PAY(2,R_CLASS_POS)


      ENDIF

         acq_FASB143_ARO_NET_ASSET_BAL =
     +             FASB143_NET_ASSET_VALUE(2,R_CLASS_POS)
     +             + BALANCE_SHEET_ROLLUPS(2,ARO_Net_Assets,CLASS_LEVEL)


         CLASS_GPV(2,R_CLASS_POS) = CLASS_GPV(2,R_CLASS_POS) +
     +                      acq_SBU_VARIABLES(63)
         CLASS_CWIP(2,R_CLASS_POS) = acq_SBU_VARIABLES(64)
     +                       + CLASS_CWIP(2,R_CLASS_POS)
         CLASS_CUMULATIVE_DEPRECIATION(2,R_CLASS_POS) =
     +                                  acq_SBU_VARIABLES(66) +
     +              CLASS_CUMULATIVE_DEPRECIATION(2,R_CLASS_POS)
         NET_DD_BALANCE(2,R_CLASS_POS) = NET_DD_BALANCE(2,R_CLASS_POS)
     +                           + acq_SBU_VARIABLES(71)
     +                           - acq_SBU_VARIABLES(628)
         acq_CLASS_REGULATORY_ASSETS = acq_SBU_VARIABLES(463)
     +                     + acq_CLASS_REGULATORY_ASSETS
         acq_FASB_109 = acq_SBU_VARIABLES(464) + acq_FASB_109
         acq_FASB_133 = acq_SBU_VARIABLES(465) + acq_FASB_133
         acq_CAPX_PENSION_ADJUSTMENT = acq_CAPX_PENSION_ADJUSTMENT
     +                     + acq_SBU_VARIABLES(734)
         OTHER_DD_BALANCE(2,R_CLASS_POS) = acq_SBU_VARIABLES(466)
     +                         + OTHER_DD_BALANCE(2,R_CLASS_POS)
         GOODWILL(2,R_CLASS_POS) = GOODWILL(2,R_CLASS_POS)
     +                     + acq_SBU_VARIABLES(462)
         CLASS_NET_NF_VALUE(2,R_CLASS_POS) = acq_SBU_VARIABLES(67) +
     +                         CLASS_NET_NF_VALUE(2,R_CLASS_POS)
         CUM_DEF_REVENUES(2,R_CLASS_POS) = acq_SBU_VARIABLES(72) +
     +                           CUM_DEF_REVENUES(2,R_CLASS_POS)
         OTHER_LT_LIABILITY(2,R_CLASS_POS) = acq_SBU_VARIABLES(83) +
     +                         OTHER_LT_LIABILITY(2,R_CLASS_POS)

         CUSTOMER_DEPOSITS_BAL(2,R_CLASS_POS) = acq_SBU_VARIABLES(85) +
     +                      CUSTOMER_DEPOSITS_BAL(2,R_CLASS_POS)
         CUM_DEF_TAX_RATEBASE(2,R_CLASS_POS) = acq_SBU_VARIABLES(144) +
     +                       CUM_DEF_TAX_RATEBASE(2,R_CLASS_POS)

         NUC_FUEL_RATE_BASE(2,R_CLASS_POS) = acq_SBU_VARIABLES(369) +
     +                         NUC_FUEL_RATE_BASE(2,R_CLASS_POS)

         CWIP_IN_RATE_BASE(2,R_CLASS_POS) = acq_SBU_VARIABLES(370) +
     +                          CWIP_IN_RATE_BASE(2,R_CLASS_POS)

         CUM_ITC_DEF_RATEBASE(2,R_CLASS_POS) = acq_SBU_VARIABLES(149) +
     +                       CUM_ITC_DEF_RATEBASE(2,R_CLASS_POS)
         NUC_DECOM_RATE_BASE(2,R_CLASS_POS) = acq_SBU_VARIABLES(150) +
     +                        NUC_DECOM_RATE_BASE(2,R_CLASS_POS)
         IF(MONTHLY_MIDAS_ACTIVE)
     +    CIAC_RATE_BASE(2,R_CLASS_POS) = acq_SBU_VARIABLES(151)
     +                           + CIAC_RATE_BASE(2,R_CLASS_POS)
         CAPITIALIZED_LEASES_RATE_BASE(2,R_CLASS_POS) =
     +            CAPITIALIZED_LEASES_RATE_BASE(2,R_CLASS_POS) +
     +                                    acq_SBU_VARIABLES(153)
         NF_IN_PROCESS(2,R_CLASS_POS) = acq_SBU_VARIABLES(254) +
     +                              NF_IN_PROCESS(2,R_CLASS_POS)


      RETURN

      ENTRY CALCULATE_RATE_BASE(R_YR)



         RB_EXCLUDED_PENSION_LIABILITY(2,CLASS_POS) =
     + ns_class_parameters%RB_EXCLUDED_PENSION_LIABILITY_RATE *
     + PENSION_LIABILITY(2,CLASS_POS)

         CUM_ITC_DEF_RATEBASE(2,CLASS_POS) =
     + ns_class_parameters%RBITC * DEF_ITC_BALANCE(1,CLASS_POS)
         CUM_DEF_TAX_RATEBASE(2,CLASS_POS) =
     + ns_class_parameters%RBDFTX * DEF_TAX_CR_BALANCE(2,CLASS_POS)
         NUC_DECOM_RATE_BASE(2,CLASS_POS) =
     + ns_class_parameters%NUC_DEOM_FUND_RATEBASE *
     +                           NUC_DECOM_FUND_BAL(2,CLASS_POS)
         CIAC_RATE_BASE(2,CLASS_POS) =
     + ns_class_parameters%CIAC_EXCLUDED_FROM_RATEBASE *
     +                               CIAC_BALANCE(2,CLASS_POS) +
     + ns_class_parameters%DEPOSITS_EXCLUDED_FROM_RATEBASE *
     +                        CUSTOMER_DEPOSITS_BAL(2,CLASS_POS)
         PLANT_IN_SERVICE_RATE_BASE(2,CLASS_POS)=CLASS_GPV(2,CLASS_POS)-
     +                CLASS_CUMULATIVE_DEPRECIATION(2,CLASS_POS)
         CAPITIALIZED_LEASES_RATE_BASE(2,CLASS_POS) =
     +  ns_class_parameters%CAP_LEASES_IN_RATEBASE*
     + CAPITIALZIED_LEASES(2,CLASS_POS)
       ASSET_NEC_IN_RATE_BASE(2,CLASS_POS)=
     + ns_class_parameters%RBANEC*(WCCUM(1,CLASS_POS)+
     +                                       LINEC(1,CLASS_POS))

          RB_INCLUDE_DEFERRED_TAX_DR(2,CLASS_POS) =
     + ns_class_parameters%RB_INCLUDED_DEF_TAXES_DR_RATE *  ! 155
     +                                    CUMTXNORM(2,CLASS_POS)
      RB_EXCLUDED_DEFERRED_ASSET_GAIN(2,CLASS_POS) =
     + ns_class_parameters%RB_EXCLUDED_Deferred_Gain_RATE * ! 157
     +                   DEFERRED_GAIN_FROM_SALES(2,CLASS_POS)
         RB_EXCLUDED_STORM_RESERVE(2,CLASS_POS) =
     + ns_class_parameters%RB_EXCLUDED_Storm_Reserve_RATE * ! 158
     +                      STORM_RESERVE_BALANCE(2,CLASS_POS)
         RB_EXCLUDE_ACCRUED_VACATION_PAY(2,CLASS_POS) =

     + ns_class_parameters%RB_EXCLUDED_Accrued_Vacation_Pay_RATE * ! 159
     +               ACCRUED_VACATION_PAY_BALANCE(2,CLASS_POS)
         RB_INCLUDE_DEFERRED_REVENUES(2,CLASS_POS) =
     +    ns_class_parameters%RB_INCLUDED_DEFERRED_REVENUES_RATE * ! 160
     +                           CUM_DEF_REVENUES(2,CLASS_POS)


      RATE_BASE_loc(2,CLASS_POS)=PLANT_IN_SERVICE_RATE_BASE(2,CLASS_POS)
     +          + DEFERRED_DEBITS_RATE_BASE(2,CLASS_POS)
     +          - DEFERRED_CREDITS_IN_RATE_BASE(2,CLASS_POS)
     +          + NUC_FUEL_RATE_BASE(2,CLASS_POS)
     +          + CWIP_IN_RATE_BASE(2,CLASS_POS)
     +          + NUC_DECOM_RATE_BASE(2,CLASS_POS)
     +          + RB_INCLUDE_DEFERRED_TAX_DR(2,CLASS_POS)
     +          + RB_INCLUDE_DEFERRED_REVENUES(2,CLASS_POS)
     +          - CUM_DEF_TAX_RATEBASE(2,CLASS_POS)
     +          - CUM_ITC_DEF_RATEBASE(2,CLASS_POS)
     +          - CIAC_RATE_BASE(2,CLASS_POS)
     +          - RB_EXCLUDED_PENSION_LIABILITY(2,CLASS_POS)
     + - RB_EXCLUDED_DEFERRED_ASSET_GAIN
     + (2,CLASS_POS)
     +          - RB_EXCLUDE_ACCRUED_VACATION_PAY(2,CLASS_POS)
     +          - RB_EXCLUDED_STORM_RESERVE(2,CLASS_POS)
     +          + ASSET_NEC_IN_RATE_BASE(2,CLASS_POS)

         IF(INDEX('Ending',RATEBASE_VALUATION) /= 0) THEN
            ACQ_ASSET_CLASS_RATE_BASE = RATE_BASE_loc(2,CLASS_POS)
            ACQ_RATE_BASE_PLANT_IN_SERVICE =
     +                   PLANT_IN_SERVICE_RATE_BASE(2,CLASS_POS)
            ACQ_RATE_BASE_DEF_TAXES = CUM_DEF_TAX_RATEBASE(2,CLASS_POS)
            ACQ_RATE_BASE_DEFERRED_DEBITS =
     +                    DEFERRED_DEBITS_RATE_BASE(2,CLASS_POS)
            acq_RATE_BASE_DEFERRED_CREDITS =
     +                DEFERRED_CREDITS_IN_RATE_BASE(2,CLASS_POS)
            IF(AFUDC_RETURN_POLICY == '2') THEN
              ACQ_RATE_BASE_NUC_FUEL = NUC_FUEL_RATE_BASE(2,CLASS_POS) +
     +                      NF_IN_PROCESS(2,CLASS_POS)
               ACQ_RATE_BASE_CWIP = CLASS_CWIP(2,CLASS_POS)
            ELSE
               ACQ_RATE_BASE_NUC_FUEL = NUC_FUEL_RATE_BASE(2,CLASS_POS)
               ACQ_RATE_BASE_CWIP = CWIP_IN_RATE_BASE(2,CLASS_POS)
            ENDIF
            acq_rate_base_def_itc = CUM_ITC_DEF_RATEBASE(2,CLASS_POS)
            ACQ_RATE_BASE_NUC_DECOM = NUC_DECOM_RATE_BASE(2,CLASS_POS)
            ACQ_RATE_BASE_CIAC = CIAC_RATE_BASE(2,CLASS_POS)
           ACQ_RATE_BASE_ASSET_NEC = ASSET_NEC_IN_RATE_BASE(2,CLASS_POS)
            ACQ_RATE_BASE_CAPITIALIZED_LEASES =
     +                CAPITIALIZED_LEASES_RATE_BASE(2,CLASS_POS)
            acq_CLASS_RB_DEFERRED_TAX_DR =
     +                   RB_INCLUDE_DEFERRED_TAX_DR(2,CLASS_POS)
            acq_CLASS_RB_DEFERRED_REVENUES =
     +                 RB_INCLUDE_DEFERRED_REVENUES(2,CLASS_POS)
            acq_CLASS_RB_PENSION_LIABILITY =
     +                RB_EXCLUDED_PENSION_LIABILITY(2,CLASS_POS)
            acq_CLASS_RB_DEFERRED_ASSET_GAIN =
     + RB_EXCLUDED_DEFERRED_ASSET_GAIN(2,CLASS_POS)
            acq_CLASS_RB_STORM_RESERVE =
     +                    RB_EXCLUDED_STORM_RESERVE(2,CLASS_POS)
            acq_CLASS_RB_ACCRUED_VACATION_PAY =
     +              RB_EXCLUDE_ACCRUED_VACATION_PAY(2,CLASS_POS)
         ELSEIF(INDEX('Opening',RATEBASE_VALUATION) /= 0) THEN
            ACQ_ASSET_CLASS_RATE_BASE = RATE_BASE_loc(1,CLASS_POS)
            ACQ_RATE_BASE_PLANT_IN_SERVICE =
     +                   PLANT_IN_SERVICE_RATE_BASE(1,CLASS_POS)
            ACQ_RATE_BASE_DEF_TAXES = CUM_DEF_TAX_RATEBASE(1,CLASS_POS)
            ACQ_RATE_BASE_DEFERRED_DEBITS =
     +                    DEFERRED_DEBITS_RATE_BASE(1,CLASS_POS)
            acq_RATE_BASE_DEFERRED_CREDITS =
     +                DEFERRED_CREDITS_IN_RATE_BASE(1,CLASS_POS)
            IF(AFUDC_RETURN_POLICY == '2') THEN
              ACQ_RATE_BASE_NUC_FUEL = NUC_FUEL_RATE_BASE(1,CLASS_POS) +
     +                      NF_IN_PROCESS(1,CLASS_POS)
               ACQ_RATE_BASE_CWIP = CLASS_CWIP(1,CLASS_POS)
            ELSE
               ACQ_RATE_BASE_NUC_FUEL = NUC_FUEL_RATE_BASE(1,CLASS_POS)
               ACQ_RATE_BASE_CWIP = CWIP_IN_RATE_BASE(1,CLASS_POS)
            ENDIF
            acq_rate_base_def_itc = CUM_ITC_DEF_RATEBASE(1,CLASS_POS)
            ACQ_RATE_BASE_NUC_DECOM = NUC_DECOM_RATE_BASE(1,CLASS_POS)
            ACQ_RATE_BASE_CIAC = CIAC_RATE_BASE(1,CLASS_POS)
           ACQ_RATE_BASE_ASSET_NEC = ASSET_NEC_IN_RATE_BASE(1,CLASS_POS)
            ACQ_RATE_BASE_CAPITIALIZED_LEASES =
     +                CAPITIALIZED_LEASES_RATE_BASE(1,CLASS_POS)
            acq_CLASS_RB_DEFERRED_TAX_DR =
     +                   RB_INCLUDE_DEFERRED_TAX_DR(1,CLASS_POS)
            acq_CLASS_RB_DEFERRED_REVENUES =
     +                 RB_INCLUDE_DEFERRED_REVENUES(1,CLASS_POS)
            acq_CLASS_RB_PENSION_LIABILITY =
     +                RB_EXCLUDED_PENSION_LIABILITY(1,CLASS_POS)
            acq_CLASS_RB_DEFERRED_ASSET_GAIN =
     + RB_EXCLUDED_DEFERRED_ASSET_GAIN(1,CLASS_POS)
            acq_CLASS_RB_STORM_RESERVE =
     +                    RB_EXCLUDED_STORM_RESERVE(1,CLASS_POS)
            acq_CLASS_RB_ACCRUED_VACATION_PAY =
     +            RB_EXCLUDE_ACCRUED_VACATION_PAY(1,CLASS_POS)
         ELSE ! IF(INDEX('Average',RATEBASE_VALUATION) /= 0) THEN
            ACQ_ASSET_CLASS_RATE_BASE = (RATE_BASE_loc(1,CLASS_POS) +
     +                                RATE_BASE_loc(2,CLASS_POS))/2.
            ACQ_RATE_BASE_PLANT_IN_SERVICE =
     +              (PLANT_IN_SERVICE_RATE_BASE(1,CLASS_POS)+
     +               PLANT_IN_SERVICE_RATE_BASE(2,CLASS_POS))/2.
          ACQ_RATE_BASE_DEF_TAXES = (CUM_DEF_TAX_RATEBASE(1,CLASS_POS) +
     +                     CUM_DEF_TAX_RATEBASE(2,CLASS_POS))/2.
            ACQ_RATE_BASE_DEFERRED_DEBITS =
     +               (DEFERRED_DEBITS_RATE_BASE(1,CLASS_POS) +
     +                DEFERRED_DEBITS_RATE_BASE(2,CLASS_POS))/2.
            acq_RATE_BASE_DEFERRED_CREDITS =
     +         (DEFERRED_CREDITS_IN_RATE_BASE(1,CLASS_POS)
     +          + DEFERRED_CREDITS_IN_RATE_BASE(2,CLASS_POS))/2.
            IF(AFUDC_RETURN_POLICY == '2') THEN
             ACQ_RATE_BASE_NUC_FUEL = (NUC_FUEL_RATE_BASE(1,CLASS_POS) +
     +                            NF_IN_PROCESS(1,CLASS_POS) +
     +                       NUC_FUEL_RATE_BASE(2,CLASS_POS) +
     +                            NF_IN_PROCESS(2,CLASS_POS))/2.
               ACQ_RATE_BASE_CWIP = (CLASS_CWIP(1,CLASS_POS) +
     +                               CLASS_CWIP(2,CLASS_POS))/2.
            ELSE
             ACQ_RATE_BASE_NUC_FUEL = (NUC_FUEL_RATE_BASE(1,CLASS_POS) +
     +                       NUC_FUEL_RATE_BASE(2,CLASS_POS))/2.
               ACQ_RATE_BASE_CWIP = (CWIP_IN_RATE_BASE(1,CLASS_POS) +
     +                        CWIP_IN_RATE_BASE(2,CLASS_POS))/2.
            ENDIF
            acq_rate_base_def_itc = (CUM_ITC_DEF_RATEBASE(1,CLASS_POS) +
     +                     CUM_ITC_DEF_RATEBASE(2,CLASS_POS))/2.
          ACQ_RATE_BASE_NUC_DECOM = (NUC_DECOM_RATE_BASE(1,CLASS_POS) +
     +                      NUC_DECOM_RATE_BASE(2,CLASS_POS))/2.
            ACQ_RATE_BASE_CIAC = (CIAC_RATE_BASE(1,CLASS_POS) +
     +                           CIAC_RATE_BASE(2,CLASS_POS))/2.
        ACQ_RATE_BASE_ASSET_NEC = (ASSET_NEC_IN_RATE_BASE(1,CLASS_POS) +
     +                   ASSET_NEC_IN_RATE_BASE(2,CLASS_POS))/2.
            ACQ_RATE_BASE_CAPITIALIZED_LEASES =
     +           (CAPITIALIZED_LEASES_RATE_BASE(1,CLASS_POS) +
     +            CAPITIALIZED_LEASES_RATE_BASE(2,CLASS_POS))/2.
            acq_CLASS_RB_DEFERRED_TAX_DR =
     +            (RB_INCLUDE_DEFERRED_TAX_DR(1,CLASS_POS)
     +             + RB_INCLUDE_DEFERRED_TAX_DR(2,CLASS_POS))/2.
            acq_CLASS_RB_DEFERRED_REVENUES =
     +          (RB_INCLUDE_DEFERRED_REVENUES(1,CLASS_POS)
     +           + RB_INCLUDE_DEFERRED_REVENUES(2,CLASS_POS))/2.
            acq_CLASS_RB_PENSION_LIABILITY =
     +         (RB_EXCLUDED_PENSION_LIABILITY(1,CLASS_POS)
     +          + RB_EXCLUDED_PENSION_LIABILITY(2,CLASS_POS))/2.
            acq_CLASS_RB_DEFERRED_ASSET_GAIN =
     + (RB_EXCLUDED_DEFERRED_ASSET_GAIN(1,CLASS_POS)
     + + RB_EXCLUDED_DEFERRED_ASSET_GAIN
     + (2,CLASS_POS))/2.
            acq_CLASS_RB_STORM_RESERVE =
     +             (RB_EXCLUDED_STORM_RESERVE(1,CLASS_POS)
     +              + RB_EXCLUDED_STORM_RESERVE(2,CLASS_POS))/2.
            acq_CLASS_RB_ACCRUED_VACATION_PAY =
     +       (RB_EXCLUDE_ACCRUED_VACATION_PAY(1,CLASS_POS)
     +        + RB_EXCLUDE_ACCRUED_VACATION_PAY(2,CLASS_POS))/2.
         ENDIF
         ACQ_ASSET_CLASS_RATE_BASE = ACQ_ASSET_CLASS_RATE_BASE +
     + ns_class_parameters%ADDENDUM_2_RATE_BASE
      RETURN
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                      C
C                           R I N I T                                  C
C        Copyright (c) 1982 M.S. Gerber & Associates, Inc.             C
C                      All Rights Reserved                             C
C                                                                      C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                      C
C     Purpose:  This routine reads the initialization file and      C
C               converts percent values to fractions.                  C
C                                                                      C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC


      ENTRY READ_CLASS_INITIALIZATION_FILE


         IREC = 0
         PARENT_HAS_LINKED_SBUS = .FALSE.
         PARENT_HAS_LINKED_SUBS = .FALSE.
         CALL OPEN_INITIZATION_FILE
         CALL GET_MAX_LINKED_SBUS(MAX_LINKED_CLASSES,MAX_INIT_CLASS_NUM)
         IF(ALLOCATED(LINKED_TO)) DEALLOCATE(LINKED_TO)
         ALLOCATE(SBU_LINKED_LIST(-1:1024,0:MAX_LINKED_CLASSES))
         ALLOCATE(LINKED_TO(0:MAX_INIT_CLASS_NUM))
         IF(ALLOCATED(LINKED_TO_COMPANY)) DEALLOCATE(LINKED_TO_COMPANY)
         ALLOCATE(LINKED_TO_COMPANY(0:MAX_INIT_CLASS_NUM))
         SBU_LINKED_LIST = -99
         LINKED_TO = 0
         LINKED_TO_COMPANY = -99
         IF(.NOT. ALLOCATED(SUBs_LINKED_TO_PARENT))
     +                  ALLOCATE(SUBs_LINKED_TO_PARENT(-1:1024))
         SUBs_LINKED_TO_PARENT = 0
         ELIMINAITON_CLASS_ID_NUM = 1024
         SUBs_LINKED_TO_PARENT(0) = ELIMINAITON_CLASS_ID_NUM
         CALL PARENT_CLASS_ID(PARENT_CLASS_ID_NUM)
         PARENT_CLASS_ID_NUM = PARENT_CLASS_ID_NUM + 1
         SUBs_LINKED_TO_PARENT(1) = PARENT_CLASS_ID_NUM
         DEFINED_CLASSES = 1
         CONSOLID_AVAILABLE_AMT_CREDITS = 0.
         NUM_OF_SUBSIDIARIES = 0
         NUM_OF_BUSINESS_UNITS = 0
         NUM_OF_REGULATED_UNITS = 0
         NUMBER_OF_REPORTING_CLASSES = 1
         SUBS_LINKED_2_PARENT = 0
      DO
         IREC = IREC + 1
         READ(10,REC=IREC,IOSTAT=IOS) DELETE,INT_ASSET_CLASS_NAME,
     +                        ASSET_CLASS_ID,ASSET_CLASS_TYPE,
     +                        ASSET_CLASS_TYPE_STR,
     +                        LINKED_CLASS_ID,REPORT_THIS_CLASS,
     +                        MOVE_TO_CLASS_ID,
     +                        ACCOUNT_ACTIVE
         IF(IOS /= 0) EXIT
         IF(DELETE >= 8 .OR. ACCOUNT_ACTIVE == 'N' .OR.
     +                            ASSET_CLASS_TYPE == 'N') CYCLE
         IF(ASSET_CLASS_ID >= 0) ASSET_CLASS_ID = ASSET_CLASS_ID + 1
         IF(LINKED_CLASS_ID >= 0) LINKED_CLASS_ID = LINKED_CLASS_ID + 1
         IF(ASSET_CLASS_TYPE == 'C') THEN ! CONSOLIDATING
            IS_CONSOLIDATING_CLASS = .TRUE.
            ASSET_CLASS_TYPE = 'S'
         ELSE
            IS_CONSOLIDATING_CLASS = .FALSE.
         ENDIF
         IF(ASSET_CLASS_TYPE == 'E') THEN !ELIMINATION
            INIT_CLASS = 0
            ELIMINAITON_CLASS_ID_NUM = ASSET_CLASS_ID
            SUBs_LINKED_TO_PARENT(0) = ELIMINAITON_CLASS_ID_NUM
            REPORT_THIS_CLASS = 'N'
         ELSE
            IF(ASSET_CLASS_TYPE == PARENT) THEN
C              PARENT_CLASS_ID_NUM = ASSET_CLASS_ID
C              SUBs_LINKED_TO_PARENT(1) = PARENT_CLASS_ID_NUM
            ELSE
               IF(ASSET_CLASS_TYPE /= 'C') THEN
                  IF(LINKED_CLASS_ID < 0 .OR.
     +                   LINKED_CLASS_ID == ASSET_CLASS_ID) THEN
                     WRITE(4,*) "*** STOP at line 10232 "//
     +                   "       READ_CLASS_INITIALIZATION_FILE"
                     WRITE(4,*) '*** Class ',INT_ASSET_CLASS_NAME
                     WRITE(4,*) 'is linked to itself or has an invalid'
                     WRITE(4,*) 'link number'
                     WRITE(4,*) 'Class ID ',ASSET_CLASS_ID-1
                     WRITE(4,*) ' linked to ID ',LINKED_CLASS_ID-1
                     er_message='See WARNING MESSAGES -msgmmsb6.for-1'
                     call end_program(er_message)
                  ENDIF
               ENDIF
               IF(ASSET_CLASS_TYPE == SUBSIDIARY) THEN
                  NUM_OF_SUBSIDIARIES = NUM_OF_SUBSIDIARIES + 1
                  LINKED_TO(ASSET_CLASS_ID) = LINKED_CLASS_ID
                  IF(LINKED_CLASS_ID == PARENT_CLASS_ID_NUM) THEN
                     SUBS_LINKED_2_PARENT = SUBS_LINKED_2_PARENT + 1
                     SUBs_LINKED_TO_PARENT(SUBS_LINKED_2_PARENT+1) =
     +                                            ASSET_CLASS_ID
                     PARENT_HAS_LINKED_SUBS = .TRUE.
                  ELSE
                     IF(LINKED_CLASS_ID >= 0) THEN
                        IF(SBU_LINKED_LIST(LINKED_CLASS_ID,0)==-99) THEN
                           SBU_LINKED_LIST(LINKED_CLASS_ID,0) = 1
                        ENDIF
                        LINK_POS = SBU_LINKED_LIST(LINKED_CLASS_ID,0)
                        SBU_LINKED_LIST(LINKED_CLASS_ID,LINK_POS) =
     +                                            ASSET_CLASS_ID
                        SBU_LINKED_LIST(LINKED_CLASS_ID,0) = 1 +
     +                        SBU_LINKED_LIST(LINKED_CLASS_ID,0)
                     ENDIF
                  ENDIF
               ELSE
                  IF(ASSET_CLASS_TYPE == SBU) THEN
                     NUM_OF_BUSINESS_UNITS = NUM_OF_BUSINESS_UNITS + 1
                  ELSE
                     NUM_OF_REGULATED_UNITS = NUM_OF_REGULATED_UNITS + 1
                     NUM_OF_BUSINESS_UNITS = NUM_OF_BUSINESS_UNITS + 1
                  ENDIF
                  LINKED_TO(ASSET_CLASS_ID) = LINKED_CLASS_ID
                  IF(LINKED_CLASS_ID == PARENT_CLASS_ID_NUM)
     +                           PARENT_HAS_LINKED_SBUS = .TRUE.
                  IF(LINKED_CLASS_ID >= 0 .AND.
     +                   LINKED_CLASS_ID /= ASSET_CLASS_ID) THEN
                     IF(SBU_LINKED_LIST(LINKED_CLASS_ID,0) == -99) THEN
                        SBU_LINKED_LIST(LINKED_CLASS_ID,0) = 1
                     ENDIF
                     LINK_POS = SBU_LINKED_LIST(LINKED_CLASS_ID,0)
                     SBU_LINKED_LIST(LINKED_CLASS_ID,LINK_POS) =
     +                                            ASSET_CLASS_ID
                     SBU_LINKED_LIST(LINKED_CLASS_ID,0) = 1 +
     +                        SBU_LINKED_LIST(LINKED_CLASS_ID,0)
                  ENDIF
               ENDIF
               IF(REPORT_THIS_CLASS == 'Y' .OR. REPORT_THIS_CLASS=='Z')
     +            NUMBER_OF_REPORTING_CLASSES =
     +                           NUMBER_OF_REPORTING_CLASSES + 1
               DEFINED_CLASSES = DEFINED_CLASSES + 1
            ENDIF
            INIT_CLASS = MASTER_CLASS_LIST(ASSET_CLASS_ID)
            IF(INIT_CLASS == 0 .AND. IREC  > 1) THEN
               CYCLE
            ENDIF
         ENDIF
         ACTIVATE_CLASS_IN_YEAR(INIT_CLASS) = 0
         YEAR_CLASS_DEACTIVATED(INIT_CLASS) = 0
         CLASS_NAME(INIT_CLASS) = INT_ASSET_CLASS_NAME
         CLASS_TYPE(INIT_CLASS) = ASSET_CLASS_TYPE
         LINKED_2_CLASS(INIT_CLASS) = LINKED_CLASS_ID
         REPORT_CLASS(INIT_CLASS) = REPORT_THIS_CLASS == 'Y' .OR.
     +                      REPORT_THIS_CLASS=='Z'
         CONSOLIDATING_CLASS(INIT_CLASS) = IS_CONSOLIDATING_CLASS

         READ(10,REC=IREC,IOSTAT=IOS) DELETE,INT_ASSET_CLASS_NAME,
     +  DELETE,
     +  ASSET_CLASS_TYPE,
     +  ASSET_CLASS_TYPE_STR,
     +  LINKED_CLASS_ID,REPORT_THIS_CLASS,
     +  MOVE_TO_CLASS_ID,
     +  ACCOUNT_ACTIVE,
     +  COMPANY_ID,
     +  OTHER_ASSETS(2,INIT_CLASS),
     +  CUMTXNORM(2,INIT_CLASS),
     +  CUM_DEF_REVENUES(2,INIT_CLASS),
     +  WCCUM(2,INIT_CLASS),
     +  DEF_ITC_BALANCE(2,INIT_CLASS),
     +  DEF_TAX_CR_BALANCE(2,INIT_CLASS),
     +  LINEC(2,INIT_CLASS),
     +  COMMON_STOCK(2,INIT_CLASS),
     +  COMMON_SHARES(2,INIT_CLASS),
     +  REARNC(2,INIT_CLASS),
     +  PREFERRED_STOCK(2,INIT_CLASS),
     +  LONG_TERM_DEBT(2,INIT_CLASS),
     +  SHORT_TERM_DEBT(2,INIT_CLASS),
     +  OTHER_LT_LIABILITY(2,INIT_CLASS),
     +  OPERATING_REVENUES(2,INIT_CLASS),
     +  ns_class_tax_losses%stbokloss(3),
     + ns_class_tax_losses%stbokloss(2),
     + ns_class_tax_losses%stbokloss(1),
     + ns_class_tax_losses%FDBKLOSS(3),
     + ns_class_tax_losses%FDBKLOSS(2),
     + ns_class_tax_losses%FDBKLOSS(1),
     + LTDINT(0,INIT_CLASS),
     +  INTEREST_ON_SHORT_TERM_DEBT(2,INIT_CLASS),
     +  PSDIV(0,INIT_CLASS),
     +  RATE_REVENUE(0,INIT_CLASS),
     +  CUM_DEF_TAX_RATEBASE(2,INIT_CLASS),
     +  CUM_ITC_DEF_RATEBASE(2,INIT_CLASS),
     +  LIQUID_INVESTMENTS(2,INIT_CLASS),
     +  AVAILCREDIT(1,INIT_CLASS),
     +  NUC_DECOM_FUND_BAL(2,INIT_CLASS),
     +  DEFERRED_EXPENSE_BALANCE(2,INIT_CLASS),
     +  CUSTOMER_DEPOSITS_BAL(2,INIT_CLASS),
     +  WEIGHTED_COST_OF_CAPITAL_BY(INIT_CLASS),
     +  CIAC_BALANCE(2,INIT_CLASS),
     +  INIT_PLANNING_PEAK(1,INIT_CLASS),
     +  INIT_PLANNING_PEAK(2,INIT_CLASS),
     +  INIT_PLANNING_PEAK(3,INIT_CLASS),
     +  BY_ADJUSTMENT_2_ECONOMIC_ASSETS(INIT_CLASS),
     +  INVESTMENT_IN_SUBSIDIARIES(2,INIT_CLASS),
     +  CAPITIALZIED_LEASES(2,INIT_CLASS),
     +  REGULATORY_ASSETS,  ! PLACEHOLDER
     +  NUC_DECOM_RATE_BASE(2,INIT_CLASS),
     +  CAPITIALIZED_LEASES_RATE_BASE(2,INIT_CLASS),
     +  CIAC_RATE_BASE(2,INIT_CLASS),
     +  ASSET_NEC_IN_RATE_BASE(2,INIT_CLASS),
     +  CLASS_ADDENDUM_2_RATE_BASE(INIT_CLASS),
     +  POST_RETIREMENT_MEDICAL_FUND(INIT_CLASS),
     +  POST_RETIREMENT_MED_PAYABLE(INIT_CLASS),
     +  NUC_DECOM_FUND_LIABILITY(INIT_CLASS),
     +  LONG_TERM_INVESTMENTS(INIT_CLASS),
     +  TOTAL_CAPITAL,
     +  STOCK_PRICE_YEAR_END(2,INIT_CLASS),
     +  CURRENCY_DENOMINATION(INIT_CLASS),
     +  FED_TAX_EXEMPT(INIT_CLASS),
     +  YEAR_CLASS_DEACTIVATED(INIT_CLASS),
     +  ACTIVATE_CLASS_IN_YEAR(INIT_CLASS),
     +  ACCOUNTS_RECEIVABLE(INIT_CLASS),
     +  ACCOUNTS_PAYABLE(INIT_CLASS),
     +  COMMON_DIVIDEND_PAYMENT(INIT_CLASS),
     +  FUEL_INVENTORY(INIT_CLASS),
     +  DEFERRED_FUEL_BALANCE(INIT_CLASS), ! 71
     +  PENSION_LIABILITY(2,INIT_CLASS),
     +  DEFERRED_GAIN_FROM_SALES(2,INIT_CLASS),
     +  STORM_RESERVE_BALANCE(2,INIT_CLASS),
     +  ACCRUED_VACATION_PAY_BALANCE(2,INIT_CLASS),
     +  RB_INCLUDE_DEFERRED_TAX_DR(2,INIT_CLASS),
     +  RB_INCLUDE_DEFERRED_REVENUES(2,INIT_CLASS),
     +  RB_EXCLUDED_PENSION_LIABILITY(2,INIT_CLASS),
     +RB_EXCLUDED_DEFERRED_ASSET_GAIN(2,INIT_CLASS),
     +  RB_EXCLUDED_STORM_RESERVE(2,INIT_CLASS),
     +  RB_EXCLUDE_ACCRUED_VACATION_PAY(2,INIT_CLASS),
     +  CLASS_MATERIALS_N_SUPPLIES(INIT_CLASS),
     +  CLASS_GAS_STORAGE(INIT_CLASS),
     +  CLASS_DEFERRED_PURCHASE_GAS(INIT_CLASS),
     +  DEFERRED_PURCHASE_POWER(2,INIT_CLASS),
     +  ACQUISITION_PREMIUM(INIT_CLASS),
     +  FASB143_NET_ASSET_VALUE(2,INIT_CLASS),
     +  FASB143_LT_LIABILITY_VALUE(2,INIT_CLASS),
     +  PROPERTY_TAX_BASIS(2,INIT_CLASS),  ! 91 BASE YEAR
     +  PROPERTY_TAX_BASIS(1,INIT_CLASS),  ! 92 BY-1
     +  STD_INTEREST_VECTOR(INIT_CLASS),
     +  LTD_INTEREST_VECTOR(INIT_CLASS),
     +  PS_DIVIDENDS_VECTOR(INIT_CLASS),
     +  STI_INTEREST_VECTOR(INIT_CLASS),
     +  LTI_INTEREST_VECTOR(INIT_CLASS),
     +  CUSTOMER_DEPOSIT_INTREST_VECTOR(INIT_CLASS),
     +  DECOM_FUND_INTEREST_VECTOR(INIT_CLASS),
     +  RETIREMENT_FUND_INTEREST_VECTOR(INIT_CLASS),
     +  CURRENCY_CONVERSION_VECTOR(INIT_CLASS),   ! 101
     +  FASB_87_INTANGIBLE_ASSETS(INIT_CLASS),
     +  OTHER_COMPREHENSIVE_INCOME_BALANCE(INIT_CLASS),  ! 103
     +  OPERATING_REVENUE_TAX_LAGGED_BASIS(INIT_CLASS),   ! 104
     +  ExecBenefitsBalance(2,INIT_CLASS),
     +  IncentiveCompBalance(2,INIT_CLASS)

         LINKED_TO_COMPANY(ASSET_CLASS_ID) = COMPANY_ID
         CLASS_NUC_DECOM_TRUST_BAL(INIT_CLASS) =
     +                          NUC_DECOM_FUND_BAL(2,INIT_CLASS)
         CIAC_CLASS_BALANCE(INIT_CLASS) = CIAC_BALANCE(2,INIT_CLASS)

         YEAR_CLASS_DEACTIVATED(INIT_CLASS) =
     +               MAX(-1,YEAR_CLASS_DEACTIVATED(INIT_CLASS) -
     +                                                get_BASE_YEAR())
         ACTIVATE_CLASS_IN_YEAR(INIT_CLASS) =
     +               MAX(-1,ACTIVATE_CLASS_IN_YEAR(INIT_CLASS) -
     +                                                get_BASE_YEAR())
         REPORT_ZEROS_4_CLASS(INIT_CLASS)=REPORT_THIS_CLASS == 'Z' .AND.
     +                    ACTIVATE_CLASS_IN_YEAR(INIT_CLASS) > 1
         IF(CLASS_TYPE(INIT_CLASS) == PARENT) THEN
            YEAR_CLASS_DEACTIVATED(INIT_CLASS) = -1
            ACTIVATE_CLASS_IN_YEAR(INIT_CLASS) = -1
            PARENT_CASH_CS_DIVIDEND_PAYMENT =
     +                       COMMON_DIVIDEND_PAYMENT(INIT_CLASS)
            IF(FirstEnergy()) THEN
               UNMODELLED_SUBS_OWNED_BY_PARENT = 0.
            ELSE
               UNMODELLED_SUBS_OWNED_BY_PARENT =
     +                  INVESTMENT_IN_SUBSIDIARIES(2,INIT_CLASS)
            ENDIF
         ENDIF

C CALCULATED DOLLAR AMOUNTS FROM CAP STRUCTURE RATES

         IF(COMMON_STOCK(2,INIT_CLASS) <= 1. .AND.
     +                     COMMON_STOCK(2,INIT_CLASS) > 0.) THEN
            COMMON_STOCK(2,INIT_CLASS) = COMMON_STOCK(2,INIT_CLASS) *
     +                                             TOTAL_CAPITAL
         ENDIF
         IF(REARNC(2,INIT_CLASS) <= 1. .AND.
     +                           REARNC(2,INIT_CLASS) > 0.) THEN
            REARNC(2,INIT_CLASS) = REARNC(2,INIT_CLASS) * TOTAL_CAPITAL
         ENDIF
         IF(ASSET_CLASS_TYPE == 'E') THEN !ELIMINATION
            R_PREFERRED_STOCK_ISSUED = 0.
            R_LONG_TERM_DEBT_ISSUED = 0.
            R_INVESTMENT_IN_AFILLIATES = 0.
            R_LOANS_TO_AFILLIATES = 0.
            PS_PREM_BAL = 0.
            LTD_PREM_BAL = 0.
            PS_ISSUING_BAL = 0.
            LTD_ISSUING_BAL = 0.
         ELSE
            CALL DEBT_BASE_YEAR_INFO(ASSET_CLASS_ID,
     +                    R_PREFERRED_STOCK_ISSUED,
     +                    R_LONG_TERM_DEBT_ISSUED,
     +                    R_INVESTMENT_IN_AFILLIATES,
     +                    R_LOANS_TO_AFILLIATES,
     +                    PS_PREM_BAL,
     +                    LTD_PREM_BAL,
     +                    PS_ISSUING_BAL,
     +                    LTD_ISSUING_BAL)
         ENDIF
         OTHER_ASSETS(2,INIT_CLASS) = OTHER_ASSETS(2,INIT_CLASS)
     +                        + R_INVESTMENT_IN_AFILLIATES
     +                        + R_LOANS_TO_AFILLIATES
         IF(PREFERRED_STOCK(2,INIT_CLASS) <= 1. .AND.
     +                  PREFERRED_STOCK(2,INIT_CLASS) > 0.) THEN
            PREFERRED_STOCK_ADDENDUM(INIT_CLASS) = TOTAL_CAPITAL *
     +                           PREFERRED_STOCK(2,INIT_CLASS) -
     +                           R_PREFERRED_STOCK_ISSUED
         ELSE
            IF(ASSET_CLASS_TYPE == SBU .OR.
     +                 ASSET_CLASS_TYPE == REGULATED_GROUP) THEN
               PREFERRED_STOCK_ADDENDUM(INIT_CLASS) =
     +                       MAX(PREFERRED_STOCK(2,INIT_CLASS) -
     +                           R_PREFERRED_STOCK_ISSUED,0.)
            ELSE
               PREFERRED_STOCK_ADDENDUM(INIT_CLASS) =
     +                             PREFERRED_STOCK(2,INIT_CLASS)
            ENDIF
         ENDIF
         PREFERRED_STOCK(2,INIT_CLASS) = R_PREFERRED_STOCK_ISSUED +
     +                    PREFERRED_STOCK_ADDENDUM(INIT_CLASS) +
     +                    PS_PREM_BAL ! - PS_ISSUING_BAL
         IF(LONG_TERM_DEBT(2,INIT_CLASS) <= 1. .AND.
     +                   LONG_TERM_DEBT(2,INIT_CLASS) > 0.) THEN
            LONG_TERM_DEBT_ADDENDUM(INIT_CLASS) = TOTAL_CAPITAL *
     +                            LONG_TERM_DEBT(2,INIT_CLASS) -
     +                            R_LONG_TERM_DEBT_ISSUED
         ELSE
            IF(ASSET_CLASS_TYPE == SBU .OR.
     +                 ASSET_CLASS_TYPE == REGULATED_GROUP) THEN
               LONG_TERM_DEBT_ADDENDUM(INIT_CLASS) =
     +                        MAX(LONG_TERM_DEBT(2,INIT_CLASS) -
     +                            R_LONG_TERM_DEBT_ISSUED,0.)
            ELSE
               LONG_TERM_DEBT_ADDENDUM(INIT_CLASS) =
     +                              LONG_TERM_DEBT(2,INIT_CLASS)
            ENDIF
         ENDIF
         LONG_TERM_DEBT(2,INIT_CLASS) = R_LONG_TERM_DEBT_ISSUED
     +                     + LONG_TERM_DEBT_ADDENDUM(INIT_CLASS)
     +                     + LTD_PREM_BAL ! - LTD_ISSUING_BAL

C     ADJUST ASSESTS NEC BY LIAB NEC TO GET WORKING CAPITAL

         WCCUM(2,INIT_CLASS) = WCCUM(2,INIT_CLASS) - LINEC(2,INIT_CLASS)
         COMMON_EQUITY(2,INIT_CLASS) = COMMON_STOCK(2,INIT_CLASS) +
     +                                      REARNC(2,INIT_CLASS)
         IF(COMMON_SHARES(2,INIT_CLASS) == 0.) THEN
C            COMMON_SHARES(2,INIT_CLASS) = .0001
            BOOK_VALUE_STOCK(2,INIT_CLASS) = COMMON_EQUITY(2,INIT_CLASS)
         ELSE
            BOOK_VALUE_STOCK(2,INIT_CLASS)=COMMON_EQUITY(2,INIT_CLASS)/
     +                               COMMON_SHARES(2,INIT_CLASS)
         ENDIF
         SALES(1,INIT_CLASS) = RATE_REVENUE(0,INIT_CLASS)
         ns_class_master%BDPAFC = 0.0
         ns_class_ctaxes%FDBKINCO = ns_class_tax_losses%FDBKLOSS(3)
         ns_class_ctaxes%STBOKINCO = ns_class_tax_losses%stbokloss(3)

C     COMPUTE INITIAL PARAMETER VALUES FROM THE VALUES JUST READ

c$ifdefined(sbu_testing)

C SBU USING ANUALIZED LTD AND PS AS A % COST VS $M

         IF(LTDINT(0,INIT_CLASS) < 0.) THEN
            WEIGHTED_CLASS_LTD_COST(INIT_CLASS) =
     +                            ABS(LTDINT(0,INIT_CLASS))/100.
            LTDINT(0,INIT_CLASS) = WEIGHTED_CLASS_LTD_COST(INIT_CLASS) *
     +                              LONG_TERM_DEBT(2,INIT_CLASS)
         ELSE
            IF(LONG_TERM_DEBT(2,INIT_CLASS) /= 0. .AND.
     +                           LTDINT(0,INIT_CLASS) > 0.) THEN
               WEIGHTED_CLASS_LTD_COST(INIT_CLASS)=LTDINT(0,INIT_CLASS)/
     +                              LONG_TERM_DEBT(2,INIT_CLASS)
            ELSE
               WEIGHTED_CLASS_LTD_COST(INIT_CLASS) = 0.
            ENDIF
         ENDIF
         IF(PSDIV(0,INIT_CLASS) < 0.) THEN
            WEIGHTED_CLASS_PS_COST(INIT_CLASS) =
     +                            ABS(PSDIV(0,INIT_CLASS))/100.
            PSDIV(0,INIT_CLASS) = WEIGHTED_CLASS_PS_COST(INIT_CLASS) *
     +                             PREFERRED_STOCK(2,INIT_CLASS)
         ELSE
            IF(PREFERRED_STOCK(2,INIT_CLASS) /= 0. .AND.
     +                            PSDIV(0,INIT_CLASS) > 0.) THEN
               WEIGHTED_CLASS_PS_COST(INIT_CLASS)=PSDIV(0,INIT_CLASS)/
     +                             PREFERRED_STOCK(2,INIT_CLASS)
            ELSE
               WEIGHTED_CLASS_PS_COST(INIT_CLASS) = 0.
            ENDIF
         ENDIF

         IF(ASSET_CLASS_TYPE == 'P') THEN ! PARENT
            EMBEDDED_PARENT_LTD_COST=WEIGHTED_CLASS_LTD_COST(INIT_CLASS)
            EMBEDDED_PARENT_PS_COST = WEIGHTED_CLASS_PS_COST(INIT_CLASS)
            CONSOLID_AVAILABLE_AMT_CREDITS = AVAILCREDIT(1,INIT_CLASS) +
     +                            CONSOLID_AVAILABLE_AMT_CREDITS
         ENDIF

         ANNINT(0,INIT_CLASS) = LTDINT(0,INIT_CLASS)+PSDIV(0,INIT_CLASS)
         ANN_PS_DIV(0,INIT_CLASS) = PSDIV(0,INIT_CLASS)
         ANN_LTD_INT(0,INIT_CLASS) = LTDINT(0,INIT_CLASS)
c$endif
      ENDDO
      CALL CLOSE_INIIZATION_FILE
      ALL_CLASS_BUSINESS_UNITS = NUM_OF_SUBSIDIARIES == 0 .AND.
     +                                 NUM_OF_BUSINESS_UNITS > 0
      ALL_CLASS_SUBSIDIARIES =  NUM_OF_SUBSIDIARIES > 0 .AND.
     +                                NUM_OF_BUSINESS_UNITS == 0
      MIX_OF_SUBS_AND_BUSINESS_UNITS =  NUM_OF_SUBSIDIARIES > 0 .AND.
     +                                 NUM_OF_BUSINESS_UNITS > 0

C SAVE DEFINED CLASS POINTER LIST

      IF(ALLOCATED(DEFINED_CLASS_POINTER_LIST))
     +                    DEALLOCATE(DEFINED_CLASS_POINTER_LIST,
     +                               CLASS_AT_LEVEL)
      ALLOCATE(DEFINED_CLASS_POINTER_LIST(-1:DEFINED_CLASSES))
      ALLOCATE(CLASS_LINKED_LEVEL(DEFINED_CLASSES))
      ALLOCATE(TEMP_LIST(DEFINED_CLASSES))
      ALLOCATE(TEMP_LIST2(DEFINED_CLASSES))
      ALLOCATE(TEMP_CLASS_LINKED_LEVEL(DEFINED_CLASSES))
      ALLOCATE(CLASS_AT_LEVEL(-1:DEFINED_CLASSES))
      CLASS_LINKED_LEVEL = 0
      TEMP_LIST = 0
      TEMP_LIST2 = 0
      L = -1
      CLASS_AT_LEVEL = 0
      DEFINED_CLASS_POINTER_LIST = 0
      DEFINED_CLASS_POINTER_LIST(-1) = SUBs_LINKED_TO_PARENT(-1)
      DEFINED_CLASS_POINTER_LIST(0) = SUBs_LINKED_TO_PARENT(0)
      CLASS_AT_LEVEL(-1) = 0
      CLASS_AT_LEVEL(0) = 0
      CLASSES_ASSIGNED = 0
      MAX_LINKED_LEVEL = 0
      LINKED_LEVEL = 0
      DO LINKS_2_PARENT = 1, SUBS_LINKED_2_PARENT+1
         I = 1
         TEMP_LIST(I) = SUBs_LINKED_TO_PARENT(LINKS_2_PARENT)
         MORE_LEVELS = .FALSE.
         ID_NUM = TEMP_LIST(I)
         CLASS_LINKED_LEVEL(I) = LINKED_LEVEL ! 1
         LINKED_LEVEL = LINKED_LEVEL + 1
         I = I + 1
         IF(SBU_LINKED_LIST(ID_NUM,0) > 0) THEN
            SBU_LINKED_LIST(ID_NUM,0) = -98
            DO J = 1, MAX_LINKED_CLASSES
               IF(SBU_LINKED_LIST(ID_NUM,J) < 0) EXIT
               TEMP_LIST(I) = SBU_LINKED_LIST(ID_NUM,J)
               CLASS_LINKED_LEVEL(I) = LINKED_LEVEL ! 2
               MORE_LEVELS = .TRUE.
               I = I + 1
            ENDDO
         ENDIF
         CLASSES_IN_LIST = I - 1
         IF(MORE_LEVELS) THEN
c           LINKED_LEVEL = 2
            DOWHILE (MORE_LEVELS)
               MORE_LEVELS = .FALSE.
               DO I = 1, CLASSES_IN_LIST
                  TEMP_LIST2(I) = TEMP_LIST(I)
                  TEMP_CLASS_LINKED_LEVEL(I) = CLASS_LINKED_LEVEL(I)
               ENDDO
               LINKED_LEVEL = LINKED_LEVEL + 1
               L = 1
               DO I = 1, CLASSES_IN_LIST
                  TEMP_LIST(L) = TEMP_LIST2(I)
                  CLASS_LINKED_LEVEL(L) = TEMP_CLASS_LINKED_LEVEL(I)
                  ID_NUM = TEMP_LIST2(I)
                  L = L + 1
                  IF(SBU_LINKED_LIST(ID_NUM,0) > 0) THEN
                     SBU_LINKED_LIST(ID_NUM,0) = -98
                     DO J = 1, MAX_LINKED_CLASSES
                        IF(SBU_LINKED_LIST(ID_NUM,J) < 0) EXIT
                        TEMP_LIST(L) = SBU_LINKED_LIST(ID_NUM,J)
                        CLASS_LINKED_LEVEL(L) = LINKED_LEVEL
                        L = L + 1
                     ENDDO
                     MORE_LEVELS = .TRUE.
                  ENDIF
               ENDDO
               CLASSES_IN_LIST = L - 1
            ENDDO
         ENDIF
         DO I = 1, CLASSES_IN_LIST
            CLASSES_ASSIGNED = CLASSES_ASSIGNED + 1
            DEFINED_CLASS_POINTER_LIST(CLASSES_ASSIGNED) = TEMP_LIST(I)
            CLASS_AT_LEVEL(CLASSES_ASSIGNED) = CLASS_LINKED_LEVEL(I)
            MAX_LINKED_LEVEL = MAX(MAX_LINKED_LEVEL,
     +                         CLASS_AT_LEVEL(CLASSES_ASSIGNED))
         ENDDO
         LINKED_LEVEL = 1
      ENDDO
      DEALLOCATE(TEMP_LIST,SBU_LINKED_LIST,TEMP_LIST2,
     +   CLASS_LINKED_LEVEL,TEMP_CLASS_LINKED_LEVEL)
      RETURN

c      ENTRY CATAWBA_BY_DEF_TAXES_BAL(CATAWBA_DEFERRED_TAXES_BAL_CR)

c        TXDEFC(1) = TXDEFC(1) ! + CATAWBA_DEFERRED_TAXES_BAL_CR
c      RETURN

      ENTRY CLASS_LINKED_TO(R_CLASS,R_LINKED_CLASS)

         R_LINKED_CLASS = LINKED_TO(R_CLASS)
      RETURN

      ENTRY CLASS_BELONGS_TO_COMPANY(R_CLASS,R_LINKED_CLASS)

         IF(R_CLASS < 1) THEN
            R_LINKED_CLASS = 1
         ELSE
            R_LINKED_CLASS = LINKED_TO_COMPANY(R_CLASS)
         ENDIF
      RETURN

      ENTRY CLASS_LINKED_TO_PARENT(R_CLASS,R_CLASS_IS_LINKED_TO_PARENT)

         R_CLASS_IS_LINKED_TO_PARENT =
     +                 LINKED_TO(R_CLASS) == PARENT_CLASS_ID_NUM
      RETURN

      ENTRY CLASS_ACTIVATE_IN_YR(R_CLASS,R_ACTIVATE_YR,R_MO_ACTIVE)

         IF(R_CLASS > 0) THEN
            CLASS_POS = MASTER_CLASS_LIST(R_CLASS)
            R_ACTIVATE_YR = ACTIVATE_CLASS_IN_YEAR(CLASS_POS)
         ELSE
            R_ACTIVATE_YR = -1
         ENDIF
         R_ACTIVATE_YR = -1
         R_MO_ACTIVE = 1
      RETURN

      ENTRY CLASS_DEACTIVATE_IN_YR(R_CLASS,R_DEACTIVE_YR,R_MO_DEACT)

         R_DEACTIVE_YR = 199
         R_MO_DEACT = 13
         return
c         IF(R_CLASS > 0) THEN
c            CLASS_POS = MASTER_CLASS_LIST(R_CLASS)
c            R_DEACTIVE_YR = YEAR_CLASS_DEACTIVATED(CLASS_POS)
c            IF(R_DEACTIVE_YR <= 0) R_DEACTIVE_YR = 199
c         ELSE
c            R_DEACTIVE_YR = 199
c         ENDIF
c         R_DEACTIVE_YR = 199
c         R_MO_DEACT = 13
c      RETURN

      ENTRY MOVE_BALANCE_SHEET_ITEMS()

         DO I = 1, 2
            IF(CLASS_TYPE(CLASS_POS) /= SUBSIDIARY .AND.

     +           .NOT. DONT_TALLY_THIS_CLASS .AND. CLASS_LEVEL > 0) THEN
               BALANCE_SHEET_ROLLUPS(I,ARO_Net_Assets,CLASS_LEVEL-1) =
     +             BALANCE_SHEET_ROLLUPS(I,ARO_Net_Assets,CLASS_LEVEL-1)
     +             + FASB143_NET_ASSET_VALUE(I,CLASS_POS)
     +             + BALANCE_SHEET_ROLLUPS(I,ARO_Net_Assets,CLASS_LEVEL)
               BALANCE_SHEET_ROLLUPS(I,aro_liabilities,CLASS_LEVEL-1) =
     +            BALANCE_SHEET_ROLLUPS(I,aro_liabilities,CLASS_LEVEL-1)
     +            + FASB143_LT_LIABILITY_VALUE(I,CLASS_POS)
     +            + BALANCE_SHEET_ROLLUPS(I,aro_liabilities,CLASS_LEVEL)

               BALANCE_SHEET_ROLLUPS(I,Other_Deferred_Credits,
     +                                                  CLASS_LEVEL-1) =
     +                 BALANCE_SHEET_ROLLUPS(I,Other_Deferred_Credits,
     +                                                    CLASS_LEVEL-1)
     +                 + OTHER_DEFERRED_CREDITS_BAL(I,CLASS_POS)
     +                 + BALANCE_SHEET_ROLLUPS(I,Other_Deferred_Credits,
     +                                                      CLASS_LEVEL)
               BALANCE_SHEET_ROLLUPS(I,Regulatory_Deferred_Credits,
     +                                                  CLASS_LEVEL-1) =
     +            BALANCE_SHEET_ROLLUPS(I,Regulatory_Deferred_Credits,
     +                                                    CLASS_LEVEL-1)
     +            + REGULATORY_DEFERRED_CREDITS_BAL(I,CLASS_POS)
     +            + BALANCE_SHEET_ROLLUPS(I,Regulatory_Deferred_Credits,
     +                                                      CLASS_LEVEL)
               BALANCE_SHEET_ROLLUPS(I,Reaquired_Debt_Gain,
     +                                                  CLASS_LEVEL-1) =
     +                    BALANCE_SHEET_ROLLUPS(I,Reaquired_Debt_Gain,
     +                                                    CLASS_LEVEL-1)
     +                    + GAIN_ON_REAQUIRED_DEBT_BAL(I,CLASS_POS)
     +                    + BALANCE_SHEET_ROLLUPS(I,Reaquired_Debt_Gain,
     +                                                      CLASS_LEVEL)

            ENDIF
C ZERO LOWER LEVEL
            BALANCE_SHEET_ROLLUPS(I,ARO_Net_Assets,CLASS_LEVEL) = 0.
            BALANCE_SHEET_ROLLUPS(I,aro_liabilities,CLASS_LEVEL) = 0.
            BALANCE_SHEET_ROLLUPS(I,Other_Deferred_Credits,
     +                                                 CLASS_LEVEL) = 0.
            BALANCE_SHEET_ROLLUPS(I,Regulatory_Deferred_Credits,
     +                                                 CLASS_LEVEL) = 0.
            BALANCE_SHEET_ROLLUPS(I,Reaquired_Debt_Gain,
     +                                                 CLASS_LEVEL) = 0.

         END DO
      RETURN

      ENTRY ASSET_CLASS_PROPERTY_TAXES


C     PROPERTY TAX ON CONSTURCTION

         OPENING_BALANACE_4_PROPERTY_TAX =
     +                       PROPERTY_TAX_BASIS_VALUATION == 'O'
         CLOSING_BALANACE_4_PROPERTY_TAX =
     +                       PROPERTY_TAX_BASIS_VALUATION == 'E'
         IF(WVPA()) CLOSING_BALANACE_4_PROPERTY_TAX = .TRUE.
         IF(IPALCO() .AND. IPALCO_PROPERTY_TAX)
     +                  CLOSING_BALANACE_4_PROPERTY_TAX = .TRUE.

         acq_PROPERTY_VALUE = 0.
         IF(REAL_PROPERTY_TAX_VALUES()) THEN
            GPV_WITH_CWIP = ns_class_master%PROPERTY_TAX_GPV +
     +      (CLASS_CWIP(2,CLASS_POS) + CLASS_CWIP(1,CLASS_POS)
     +               + NFIS(2,CLASS_POS) + NFIS(1,CLASS_POS))/2.
            GPV_NO_CWIP = ns_class_master%PROPERTY_TAX_GPV
     +              + (NFIS(2,CLASS_POS) + NFIS(1,CLASS_POS))/2.
            NPV_WITH_CWIP = ns_class_master%PROPERTY_TAX_NPV +
     +     (CLASS_CWIP(2,CLASS_POS) + CLASS_CWIP(1,CLASS_POS)
     +               + NFIS(2,CLASS_POS) + NFIS(1,CLASS_POS))/2.
            NPV_NO_CWIP = ns_class_master%PROPERTY_TAX_NPV
     +              + (NFIS(2,CLASS_POS) + NFIS(1,CLASS_POS))/2.
         ELSE
            IF(OPENING_BALANACE_4_PROPERTY_TAX) THEN
               GPV_NO_CWIP = CLASS_GPV(1,CLASS_POS)
               GPV_WITH_CWIP = GPV_NO_CWIP + CLASS_CWIP(1,CLASS_POS)
               NPV_NO_CWIP =  CLASS_GPV(1,CLASS_POS) -
     +               CLASS_CUMULATIVE_DEPRECIATION(1,CLASS_POS)
               NPV_WITH_CWIP = NPV_NO_CWIP + CLASS_CWIP(1,CLASS_POS)
            ELSEIF(CLOSING_BALANACE_4_PROPERTY_TAX) THEN
               GPV_NO_CWIP = CLASS_GPV(2,CLASS_POS)
               GPV_WITH_CWIP = GPV_NO_CWIP + CLASS_CWIP(2,CLASS_POS)
               NPV_NO_CWIP =  CLASS_GPV(2,CLASS_POS) -
     +               CLASS_CUMULATIVE_DEPRECIATION(2,CLASS_POS)
               NPV_WITH_CWIP = NPV_NO_CWIP + CLASS_CWIP(2,CLASS_POS)
            ELSE ! AVERAGE
               GPV_NO_CWIP = (CLASS_GPV(2,CLASS_POS)
     +                + CLASS_GPV(1,CLASS_POS))/2.
               GPV_WITH_CWIP = GPV_NO_CWIP
     +                + (CLASS_CWIP(2,CLASS_POS)
     +                   + CLASS_CWIP(1,CLASS_POS))/2.
               NPV_NO_CWIP = (CLASS_GPV(2,CLASS_POS)
     +          - CLASS_CUMULATIVE_DEPRECIATION(2,CLASS_POS)
     +          + CLASS_GPV(1,CLASS_POS)
     +          - CLASS_CUMULATIVE_DEPRECIATION(1,CLASS_POS))/2.
               NPV_WITH_CWIP = NPV_NO_CWIP
     +                 + (CLASS_CWIP(2,CLASS_POS)
     +                 + CLASS_CWIP(1,CLASS_POS))/2.
            ENDIF
         ENDIF
         IF(PROPERTY_TAX_METHOD == 1) acq_PROPERTY_VALUE = GPV_WITH_CWIP
         IF(PROPERTY_TAX_METHOD == 2) acq_PROPERTY_VALUE = GPV_NO_CWIP
         IF(PROPERTY_TAX_METHOD == 3) acq_PROPERTY_VALUE = NPV_WITH_CWIP
         IF(PROPERTY_TAX_METHOD == 4) acq_PROPERTY_VALUE = NPV_NO_CWIP

C WABASH VALLEY PROPERTY CALCULATION

         IF(WVPA()) THEN ! 2 year lag on tax basis
            TEMP_PROPERTY_VALUE = PROPERTY_TAX_BASIS(1,CLASS_POS)
            PROPERTY_TAX_BASIS(1,CLASS_POS) =
     +                           PROPERTY_TAX_BASIS(2,CLASS_POS)
            PROPERTY_TAX_BASIS(2,CLASS_POS) = acq_PROPERTY_VALUE
            acq_PROPERTY_VALUE = TEMP_PROPERTY_VALUE
         ENDIF
         IF(IPALCO() .AND. IPALCO_PROPERTY_TAX) THEN
            ! 1 year lag on tax basis
            TEMP_PROPERTY_VALUE = PROPERTY_TAX_BASIS(2,CLASS_POS)
            PROPERTY_TAX_BASIS(1,CLASS_POS) =
     +                           PROPERTY_TAX_BASIS(2,CLASS_POS)
            PROPERTY_TAX_BASIS(2,CLASS_POS) = acq_PROPERTY_VALUE
            acq_PROPERTY_VALUE = TEMP_PROPERTY_VALUE
         ENDIF
         acq_PROP_TAX_VALUE_B4_EXCLUSION = acq_PROPERTY_VALUE ! /2.
         acq_PROP_TAX_ADDENDUM = 
     + ns_class_parameters%CLASS_ADDENDUM_TO_PROPERTY_TAX
         acq_PROP_TAX_FROM_PRIOR_LEVEL =
     +                    EXCLUDED_SBU_PROPERTY_TAX(CLASS_LEVEL)
         acq_PROP_TAX_RATE = ns_class_parameters%PROPERTY_TAX_RATE

         IF(PROPERTY_TAX_METHOD == 1) acq_PROP_TAX_VALUE_EXCLUSION =
     +              PROPERTY_VALUE_GPV_WITH_CWIP(CLASS_LEVEL)
         IF(PROPERTY_TAX_METHOD == 2) acq_PROP_TAX_VALUE_EXCLUSION =
     +                PROPERTY_VALUE_GPV_NO_CWIP(CLASS_LEVEL)
         IF(PROPERTY_TAX_METHOD == 3) acq_PROP_TAX_VALUE_EXCLUSION =
     +              PROPERTY_VALUE_NPV_WITH_CWIP(CLASS_LEVEL)
         IF(PROPERTY_TAX_METHOD == 4) acq_PROP_TAX_VALUE_EXCLUSION =
     +                PROPERTY_VALUE_NPV_NO_CWIP(CLASS_LEVEL)

         acq_PROPERTY_VALUE = acq_PROP_TAX_VALUE_B4_EXCLUSION
     +            - acq_PROP_TAX_VALUE_EXCLUSION
         acq_PROPERTY_TAXES_BASED_ON_VALUE =
     + ns_class_parameters%PROPERTY_TAX_RATE/100. *
     +                           acq_PROPERTY_VALUE
         CLASS_PROPERTY_TAXES = acq_PROPERTY_TAXES_BASED_ON_VALUE
     + + ns_class_parameters%CLASS_ADDENDUM_TO_PROPERTY_TAX
     + + EXCLUDED_SBU_PROPERTY_TAX(CLASS_LEVEL)

C THE LEVELS VALUES HAVE BEEN USED ZERO THEM OUT.

         PROPERTY_VALUE_GPV_WITH_CWIP(CLASS_LEVEL) = 0.
         PROPERTY_VALUE_GPV_NO_CWIP(CLASS_LEVEL) = 0.
         PROPERTY_VALUE_NPV_WITH_CWIP(CLASS_LEVEL) = 0.
         PROPERTY_VALUE_NPV_NO_CWIP(CLASS_LEVEL) = 0.
         EXCLUDED_SBU_PROPERTY_TAX(CLASS_LEVEL) = 0.

C TRACK NEXT LEVEL'S EXCLUSIONS

         IF(EXCLUDE_SBU_PROPERTY_TAX .AND. CLASS_LEVEL > 0 .AND.
     +  (CLASS_TYPE(CLASS_POS) == SBU .OR.
     +           CLASS_TYPE(CLASS_POS) == REGULATED_GROUP)) THEN
            PROPERTY_VALUE_GPV_WITH_CWIP(CLASS_LEVEL-1) = GPV_WITH_CWIP
     +             + PROPERTY_VALUE_GPV_WITH_CWIP(CLASS_LEVEL-1)
            PROPERTY_VALUE_GPV_NO_CWIP(CLASS_LEVEL-1)   = GPV_NO_CWIP
     +               + PROPERTY_VALUE_GPV_NO_CWIP(CLASS_LEVEL-1)
            PROPERTY_VALUE_NPV_WITH_CWIP(CLASS_LEVEL-1) = NPV_WITH_CWIP
     +             + PROPERTY_VALUE_NPV_WITH_CWIP(CLASS_LEVEL-1)
            PROPERTY_VALUE_NPV_NO_CWIP(CLASS_LEVEL-1)   = NPV_NO_CWIP
     +               + PROPERTY_VALUE_NPV_NO_CWIP(CLASS_LEVEL-1)
            EXCLUDED_SBU_PROPERTY_TAX(CLASS_LEVEL-1) =
     +                CLASS_PROPERTY_TAXES
     +                + EXCLUDED_SBU_PROPERTY_TAX(CLASS_LEVEL-1)
         ENDIF
      RETURN

C      ENTRY RETURN_ST_JOE_BASE_REVENUES(R_BASE_ELECTRIC_REVENEUS)

C         R_BASE_ELECTRIC_REVENEUS = ST_JOE_BASE_ELECTRIC_REVENEUS
C      RETURN

      ENTRY GET_MAX_CLASS_NUM(R_MAX_CLASS_NUM)

         R_MAX_CLASS_NUM = MAX_CLASS_NUM
      RETURN

      ENTRY GET_PROD_CLASS_NAME(R_CLASS,R_CLASS_NAME)

         R_CLASS_NAME = CLASS_NAME(MASTER_CLASS_LIST(R_CLASS))
      RETURN
C     END

      ENTRY CLASS_CAPITAL_RATES()


         STD_MONTHLY_INTEREST_RATE = 0.
         STI_MONTHLY_INTEREST_RATE = 0.
         LTD_NEW_MONTHLY_INTEREST_RATE = 0.
         LTI_NEW_MONTHLY_INTEREST_RATE = 0.
         PS_NEW_MONTHLY_INTEREST_RATE = 0.
         MONTHLY_CUST_DEPOSITS_RATE = 0.
         MONTHLY_RETIREMENT_FUND_RATE = 0.
         MONTHLY_NUC_DECOM_RATE = 0.

         STD_RATE_AVAILABLE = .FALSE.
         LTD_RATE_AVAILABLE = .FALSE.
         PS_RATE_AVAILABLE = .FALSE.
         STI_RATE_AVAILABLE = .FALSE.
         LTI_RATE_AVAILABLE = .FALSE.
         CUST_DEPOSITS_RATE_AVAILABLE = .FALSE.
         RETIREMENT_FUND_RATE_AVAILABLE = .FALSE.
         NUC_DECOM_RATE_AVAILABLE = .FALSE.

C MOVED FORM GET_PARAMETERS 6/29/04

         CALL RETURN_NEW_ISSUE_INTEREST_RATES(globecom_YEAR,CLASS,
     +   ns_class_parameters%STD_INTEREST_RATE,
     +   ns_class_parameters%RETURN_ON_ST_INVEST,
     +   ns_class_parameters%INTEREST_ON_CUSTOMER_DEPOSITS,
     +   ns_class_parameters%RETURN_ON_LONG_TERM_INVESTMENTS,
     +   ns_class_parameters%RETURN_RETIREMENT_MEDICAL_FUND,
     +   ns_class_parameters%NUCL_DECOM_FUND_RETURN,
     +   OCI_NUCL_DECOM_FUND_RETURN_loc,
     +   OCI_RETURN_RETIREMENT_FUND)

         IF(STD_INTEREST_VECTOR(CLASS_POS) >= 1) THEN
             CALL GET_CAP_RATES_4_CURRENT_YEAR(VECTOR_FOUND,
     +                           STD_INTEREST_VECTOR(CLASS_POS),
     +                           MONTHLY_CAPITAL_VALUES,
     +                           YR)
            IF(VECTOR_FOUND) THEN
               STD_FIRST_HALF_RATE = SUM(MONTHLY_CAPITAL_VALUES(1:6))/
     +                                                     1200.
               STD_SECOND_HALF_RATE = SUM(MONTHLY_CAPITAL_VALUES(7:12))/
     +                                                     1200.
               STD_MONTHLY_INTEREST_RATE = MONTHLY_CAPITAL_VALUES
               STD_RATE_AVAILABLE = .TRUE.
            ELSE
       STD_FIRST_HALF_RATE = ns_class_parameters%STD_INTEREST_RATE/2.
       STD_SECOND_HALF_RATE = ns_class_parameters%STD_INTEREST_RATE/2.
            ENDIF
         ENDIF

         IF(LTD_INTEREST_VECTOR(CLASS_POS) >= 1) THEN
             CALL GET_CAP_RATES_4_CURRENT_YEAR(VECTOR_FOUND,
     +                           LTD_INTEREST_VECTOR(CLASS_POS),
     +                           MONTHLY_CAPITAL_VALUES,
     +                           YR)

            IF(VECTOR_FOUND) THEN
               ns_class_parameters%LTDRTE = 
     + SUM(MONTHLY_CAPITAL_VALUES(7:12))/600.
               LTD_NEW_MONTHLY_INTEREST_RATE = MONTHLY_CAPITAL_VALUES
               LTD_RATE_AVAILABLE = .TRUE.
            ENDIF
         ENDIF

         IF(PS_DIVIDENDS_VECTOR(CLASS_POS) >= 1) THEN
             CALL GET_CAP_RATES_4_CURRENT_YEAR(VECTOR_FOUND,
     +                           PS_DIVIDENDS_VECTOR(CLASS_POS),
     +                           MONTHLY_CAPITAL_VALUES,
     +                           YR)

            IF(VECTOR_FOUND) THEN
               ns_class_parameters%PSRATE = 
     + SUM(MONTHLY_CAPITAL_VALUES(7:12))/600.
               PS_NEW_MONTHLY_INTEREST_RATE = MONTHLY_CAPITAL_VALUES
               PS_RATE_AVAILABLE = .TRUE.
            ENDIF
         ENDIF

         STI_FIRST_HALF_RATE = ns_class_parameters%RETURN_ON_ST_INVEST
         STI_SECOND_HALF_RATE = ns_class_parameters%RETURN_ON_ST_INVEST
         IF(STI_INTEREST_VECTOR(CLASS_POS) >= 1) THEN
             CALL GET_CAP_RATES_4_CURRENT_YEAR(VECTOR_FOUND,
     +                           STI_INTEREST_VECTOR(CLASS_POS),
     +                           MONTHLY_CAPITAL_VALUES,
     +                           YR)
            IF(VECTOR_FOUND) THEN
               STI_FIRST_HALF_RATE = SUM(MONTHLY_CAPITAL_VALUES(1:6))/
     +                                                      600.
               STI_SECOND_HALF_RATE = SUM(MONTHLY_CAPITAL_VALUES(7:12))/
     +                                                      600.
               STI_MONTHLY_INTEREST_RATE = MONTHLY_CAPITAL_VALUES
               STI_RATE_AVAILABLE = .TRUE.
            ENDIF
         ENDIF

         LTI_FIRST_HALF_RATE =
     + ns_class_parameters%RETURN_ON_LONG_TERM_INVESTMENTS
         LTI_SECOND_HALF_RATE = 
     + ns_class_parameters%RETURN_ON_LONG_TERM_INVESTMENTS
         IF(LTI_INTEREST_VECTOR(CLASS_POS) >= 1) THEN
             CALL GET_CAP_RATES_4_CURRENT_YEAR(VECTOR_FOUND,
     +                           LTI_INTEREST_VECTOR(CLASS_POS),
     +                           MONTHLY_CAPITAL_VALUES,
     +                           YR)
            IF(VECTOR_FOUND) THEN
               LTI_FIRST_HALF_RATE = SUM(MONTHLY_CAPITAL_VALUES(1:6))/
     +                                                      600.
               LTI_SECOND_HALF_RATE = SUM(MONTHLY_CAPITAL_VALUES(7:12))/
     +                                                      600.
               LTI_NEW_MONTHLY_INTEREST_RATE = MONTHLY_CAPITAL_VALUES
               LTI_RATE_AVAILABLE = .TRUE.
            ENDIF
         ENDIF

         CUST_DEPOSITS_FIRST_HALF_RATE =
     + ns_class_parameters%INTEREST_ON_CUSTOMER_DEPOSITS
         CUST_DEPOSITS_SECOND_HALF_RATE = 
     + ns_class_parameters%INTEREST_ON_CUSTOMER_DEPOSITS
         IF(CUSTOMER_DEPOSIT_INTREST_VECTOR(CLASS_POS) >= 1) THEN
             CALL GET_CAP_RATES_4_CURRENT_YEAR(VECTOR_FOUND,
     +               CUSTOMER_DEPOSIT_INTREST_VECTOR(CLASS_POS),
     +               MONTHLY_CAPITAL_VALUES,YR)
            IF(VECTOR_FOUND) THEN
               CUST_DEPOSITS_FIRST_HALF_RATE =
     +                     SUM(MONTHLY_CAPITAL_VALUES(1:6))/600.
               CUST_DEPOSITS_SECOND_HALF_RATE =
     +                    SUM(MONTHLY_CAPITAL_VALUES(7:12))/600.
               MONTHLY_CUST_DEPOSITS_RATE = MONTHLY_CAPITAL_VALUES
               CUST_DEPOSITS_RATE_AVAILABLE = .TRUE.
            ENDIF
         ENDIF

         DECOM_FUND_FIRST_HALF_RATE = 
     + ns_class_parameters%NUCL_DECOM_FUND_RETURN
         DECOM_FUND_SECOND_HALF_RATE = 
     + ns_class_parameters%NUCL_DECOM_FUND_RETURN
         OCI_DECOM_FUND_FIRST_HALF_RATE = 
     + OCI_NUCL_DECOM_FUND_RETURN_loc
         OCI_DECOM_FUND_SECOND_HALF_RATE = 
     + OCI_NUCL_DECOM_FUND_RETURN_loc
         IF(DECOM_FUND_INTEREST_VECTOR(CLASS_POS) >= 1) THEN
             CALL GET_CAP_RATES_4_CURRENT_YEAR(VECTOR_FOUND,
     +                    DECOM_FUND_INTEREST_VECTOR(CLASS_POS),
     +                    MONTHLY_CAPITAL_VALUES,YR)
            IF(VECTOR_FOUND) THEN
               DECOM_FUND_FIRST_HALF_RATE =
     +                     SUM(MONTHLY_CAPITAL_VALUES(1:6))/600.
               DECOM_FUND_SECOND_HALF_RATE =
     +                    SUM(MONTHLY_CAPITAL_VALUES(7:12))/600.
               MONTHLY_NUC_DECOM_RATE = MONTHLY_CAPITAL_VALUES
               NUC_DECOM_RATE_AVAILABLE = .TRUE.
            ENDIF
         ENDIF

         OCI_RETIREMENT_FUND_FIRST_HALF_RATE =
     + OCI_RETURN_RETIREMENT_FUND
         OCI_RETIREMENT_FUND_SECND_HALF_RATE =
     +  OCI_RETURN_RETIREMENT_FUND
         RETIREMENT_FUND_FIRST_HALF_RATE =
     + ns_class_parameters%RETURN_RETIREMENT_MEDICAL_FUND
         RETIREMENT_FUND_SECND_HALF_RATE =
     + ns_class_parameters%RETURN_RETIREMENT_MEDICAL_FUND
         IF(RETIREMENT_FUND_INTEREST_VECTOR(CLASS_POS) >= 1) THEN
             CALL GET_CAP_RATES_4_CURRENT_YEAR(VECTOR_FOUND,
     +               RETIREMENT_FUND_INTEREST_VECTOR(CLASS_POS),
     +               MONTHLY_CAPITAL_VALUES,YR)
            IF(VECTOR_FOUND) THEN
               RETIREMENT_FUND_FIRST_HALF_RATE =
     +                     SUM(MONTHLY_CAPITAL_VALUES(1:6))/600.
               RETIREMENT_FUND_SECND_HALF_RATE =
     +                    SUM(MONTHLY_CAPITAL_VALUES(7:12))/600.
               MONTHLY_RETIREMENT_FUND_RATE = MONTHLY_CAPITAL_VALUES
               RETIREMENT_FUND_RATE_AVAILABLE = .TRUE.
            ENDIF
         ENDIF

      RETURN

      ENTRY RETURN_MONTHLY_STD_VECTOR_RATES(R_RATE_FOUND,
     +                              R_MONTHLY_RATE)

         R_RATE_FOUND = STD_RATE_AVAILABLE
         IF(R_RATE_FOUND) R_MONTHLY_RATE = STD_MONTHLY_INTEREST_RATE
      RETURN

      ENTRY RETURN_MONTHLY_LTD_VECTOR_RATES(R_RATE_FOUND,
     +                              R_MONTHLY_RATE)

         R_RATE_FOUND = LTD_RATE_AVAILABLE
         IF(R_RATE_FOUND) R_MONTHLY_RATE = LTD_NEW_MONTHLY_INTEREST_RATE
      RETURN

      ENTRY RETURN_MONTHLY_STI_VECTOR_RATES(R_RATE_FOUND,
     +                              R_MONTHLY_RATE)

         R_RATE_FOUND = STI_RATE_AVAILABLE
         IF(R_RATE_FOUND) R_MONTHLY_RATE = STI_MONTHLY_INTEREST_RATE
      RETURN

      ENTRY RETURN_MONTHLY_LTI_VECTOR_RATES(R_RATE_FOUND,
     +                              R_MONTHLY_RATE)

         R_RATE_FOUND = LTI_RATE_AVAILABLE
         IF(R_RATE_FOUND) R_MONTHLY_RATE = LTI_NEW_MONTHLY_INTEREST_RATE
      RETURN

      ENTRY RETURN_MONTHLY_PS_VECTOR_RATES(R_RATE_FOUND,
     +                              R_MONTHLY_RATE)

         R_RATE_FOUND = PS_RATE_AVAILABLE
         IF(R_RATE_FOUND) R_MONTHLY_RATE = PS_NEW_MONTHLY_INTEREST_RATE
      RETURN


      ENTRY RET_MTHLY_CUSTOMER_VECTOR_RATES(R_RATE_FOUND,
     +                                           R_MONTHLY_RATE)

         R_RATE_FOUND = CUST_DEPOSITS_RATE_AVAILABLE
         IF(R_RATE_FOUND) R_MONTHLY_RATE = MONTHLY_CUST_DEPOSITS_RATE
      RETURN

      ENTRY RET_MTHLY_RETIRMNT_VECTOR_RATES(R_RATE_FOUND,
     +                                             R_MONTHLY_RATE)

         R_RATE_FOUND = RETIREMENT_FUND_RATE_AVAILABLE
         IF(R_RATE_FOUND) R_MONTHLY_RATE = MONTHLY_RETIREMENT_FUND_RATE
      RETURN

      ENTRY RET_MTHLY_DECOMMG_VECTOR_RATES(R_RATE_FOUND,
     +                                                 R_MONTHLY_RATE)


         R_RATE_FOUND = NUC_DECOM_RATE_AVAILABLE
         IF(R_RATE_FOUND) R_MONTHLY_RATE = MONTHLY_NUC_DECOM_RATE
      RETURN

      ENTRY SUM_CASH_EXPENSES(R_TOTAL_CASH_EXPENSES)


            R_TOTAL_CASH_EXPENSES = acq_fuel_expense
     +                    + acq_PURCHASE_POWER_EXPENSE
     +                    + acq_variable_expense
     +                    + acq_INC_CAPACITY_PURCHASES_TO_LEVEL_RM
     +                    + ACQ_FIXED_EXPENSE
     +                    + acq_OTHER_EXPENSE_1
     +                    + acq_OTHER_EXPENSE_2
     +                            + KEPCO_WC_CURENT_MAINT_ENRG_COST
     +                    + acq_OTHER_EXPENSE_3
     +                    + ACQ_DSM_EXPENSE
     +                    + ACQ_DSM_REBATE
     +                    + acq_ATL_LEASE_INTEREST
     +                    + ACQ_SERVICE_TRANSACTION_EXPENSE
     +                    + ACQ_EMISSION_CREDIT_EXPENSE
     +                    + ACQ_NF_CASH_EXPENSE
     +                            + CATAWBA_EXPENSES
     +                    + ACQ_CATAWBA_CAPACITY_PAYMENTS
     +                    + acq_TRANSMISSION_OPERATION
     +                    + acq_TRANSMISSION_MAINTENANCE
     +                    + acq_DISTRIBUTION_OPERATION
     +                    + acq_DISTRIBUTION_MAINTENANCE
     +                    + acq_CUSTOMER_ACCOUNTS
     +                    + acq_CUSTOMER_SERVICES
     +                    + acq_SALES_EXPENSE
     +                    + acq_AG_OPERATIONS
     +                    + acq_AG_MAINTENANCE
     +                    + acq_RETIREMENT_MEDICAL_PAYMENTS
     +                    + acq_TOTAL_DERIVATIVE_EXPENSE
     +                    + acq_TOTAL_FUEL_DERIV_EXPENSES
     +                    + acq_WVPA_PROPERTY_TAXES_IN_POWER_COSTS
     +                    + ATL_Opt_Expenses    ! 1
     +                    + acq_AssessedPensionOPEB

      RETURN
      END subroutine init_asset_class_info
      SUBROUTINE IMPA_ANNUAL_RATIOS(PARENT_CLASS,CLASS,
     +                      acq_VARIABLE,OPERATING_METHOD)
      REAL (KIND=4) :: acq_VARIABLE(0:*)
      REAL (KIND=4) :: VOID_REAL,MemberCost
      REAL (KIND=4),PARAMETER :: NOT_AVAIL=-999999.
      CHARACTER (LEN=1) :: OPERATING_METHOD
      INTEGER (KIND=2) :: CLASS
      REAL (KIND=4) :: CLASS_CUSTOMERS(0:12),MONTHLY_ENERGY(0:12)
      LOGICAL (KIND=1) :: PARENT_CLASS

      
         acq_VARIABLE(744) = NOT_AVAIL
         acq_VARIABLE(752) = NOT_AVAIL
         acq_VARIABLE(754) = NOT_AVAIL
         acq_VARIABLE(756) = NOT_AVAIL
         VOID_REAL = acq_VARIABLE(39)     ! Book Interest on LTD 39
     +        + acq_VARIABLE(497)   ! Self Funded Capital Assets (#497)
     +     + acq_VARIABLE(119)  ! LTD retirement Payments (#119)
         acq_VARIABLE(773) = acq_VARIABLE(333) + acq_VARIABLE(0)
         IF(VOID_REAL /= 0.) acq_VARIABLE(744) = 1.
     + + acq_VARIABLE(45)/VOID_REAL
         acq_VARIABLE(745) = acq_VARIABLE(17)   ! Dep
     +           + acq_VARIABLE(384) !LTD Amort
     +           - acq_VARIABLE(119)
         acq_VARIABLE(755) = acq_VARIABLE(39) + acq_VARIABLE(119) ! P&I
         IF(.NOT. PARENT_CLASS) RETURN
         CALL IMPA_CUSTOMERS_SALES(CLASS,CLASS_CUSTOMERS,
     +                     MONTHLY_ENERGY)
         acq_VARIABLE(753) = CLASS_CUSTOMERS(0)/12.
      acq_VARIABLE(751) = MONTHLY_ENERGY(0)*1000000.  ! MEMBER SALES kWh
         MemberCost = acq_VARIABLE(333) + acq_VARIABLE(0)
         ! average member rate (I think was talking about MemberCost)
         
        IF(MONTHLY_ENERGY(0) /= 0.) acq_VARIABLE(752)= 1000.*MemberCost/
     +                                  (10.*MONTHLY_ENERGY(0))
         IF(acq_VARIABLE(753) /= 0.) THEN
         ! CUSTOMER USAGE
         acq_VARIABLE(754) = acq_VARIABLE(751)/acq_VARIABLE(753)
            ! AVERAGE BILL
        acq_VARIABLE(756) = 1000000.*acq_VARIABLE(773)/acq_VARIABLE(753)
         ENDIF
      RETURN
      END SUBROUTINE IMPA_ANNUAL_RATIOS
      SUBROUTINE GET_PTCs_TEST(CLASS,CLASS_PTCs)
      INTEGER (KIND=2) :: CLASS
      REAL (KIND=4) :: CLASS_PTCs(0:12)
         CLASS_PTCs = 25

      END SUBROUTINE GET_PTCs_TEST

